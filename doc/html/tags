<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index">mainPageApplicationSupportSection</docanchor>
    <docanchor file="index">mainPageThreadingSection</docanchor>
    <docanchor file="index">mainPagePythonSection</docanchor>
    <docanchor file="index">mainPageMemoryManagementSection</docanchor>
    <docanchor file="index">mainPageIOSection</docanchor>
    <docanchor file="index">mainPageDataSection</docanchor>
    <docanchor file="index">mainPageObjectSection</docanchor>
    <docanchor file="index">mainPageAlgorithmsSection</docanchor>
    <docanchor file="index">mainPageRenderingSection</docanchor>
    <docanchor file="index">mainPageParameterisedSection</docanchor>
    <docanchor file="index">mainPageRTTISection</docanchor>
    <docanchor file="index">mainPageMathSection</docanchor>
  </compound>
  <compound kind="file">
    <name>StringUtil.py</name>
    <path>/disk1/playpen/dev/cortex/doc/python/IECore/</path>
    <filename>StringUtil_8py</filename>
    <member kind="function">
      <type>def</type>
      <name>wrap</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>aed976b926d5fbdf49ce78b6c262d7291</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>quoteCmdLineArg</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>ad41e999368d9e7c2c45583815d1712c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unquoteCmdLineArg</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>a7c4d6484d9896a24e733934d2391c1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>quoteCmdLineArgs</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>a3cdd92f831a39f765016b34dde494cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>quotedCmdLine</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>aac29f1b2dc8e6bdbc5da8bdca857c0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unquoteCmdLineArgs</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>a078561285cbd111fe19afb98d9a2f75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unquoteCmdLine</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>ae816ffa7b0111e525f8e1cd08933793d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>__all__</name>
      <anchorfile>namespaceIECore_1_1StringUtil.html</anchorfile>
      <anchor>a003cff3e7ddab81c1955c1f1e6b87d42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AngleConversion.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>AngleConversion_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>T</type>
      <name>degreesToRadians</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1b4de96ee578936003713f30d569509f</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>radiansToDegrees</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa536c6b52592c93212eaf3fd6ff05213</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BezierAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>BezierAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>void</type>
      <name>bezierSubdivide</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7c39dd45fb2be5d59837e6143821e91f</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, typename Vec::BaseType tolerance, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierSubdivide</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acb2bd3abec255cea10d7544b93304680</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, typename Vec::BaseType tolerance, F &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>BoxAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab035b5a6a69af7fe2f670f0b1fdec537</anchor>
      <arglist>(std::ostream &amp;os, const Imath::Box&lt; T &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Vec2&lt; T &gt;</type>
      <name>closestPointInBox</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b1996f69636095d67f59e928ceae50d</anchor>
      <arglist>(const Imath::Vec2&lt; T &gt; &amp;p, const Imath::Box&lt; Imath::Vec2&lt; T &gt; &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxOps.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>BoxOps_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>BoxTraits&lt; T &gt;::BaseType</type>
      <name>boxSize</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7763cfcad2d0ef8682c50be59a064000</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>BoxTraits&lt; T &gt;::BaseType</type>
      <name>boxCenter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afae734f76ad479c5f5723adef2976ef7</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxExtend</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a68c54a45d0ff61dedb8de9651101168c</anchor>
      <arglist>(T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxExtend</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a39d58550a043ba17840b1710b630d9d0</anchor>
      <arglist>(T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>boxIntersection</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa17f1a420d60f1dd9a3d27fe362d81a4</anchor>
      <arglist>(const T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a625eecbec2fa37a2e78a446c67c7ff2f</anchor>
      <arglist>(const T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa6d895a80c72abf1d8f7fe7bc224d258</anchor>
      <arglist>(const T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxContains</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1a8863af5add2529a94a761b9b357852</anchor>
      <arglist>(const T &amp;box, const T &amp;containee)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab40f42c2ea0a2619754688b1c4f4845b</anchor>
      <arglist>(const T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;origin, const typename BoxTraits&lt; T &gt;::BaseType &amp;direction, typename BoxTraits&lt; T &gt;::BaseType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxSplit</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1d9f52aeeeee83e91604b0f8d0220845</anchor>
      <arglist>(const T &amp;box, T &amp;low, T &amp;high, int axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxSplit</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2f24a5a06a24e098c2c4bf2db673089a</anchor>
      <arglist>(const T &amp;box, T &amp;low, T &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxMajorAxis</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace610f0f61893bcc44cb09012387e59b</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClientDisplayDriver.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>ClientDisplayDriver_8h</filename>
    <includes id="DisplayDriver_8h" name="DisplayDriver.h" local="yes" imported="no">IECore/DisplayDriver.h</includes>
    <class kind="class">IECore::ClientDisplayDriver</class>
    <namespace>IECore</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>CompositeAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>T</type>
      <name>compositeOver</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad4ba1dc817433bddbd9bfbbfcd8bbdab</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMax</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaec4e0025d22d5133da459443796056c</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMin</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1f82a36ec1c91527ec7c42116e1ccb45</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMultiply</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abd15dd37dcc27a345b7c157b2131d4a6</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DespatchTypedData.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>DespatchTypedData_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1d51fa21da2e208390b7c045138bc6c6</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor, ErrorHandler &amp;errorHandler)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>despatchTraitsTest</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac766dd6ab0172b2126a1a093e167500c</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DisplayDriver.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>DisplayDriver_8h</filename>
    <class kind="class">IECore::DisplayDriver</class>
    <class kind="class">IECore::DisplayDriver::DisplayDriverDescription</class>
    <namespace>IECore</namespace>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b0d82826db05769f98e4b20733a9f2e</anchor>
      <arglist>(DisplayDriver)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DisplayDriverServer.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>DisplayDriverServer_8h</filename>
    <includes id="DisplayDriver_8h" name="DisplayDriver.h" local="yes" imported="no">IECore/DisplayDriver.h</includes>
    <class kind="class">IECore::DisplayDriverServer</class>
    <namespace>IECore</namespace>
  </compound>
  <compound kind="file">
    <name>FastFloat.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>FastFloat_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>int</type>
      <name>fastFloat2Int</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa370c14c7a8cca0e1fda92ce3b5db203</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatRound</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaf857fc797051f75662498ed8a1cd4c6</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatFloor</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afbaf1beda1f26962b2b5ef0346bd5eae</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatCeil</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>add584de2d39fefdd06d9ffc0684dbbfd</anchor>
      <arglist>(double v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HexConversion.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>HexConversion_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>void</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3d563b6dfe13cdcf285a9922d5dd8b1f</anchor>
      <arglist>(T value, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae9ee58367483174a21fd073601e4f688</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3de3e8092d6788428d73e1229dbfc066</anchor>
      <arglist>(RandomAccessIterator first, RandomAccessIterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9d1f6f3418ff73a4b419df9c3ce69fad</anchor>
      <arglist>(T n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3bf95622dc793d3bd7ab77a44ef3d8bf</anchor>
      <arglist>(InputIterator first, InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b9d3a694cae6a21d26cd9854b1faf18</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a500ac1ded0ff2942c4449e4bbacd3b47</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageDisplayDriver.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>ImageDisplayDriver_8h</filename>
    <includes id="DisplayDriver_8h" name="DisplayDriver.h" local="yes" imported="no">IECore/DisplayDriver.h</includes>
    <class kind="class">IECore::ImageDisplayDriver</class>
    <namespace>IECore</namespace>
  </compound>
  <compound kind="file">
    <name>Math.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>Math_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a11cf3c4f61da0541f87b8116121451f7</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>smoothstep</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7bcf4e848b4773f68bb99023465390e9</anchor>
      <arglist>(T v0, T v1, T x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>MatrixAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>Imath::Matrix44&lt; T &gt;</type>
      <name>matrixFromBasis</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14509b451874071a7768e479637d4670</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;x, const Imath::Vec3&lt; T &gt; &amp;y, const Imath::Vec3&lt; T &gt; &amp;z, const Imath::Vec3&lt; T &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab253fd88efc28ca5d338662911e2c1d6</anchor>
      <arglist>(const Imath::Matrix33&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a587684881e5382f30e9fe17cb43bb511</anchor>
      <arglist>(const Imath::Matrix44&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44d</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0adfe0922a2beca63c87fed0cd5a266f</anchor>
      <arglist>(const Imath::M44f &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b8440858b8c4ffe740949c96b53c960</anchor>
      <arglist>(const Imath::M44d &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixOps.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>MatrixOps_8h</filename>
    <class kind="struct">IECore::MatConvert</class>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>void</type>
      <name>matSet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa40d92ffb1eb05c31cf8484c3bc1c8bd</anchor>
      <arglist>(T &amp;m, unsigned int i, unsigned int j, typename MatrixTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matSetAll</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a00a7f96b73c3bc7ba42e41e7003ceefe</anchor>
      <arglist>(T &amp;m, typename MatrixTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>MatrixTraits&lt; T &gt;::BaseType</type>
      <name>matGet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab914c7226f81116fc617f2ecd356e974</anchor>
      <arglist>(const T &amp;m, unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>matConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1236b40544abf71d2a0a501bf3196d66</anchor>
      <arglist>(const T &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a19254ea4967d4c9f130427bd2ceb2168</anchor>
      <arglist>(const T &amp;m1, S &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>PolygonAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="enumeration">
      <name>Winding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af7b6a1ae33dbc2a88ce32dfe2f5e17c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>polygonNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acc85ae9cbb7b22f3805704225f9df573</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>polygonNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a17f00debf46292dc8c00db29b944246f</anchor>
      <arglist>(Iterator first, Iterator last, bool normalized)</arglist>
    </member>
    <member kind="function">
      <type>Winding</type>
      <name>polygonWinding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a487052497a4315c5588611a33338b39b</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>Winding</type>
      <name>polygonWinding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aba6cde4cae38285183d33f565389a602</anchor>
      <arglist>(Iterator first, Iterator last, const typename std::iterator_traits&lt; Iterator &gt;::value_type &amp;viewVector)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box&lt; typename std::iterator_traits&lt; Iterator &gt;::value_type &gt;</type>
      <name>polygonBound</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9329e6d85b4b1c771c6d8912f0b1583e</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type::BaseType</type>
      <name>polygonArea</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>add4e4b1c928077809a769e3f854bd72c</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuatAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>QuatAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>T</type>
      <name>sinx_over_x</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6f348699d2df15c9c35a2929ae681f4a</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>angle4D</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a43d172eee37b9d8f8a3bbedef83dc50c</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Quat&lt; T &gt;</type>
      <name>slerp</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38d1245c9bd50eadb74b692d1866ed90</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2, T t)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Quat&lt; T &gt;</type>
      <name>slerpShortestArc</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0b923b49d22803849e9aba01db5b7e0d</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2, T t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalHarmonicsAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>SphericalHarmonicsAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>SphericalHarmonics&lt; S &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aecd05e7ada6871aedcd6acff6ea1f531</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;sh1, const SphericalHarmonics&lt; T &gt; &amp;sh2)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abf59b7f4a878ed21f8885a2ca49fd185</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;sh1, const SphericalHarmonics&lt; T &gt; &amp;sh2)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; T &gt;</type>
      <name>lambertianKernel</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a655d999c944cc2c1016e6460d893671f</anchor>
      <arglist>(unsigned int bands, bool normalized=false)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; T &gt;</type>
      <name>rotatedKernel</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a52f8556e394f5601b57e8178be680e19</anchor>
      <arglist>(const SphericalHarmonics&lt; T &gt; &amp;kernel, const Imath::V3f &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>windowingFilter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2b20b1a6953f806606b03323badbd2f6</anchor>
      <arglist>(SphericalHarmonics&lt; T &gt; &amp;sh, float windowSize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TetrahedronAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>TetrahedronAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>tetrahedronVolume</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3c0a3c1d40f99dcbe3f305855489c506</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>tetrahedronPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad0e8c1ca76aced7e8176c7902657548d</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tetrahedronBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99dc289648627ed2c79f273c9bbd854a</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, const Vec &amp;p, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>tetrahedronClosestBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afd1e1128b42383275680ffdbf7c8a874</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, const Vec &amp;p, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3i</type>
      <name>tetrahedronFaceIndices</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae653b6b597a5b885e734a61c0987b94e</anchor>
      <arglist>(int face)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriangleAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>TriangleAlgo_8h</filename>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>triangleArea</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a717c0d210f22c639f9208da3ca029291</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>triangleNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38351cd020b654fad2dfba84d29ea969</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>trianglePoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0e2aad2bb1815adab6911e2c04d71ee4</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>triangleClosestBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a16a4e57412b805e821ac21e973438782</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>triangleClosestPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3f9f446c956048e67e8a8c64340ad74a</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>triangleBarycentricFeature</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a113d8143c59d4fce778a01b615fc12aa</anchor>
      <arglist>(const Vec &amp;barycentric, typename VectorTraits&lt; Vec &gt;::BaseType tolerance=1.e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>triangleClosestFeature</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1c24e64cc7b0a4848bcc6f53a786301f</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleContainsPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5b8383bdf7f73cd2b259e6bed40aa418</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleContainsPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad68070055902975870c2f778715623bb</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleRayIntersection</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a64651bb9cfb7f5613f98fdc0f6857daa</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;origin, const Vec &amp;dir, Vec &amp;pt, Vec &amp;barycentric, bool &amp;front)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VecAlgo.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>VecAlgo_8h</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceImath.html</anchorfile>
      <anchor>a9cec6cf69c9223ca3ea47da5038d151a</anchor>
      <arglist>(const Imath::Vec2&lt; T &gt; &amp;left, const Imath::Vec2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceImath.html</anchorfile>
      <anchor>ae3e4b079283b7ac3689a0c01f9f202b1</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;left, const Imath::Vec3&lt; T &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorOps.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECore/</path>
    <filename>VectorOps_8h</filename>
    <class kind="struct">IECore::VecConvert</class>
    <namespace>IECore</namespace>
    <member kind="function">
      <type>void</type>
      <name>vecSet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18948647f19520cf12ba11db251dddfc</anchor>
      <arglist>(T &amp;v, unsigned int i, typename VectorTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecSetAll</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaf351fee1035879b26d6c7745e70c9c6</anchor>
      <arglist>(T &amp;v, typename VectorTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecGet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1e6a858ffcdbf77ec8ca691cba65db84</anchor>
      <arglist>(const T &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecAdd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac10a8f7752598f38950dbb0276700223</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecAdd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a35107a11d4a0a6224f2ab389526cbfbe</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecSub</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a41cb920a8b105d223723307b86f96dbb</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecSub</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abe922c557a0e1e08c2f05433372ebad0</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4c56519e83c3de2c8dc38b61dd60d16e</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0ff1feb8764720dd53ff0dac021a0091</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a366b027956dcc1fc2c0ba239b62fda7d</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aef284dcc5e6c67d198bb94c7a1a5b543</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3677b1b435995dd2730dbc6a81f6f3a5</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a568fded550af50dd86a0e7c1c558fb1d</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a44956acd2fc0087718e631b0b34a2422</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3e688bfbeacce6a960e6e75b0c4f78c</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDot</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3625e1090bda1d6f7b0e87cff9b2cc2b</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecLength2</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa4ae353d864873f714b60b712a215006</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecLength</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4ca9a2a8967aadcb346afc77ab870d02</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecNormalize</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5ba29c5234e77a60c6a1f50965f40815</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDistance2</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aecb0b8120b8e25269ba2812a74a3e3bf</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDistance</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a31bbe3707e0994b03da60a8fd414145c</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>vecConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad35987df3526b6ce62531fd330441976</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34c8f8370582a3775e0dc0d5f73f5502</anchor>
      <arglist>(const T &amp;v1, S &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecConstruct</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af742ca85bb6c5b754967f3abb0304947</anchor>
      <arglist>(const typename VectorTraits&lt; T &gt;::BaseType *components)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecCross</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7c14a24dc3c5d923226e404d93c98244</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GL.h</name>
    <path>/disk1/playpen/dev/cortex/include/IECoreGL/</path>
    <filename>GL_8h</filename>
    <namespace>IECoreGL</namespace>
    <member kind="function">
      <type>void</type>
      <name>glVertex</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4c67ddec9f8560462987170936772a22</anchor>
      <arglist>(const Imath::V3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glNormal</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a149825e5c3aaecea83beb1ab3868bfbf</anchor>
      <arglist>(const Imath::V3f &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTranslate</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a13a26df16c625fff9f539b09d9e2dac6</anchor>
      <arglist>(const Imath::V2f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTranslate</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3db66a696420e816783701d8679070b9</anchor>
      <arglist>(const Imath::V3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ieAttr.mel</name>
    <path>/disk1/playpen/dev/cortex/mel/IECoreMaya/</path>
    <filename>ieAttr_8mel</filename>
    <member kind="function">
      <type>global proc string</type>
      <name>ieAttrNode</name>
      <anchorfile>ieAttr_8mel.html</anchorfile>
      <anchor>a0560536a0085930938a60e54d7e9b961</anchor>
      <arglist>(string $attr)</arglist>
    </member>
    <member kind="function">
      <type>global proc int</type>
      <name>ieAttrNextIndex</name>
      <anchorfile>ieAttr_8mel.html</anchorfile>
      <anchor>a08d960f27e17d86006542d22ee64a5ba</anchor>
      <arglist>(string $attr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ieNode.mel</name>
    <path>/disk1/playpen/dev/cortex/mel/IECoreMaya/</path>
    <filename>ieNode_8mel</filename>
    <member kind="function">
      <type>global proc string</type>
      <name>ieNodeCreateShapeWithParent</name>
      <anchorfile>ieNode_8mel.html</anchorfile>
      <anchor>aff8fa5e67f61cd96432c7889818b44f6</anchor>
      <arglist>(string $name, string $type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iePanel.mel</name>
    <path>/disk1/playpen/dev/cortex/mel/IECoreMaya/</path>
    <filename>iePanel_8mel</filename>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelCreate</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>add64c0115dfa9e025babb19c8f31c1bc</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelInit</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>a613ad5ac263ad3e8e85522e477e041ee</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelAdd</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>acf71edb593d6aa4808e8012a2fbb0436</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelRemove</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>a33b9e9f2311e5f352a85f44cc310dc37</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc string</type>
      <name>iePanelSave</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>aeb8090f4789e21b370c78ffb824a7901</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelDelete</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>ac123d6f0d336b09a50788b0ca5d32a9a</anchor>
      <arglist>(string $panel)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>iePanelRestore</name>
      <anchorfile>iePanel_8mel.html</anchorfile>
      <anchor>ad3ba57856089a2e2a34f860966924653</anchor>
      <arglist>(string $panel, string $state)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ieParameterisedHolder.mel</name>
    <path>/disk1/playpen/dev/cortex/mel/IECoreMaya/</path>
    <filename>ieParameterisedHolder_8mel</filename>
    <member kind="function">
      <type>global proc string</type>
      <name>ieParameterisedHolderClassName</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>acfa594c6144a051728d392699ca5fcc7</anchor>
      <arglist>(string $nodeName)</arglist>
    </member>
    <member kind="function">
      <type>global proc int</type>
      <name>ieParameterisedHolderClassVersion</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>afe1cb0ff492a643768400063dddd39b4</anchor>
      <arglist>(string $nodeName)</arglist>
    </member>
    <member kind="function">
      <type>global proc string</type>
      <name>ieParameterisedHolderClassSearchPathEnvVar</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>abe6582edd7a3e3a7189a475500017bb4</anchor>
      <arglist>(string $nodeName)</arglist>
    </member>
    <member kind="function">
      <type>global proc string</type>
      <name>ieParameterisedHolderClassDescription</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>a5a78f034c98aad7cf05a9073ba89817f</anchor>
      <arglist>(string $nodeName)</arglist>
    </member>
    <member kind="function">
      <type>global proc int[]</type>
      <name>ieParameterisedHolderClassVersions</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>a8a5afe22433a77ee7de1e98605147c59</anchor>
      <arglist>(string $nodeName)</arglist>
    </member>
    <member kind="function">
      <type>global proc</type>
      <name>ieParameterisedHolderSetParameterised</name>
      <anchorfile>ieParameterisedHolder_8mel.html</anchorfile>
      <anchor>a947f549a0c03421d0c12a48b484f7fb4</anchor>
      <arglist>(string $nodeName, string $className, int $classVersion, string $searchPathEnvVar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ieProceduralHolder.mel</name>
    <path>/disk1/playpen/dev/cortex/mel/IECoreMaya/</path>
    <filename>ieProceduralHolder_8mel</filename>
    <member kind="function">
      <type>global proc string</type>
      <name>ieProceduralHolderCreate</name>
      <anchorfile>ieProceduralHolder_8mel.html</anchorfile>
      <anchor>a50f03485976510d7892f63a18f777ce3</anchor>
      <arglist>(string $name, string $className, int $classVersion)</arglist>
    </member>
    <member kind="function">
      <type>global proc string[]</type>
      <name>ieProceduralHolderClassNames</name>
      <anchorfile>ieProceduralHolder_8mel.html</anchorfile>
      <anchor>ad19cfbfef8e2a3018d10e5a6789fce7c</anchor>
      <arglist>(string $match)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>IECoreMaya</name>
    <title></title>
    <filename>IECoreMaya</filename>
    <docanchor file="IECoreMaya">IECore</docanchor>
    <docanchor file="IECoreMaya">mainPageDependencies</docanchor>
    <docanchor file="IECoreMaya">Maya</docanchor>
  </compound>
  <compound kind="group">
    <name>mathGroup</name>
    <title>Math</title>
    <filename>group__mathGroup.html</filename>
    <class kind="class">IECore::BoundedKDTree</class>
    <class kind="class">IECore::CubicBasis</class>
    <class kind="class">IECore::EuclideanToSphericalTransform</class>
    <class kind="class">IECore::ImathRandAdapter</class>
    <class kind="class">IECore::InverseDistanceWeightedInterpolation</class>
    <class kind="class">IECore::KDTree</class>
    <class kind="class">IECore::LevenbergMarquardt</class>
    <class kind="class">IECore::LineSegment</class>
    <class kind="class">IECore::Lookup</class>
    <class kind="class">IECore::PerlinNoise</class>
    <class kind="class">IECore::PointDistribution</class>
    <class kind="class">IECore::RadixSort</class>
    <class kind="class">IECore::SphericalToEuclideanTransform</class>
    <class kind="class">IECore::Spline</class>
    <class kind="class">IECore::TransformationMatrix</class>
    <class kind="class">IECore::Turbulence</class>
    <subgroup>shGroup</subgroup>
    <file>AngleConversion.h</file>
    <file>BezierAlgo.h</file>
    <file>BoxAlgo.h</file>
    <file>MatrixAlgo.h</file>
    <file>PolygonAlgo.h</file>
    <file>QuatAlgo.h</file>
    <file>TetrahedronAlgo.h</file>
    <file>TriangleAlgo.h</file>
    <file>VecAlgo.h</file>
  </compound>
  <compound kind="group">
    <name>coreGroup</name>
    <title>Core</title>
    <filename>group__coreGroup.html</filename>
    <class kind="class">IECore::CompoundData</class>
    <class kind="class">IECore::Data</class>
    <class kind="class">IECore::DataCastOp</class>
    <class kind="class">IECore::DataConvertOp</class>
    <class kind="class">IECore::DataInterleaveOp</class>
    <class kind="class">IECore::DataPromoteOp</class>
    <class kind="class">IECore::Object</class>
    <class kind="class">IECore::Op</class>
    <class kind="class">IECore::Parameter</class>
    <class kind="class">IECore::ParameterisedProcedural</class>
    <class kind="class">IECore::TypedData</class>
  </compound>
  <compound kind="group">
    <name>geometryGroup</name>
    <title>Geometry</title>
    <filename>group__geometryGroup.html</filename>
    <class kind="class">IECore::CurvesPrimitive</class>
    <class kind="class">IECore::MeshPrimitive</class>
    <class kind="class">IECore::NURBSPrimitive</class>
    <class kind="class">IECore::PatchMeshPrimitive</class>
    <class kind="class">IECore::PointsPrimitive</class>
    <class kind="class">IECore::Primitive</class>
    <class kind="class">IECore::SpherePrimitive</class>
  </compound>
  <compound kind="group">
    <name>geometryProcessingGroup</name>
    <title>Geometry Processing</title>
    <filename>group__geometryProcessingGroup.html</filename>
    <class kind="class">IECore::CurveExtrudeOp</class>
    <class kind="class">IECore::CurveLineariser</class>
    <class kind="class">IECore::CurvesMergeOp</class>
    <class kind="class">IECore::CurvesPrimitiveEvaluator</class>
    <class kind="class">IECore::CurveTangentsOp</class>
    <class kind="class">IECore::FaceAreaOp</class>
    <class kind="class">IECore::FaceVaryingPromotionOp</class>
    <class kind="class">IECore::MappedRandomPointDistributionOp</class>
    <class kind="class">IECore::MarchingCubes</class>
    <class kind="class">IECore::MeshDistortionsOp</class>
    <class kind="class">IECore::MeshMergeOp</class>
    <class kind="class">IECore::MeshNormalsOp</class>
    <class kind="class">IECore::MeshPrimitiveEvaluator</class>
    <class kind="class">IECore::MeshPrimitiveImplicitSurfaceOp</class>
    <class kind="class">IECore::MeshPrimitiveShrinkWrapOp</class>
    <class kind="class">IECore::MeshTangentsOp</class>
    <class kind="class">IECore::MeshVertexReorderOp</class>
    <class kind="class">IECore::ParticleMeshOp</class>
    <class kind="class">IECore::PointBoundsOp</class>
    <class kind="class">IECore::PointDensitiesOp</class>
    <class kind="class">IECore::PointDistributionOp</class>
    <class kind="class">IECore::PointMeshOp</class>
    <class kind="class">IECore::PointNormalsOp</class>
    <class kind="class">IECore::PointRepulsionOp</class>
    <class kind="class">IECore::PointSmoothSkinningOp</class>
    <class kind="class">IECore::PointsMotionOp</class>
    <class kind="class">IECore::PointsPrimitiveEvaluator</class>
    <class kind="class">IECore::PointVelocityDisplaceOp</class>
    <class kind="class">IECore::PolygonIterator</class>
    <class kind="class">IECore::PolygonVertexIterator</class>
    <class kind="class">IECore::PrimitiveEvaluator</class>
    <class kind="class">IECore::SpherePrimitiveEvaluator</class>
    <class kind="class">IECore::TransformOp</class>
    <class kind="class">IECore::TriangulateOp</class>
    <class kind="class">IECore::Triangulator</class>
    <class kind="class">IECore::UniformRandomPointDistributionOp</class>
    <class kind="class">IECoreRI::GXEvaluator</class>
    <subgroup>skinningGroup</subgroup>
    <subgroup>implicitGroup</subgroup>
  </compound>
  <compound kind="group">
    <name>skinningGroup</name>
    <title>Smooth Skinning</title>
    <filename>group__skinningGroup.html</filename>
    <class kind="class">IECore::AddSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::CompressSmoothSkinningDataOp</class>
    <class kind="class">IECore::ContrastSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::DecompressSmoothSkinningDataOp</class>
    <class kind="class">IECore::LimitSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::MixSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::NormalizeSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::PointSmoothSkinningOp</class>
    <class kind="class">IECore::RemoveSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::ReorderSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::SmoothSkinningData</class>
    <class kind="class">IECore::SmoothSmoothSkinningWeightsOp</class>
  </compound>
  <compound kind="group">
    <name>implicitGroup</name>
    <title>Implicit Surfaces</title>
    <filename>group__implicitGroup.html</filename>
    <class kind="class">IECore::BlobbyImplicitSurfaceFunction</class>
    <class kind="class">IECore::CachedImplicitSurfaceFunction</class>
    <class kind="class">IECore::CSGImplicitSurfaceFunction</class>
    <class kind="class">IECore::ImplicitSurfaceFunction</class>
    <class kind="class">IECore::MarchingCubes</class>
    <class kind="class">IECore::MeshPrimitiveImplicitSurfaceFunction</class>
    <class kind="class">IECore::MeshPrimitiveImplicitSurfaceOp</class>
    <class kind="class">IECore::PlaneImplicitSurfaceFunction</class>
    <class kind="class">IECore::PrimitiveImplicitSurfaceFunction</class>
    <class kind="class">IECore::SphereImplicitSurfaceFunction</class>
    <class kind="class">IECore::ZhuBridsonImplicitSurfaceFunction</class>
  </compound>
  <compound kind="group">
    <name>imageProcessingGroup</name>
    <title>Image Processing</title>
    <filename>group__imageProcessingGroup.html</filename>
    <class kind="class">IECore::ChannelOp</class>
    <class kind="class">IECore::CineonToLinearOp</class>
    <class kind="class">IECore::ColorSpaceTransformOp</class>
    <class kind="class">IECore::ColorTransformOp</class>
    <class kind="class">IECore::CurveTracer</class>
    <class kind="class">IECore::EnvMapSampler</class>
    <class kind="class">IECore::Grade</class>
    <class kind="class">IECore::HdrMergeOp</class>
    <class kind="class">IECore::HitMissTransform</class>
    <class kind="class">IECore::ImageCompositeOp</class>
    <class kind="class">IECore::ImageCropOp</class>
    <class kind="class">IECore::ImageDiffOp</class>
    <class kind="class">IECore::ImagePremultiplyOp</class>
    <class kind="class">IECore::ImagePrimitive</class>
    <class kind="class">IECore::ImagePrimitiveEvaluator</class>
    <class kind="class">IECore::ImageThinner</class>
    <class kind="class">IECore::ImageUnpremultiplyOp</class>
    <class kind="class">IECore::LinearToCineonOp</class>
    <class kind="class">IECore::LinearToPanalogOp</class>
    <class kind="class">IECore::LinearToRec709Op</class>
    <class kind="class">IECore::LinearToSRGBOp</class>
    <class kind="class">IECore::LuminanceOp</class>
    <class kind="class">IECore::MedianCutSampler</class>
    <class kind="class">IECore::PanalogToLinearOp</class>
    <class kind="class">IECore::Rec709ToLinearOp</class>
    <class kind="class">IECore::SplineToImage</class>
    <class kind="class">IECore::SRGBToLinearOp</class>
    <class kind="class">IECore::SummedAreaOp</class>
    <class kind="class">IECore::UVDistortOp</class>
    <class kind="class">IECore::WarpOp</class>
    <subgroup>deepCompositingGroup</subgroup>
  </compound>
  <compound kind="group">
    <name>deepCompositingGroup</name>
    <title>Deep Compositing</title>
    <filename>group__deepCompositingGroup.html</filename>
    <class kind="class">IECore::DeepImageConverter</class>
    <class kind="class">IECore::DeepImageReader</class>
    <class kind="class">IECore::DeepImageWriter</class>
    <class kind="class">IECore::DeepPixel</class>
    <class kind="class">IECoreHoudini::RATDeepImageReader</class>
    <class kind="class">IECoreHoudini::RATDeepImageWriter</class>
  </compound>
  <compound kind="group">
    <name>renderingGroup</name>
    <title>Rendering</title>
    <filename>group__renderingGroup.html</filename>
    <class kind="class">IECore::AttributeBlock</class>
    <class kind="class">IECore::AttributeState</class>
    <class kind="class">IECore::CapturingRenderer</class>
    <class kind="class">IECore::ClientDisplayDriver</class>
    <class kind="class">IECore::Display</class>
    <class kind="class">IECore::DisplayDriver</class>
    <class kind="class">IECore::DisplayDriverServer</class>
    <class kind="class">IECore::EnvMapSampler</class>
    <class kind="class">IECore::Font</class>
    <class kind="class">IECore::Group</class>
    <class kind="class">IECore::ImageDisplayDriver</class>
    <class kind="class">IECore::Light</class>
    <class kind="class">IECore::MarschnerLookupTableOp</class>
    <class kind="class">IECore::MotionBlock</class>
    <class kind="class">IECore::MotionPrimitive</class>
    <class kind="class">IECore::ParameterisedProcedural</class>
    <class kind="class">IECore::PerlinNoise</class>
    <class kind="class">IECore::PointsMotionOp</class>
    <class kind="class">IECore::Renderable</class>
    <class kind="class">IECore::Renderer</class>
    <class kind="class">IECore::Shader</class>
    <class kind="class">IECore::SimpleSubsurface</class>
    <class kind="class">IECore::StateRenderable</class>
    <class kind="class">IECore::Transform</class>
    <class kind="class">IECore::TransformBlock</class>
    <class kind="class">IECore::Turbulence</class>
    <class kind="class">IECore::VisibleRenderable</class>
    <class kind="class">IECore::WorldBlock</class>
    <class kind="class">IECoreRI::Renderer</class>
    <class kind="class">IECoreGL::Renderer</class>
  </compound>
  <compound kind="group">
    <name>shGroup</name>
    <title>Spherical Harmonics</title>
    <filename>group__shGroup.html</filename>
    <class kind="class">IECore::EnvMapSHProjector</class>
    <class kind="class">IECore::RealSphericalHarmonicFunction</class>
    <class kind="class">IECore::SphericalHarmonics</class>
    <class kind="class">IECore::SphericalHarmonicsProjector</class>
    <class kind="class">IECore::SphericalHarmonicsRotationMatrix</class>
    <class kind="class">IECore::SphericalHarmonicsTensor</class>
    <class kind="class">IECore::SphericalHarmonicsTransferMatrix</class>
    <file>SphericalHarmonicsAlgo.h</file>
  </compound>
  <compound kind="group">
    <name>utilityGroup</name>
    <title>Utilities</title>
    <filename>group__utilityGroup.html</filename>
    <class kind="class">IECore::CircularIterator</class>
    <class kind="class">IECore::CompoundMessageHandler</class>
    <class kind="class">IECore::Exception</class>
    <class kind="class">IECore::FilteredMessageHandler</class>
    <class kind="class">IECore::Interned</class>
    <class kind="class">IECore::LevelFilteredMessageHandler</class>
    <class kind="class">IECore::LRUCache</class>
    <class kind="class">IECore::MessageHandler</class>
    <class kind="class">IECore::NullMessageHandler</class>
    <class kind="class">IECore::OStreamMessageHandler</class>
    <class kind="class">IECore::RefCounted</class>
    <class kind="class">IECore::ScopedMessageHandler</class>
    <class kind="class">IECore::SearchPath</class>
    <class kind="class">IECore::Timer</class>
    <subgroup>fileSequenceGroup</subgroup>
  </compound>
  <compound kind="group">
    <name>fileSequenceGroup</name>
    <title>File Sequences</title>
    <filename>group__fileSequenceGroup.html</filename>
    <class kind="class">IECore::BinaryFrameList</class>
    <class kind="class">IECore::CompoundFrameList</class>
    <class kind="class">IECore::EmptyFrameList</class>
    <class kind="class">IECore::ExclusionFrameList</class>
    <class kind="class">IECore::FileSequence</class>
    <class kind="class">IECore::FrameList</class>
    <class kind="class">IECore::FrameRange</class>
    <class kind="class">IECore::ReorderedFrameList</class>
    <class kind="class">IECore::ReversedFrameList</class>
  </compound>
  <compound kind="group">
    <name>ioGroup</name>
    <title>IO</title>
    <filename>group__ioGroup.html</filename>
    <class kind="class">IECore::AttributeCache</class>
    <class kind="class">IECore::BGEOParticleReader</class>
    <class kind="class">IECore::BINMeshReader</class>
    <class kind="class">IECore::BINParticleWriter</class>
    <class kind="class">IECore::CachedReader</class>
    <class kind="class">IECore::CINImageReader</class>
    <class kind="class">IECore::CINImageWriter</class>
    <class kind="class">IECore::DeepImageConverter</class>
    <class kind="class">IECore::DeepImageReader</class>
    <class kind="class">IECore::DeepImageWriter</class>
    <class kind="class">IECore::DPXImageReader</class>
    <class kind="class">IECore::DPXImageWriter</class>
    <class kind="class">IECore::EXRImageReader</class>
    <class kind="class">IECore::EXRImageWriter</class>
    <class kind="class">IECore::FileIndexedIO</class>
    <class kind="class">IECore::FileSystemIndexedIO</class>
    <class kind="class">IECore::IFFHairReader</class>
    <class kind="class">IECore::ImageReader</class>
    <class kind="class">IECore::ImageWriter</class>
    <class kind="class">IECore::IndexedIOInterface</class>
    <class kind="class">IECore::InterpolatedCache</class>
    <class kind="class">IECore::JPEGImageReader</class>
    <class kind="class">IECore::JPEGImageWriter</class>
    <class kind="class">IECore::NParticleReader</class>
    <class kind="class">IECore::ObjectReader</class>
    <class kind="class">IECore::ObjectWriter</class>
    <class kind="class">IECore::OBJReader</class>
    <class kind="class">IECore::ParticleReader</class>
    <class kind="class">IECore::ParticleWriter</class>
    <class kind="class">IECore::PDCParticleReader</class>
    <class kind="class">IECore::PDCParticleWriter</class>
    <class kind="class">IECore::PNGImageReader</class>
    <class kind="class">IECore::Reader</class>
    <class kind="class">IECore::SGIImageReader</class>
    <class kind="class">IECore::TGAImageReader</class>
    <class kind="class">IECore::TGAImageWriter</class>
    <class kind="class">IECore::TIFFImageReader</class>
    <class kind="class">IECore::TIFFImageWriter</class>
    <class kind="class">IECore::Writer</class>
    <class kind="class">IECore::YUVImageWriter</class>
    <class kind="class">IECoreRI::PTCParticleReader</class>
    <class kind="class">IECoreRI::PTCParticleWriter</class>
    <class kind="class">IECoreRI::RIBWriter</class>
    <class kind="class">IECoreRI::SLOReader</class>
    <class kind="class">IECoreHoudini::RATDeepImageReader</class>
    <class kind="class">IECoreHoudini::RATDeepImageWriter</class>
  </compound>
  <compound kind="group">
    <name>conversionGroup</name>
    <title>Conversions</title>
    <filename>group__conversionGroup.html</filename>
    <class kind="class">IECore::Converter</class>
    <class kind="class">IECoreNuke::FromNukeCameraConverter</class>
    <class kind="class">IECoreNuke::FromNukePointsConverter</class>
    <class kind="class">IECoreNuke::FromNukeTileConverter</class>
    <class kind="class">IECoreNuke::MeshToNukeGeometryConverter</class>
    <class kind="class">IECoreGL::SplineToGLTextureConverter</class>
    <class kind="class">IECoreGL::ToGLCameraConverter</class>
    <class kind="class">IECoreGL::ToGLCurvesConverter</class>
    <class kind="class">IECoreGL::ToGLMeshConverter</class>
    <class kind="class">IECoreGL::ToGLPointsConverter</class>
    <class kind="class">IECoreGL::ToGLTextureConverter</class>
    <class kind="class">IECoreMaya::ConverterHolder</class>
    <class kind="class">IECoreMaya::FromMayaArrayDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaCurveConverter</class>
    <class kind="class">IECoreMaya::FromMayaFluidConverter</class>
    <class kind="class">IECoreMaya::FromMayaGroupConverter</class>
    <class kind="class">IECoreMaya::FromMayaImageConverter</class>
    <class kind="class">IECoreMaya::FromMayaMatrixDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaMatrixVectorDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaMeshConverter</class>
    <class kind="class">IECoreMaya::FromMayaNumericDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaParticleConverter</class>
    <class kind="class">IECoreMaya::FromMayaSkinClusterConverter</class>
    <class kind="class">IECoreMaya::FromMayaTransformationMatrixConverter</class>
    <class kind="class">IECoreMaya::FromMayaTransformConverter</class>
    <class kind="class">IECoreMaya::ToMayaArrayDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaGroupConverter</class>
    <class kind="class">IECoreMaya::ToMayaImageConverter</class>
    <class kind="class">IECoreMaya::ToMayaMatrixDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaMatrixVectorDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaMeshConverter</class>
    <class kind="class">IECoreMaya::ToMayaNumericDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaParticleConverter</class>
    <class kind="class">IECoreMaya::ToMayaPlugConverter</class>
    <class kind="class">IECoreMaya::ToMayaSkinClusterConverter</class>
  </compound>
  <compound kind="group">
    <name>environmentGroup</name>
    <title>Environment variables</title>
    <filename>group__environmentGroup.html</filename>
  </compound>
  <compound kind="group">
    <name>python</name>
    <title>Python functionality</title>
    <filename>group__python.html</filename>
    <class kind="class">IECore::Formatter</class>
    <class kind="class">IECore::WrappedTextFormatter</class>
    <class kind="class">IECore::OptionalCompoundParameter</class>
    <class kind="class">IECore::MenuItemDefinition</class>
    <class kind="class">IECore::MenuDefinition</class>
    <class kind="class">IECore::ParameterParser</class>
    <class kind="class">IECore::CapturingMessageHandler</class>
    <class kind="class">IECore::CompoundVectorParameter</class>
    <file>StringUtil.py</file>
    <member kind="function">
      <type>def</type>
      <name>setLogLevelByName</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaafa52a1b86080c1d2ae16c1d75dbaa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setLogLevel</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga958458f7304199fe49eba8f932e78a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>showCallStack</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaec00f12201c986dfc03099f5b404ae06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>exceptionInfo</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab16c3e12ce448cac0d89b7cd64a46ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>debugException</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga8816b5bb1bfbd62ce0de1f24341f65ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>debug</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3dffcb0dfa21f3a98ea4ad8e8d69f937</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>warning</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaf776df988edc82ce75ea24188f49bead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>info</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab474307ada80262fb692a14baa5ba96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>error</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4f0a227589d6446d529c3fabf5770a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSimpleDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4b330d0302904b94899fb5151d0953fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSimpleNumericDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gafcea35f31fa3c263c305974133e40a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isMatrixDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaee2955c9935b368f20715373ff4afca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isMappingDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gacb492ee9744fc846c8d590124814c28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSequenceDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3debe370f279662df8c9e11e308e4a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getDataDerivedTypes</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3474144fef79a5c11e7569ee4ee579cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>elementTypeFromDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gae7286dc1f63e5a7c624c3a4f6175c939</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>valueTypeFromSequenceType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga6619cb6555e1a9da9a38b44bad980abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataTypeFromElementType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga5305711c3a58fb7d92504d85a9cd77e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataTypeFromElement</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga449a2d8c0c20b0705d1648a3d050d902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataFromElement</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga8fb68d00c2f564473a1c0b92b1f101d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>mv</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab51cd7e171f8ad862b6722f8ed397030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cp</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga23c9282469a5cf3470cf1deedb5e6e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rm</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gad4fffebe708e73720943a0a8e988792d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cat</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4353cbd9f5c0e3975fdf03f7c0063ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>formatParameterHelp</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaa3451ef2733474701cb1badc248ac7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>loadConfig</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab661a7e6ac05a1bf99bf0060e63a1836</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>melgroup</name>
    <title>MEL</title>
    <filename>group__melgroup.html</filename>
    <file>ieAttr.mel</file>
    <file>ieNode.mel</file>
    <file>ieParameterisedHolder.mel</file>
    <file>ieProceduralHolder.mel</file>
  </compound>
  <compound kind="namespace">
    <name>IECore</name>
    <filename>namespaceIECore.html</filename>
    <class kind="class">IECore::AddSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::AttributeBlock</class>
    <class kind="class">IECore::AttributeCache</class>
    <class kind="class">IECore::AttributeState</class>
    <class kind="class">IECore::BGEOParticleReader</class>
    <class kind="class">IECore::BinaryFrameList</class>
    <class kind="class">IECore::BINMeshReader</class>
    <class kind="class">IECore::BINParticleWriter</class>
    <class kind="class">IECore::BlindDataHolder</class>
    <class kind="class">IECore::BlobbyImplicitSurfaceFunction</class>
    <class kind="class">IECore::BoundedKDTree</class>
    <class kind="struct">IECore::BoxTypeTraits</class>
    <class kind="struct">IECore::BoxTraits</class>
    <class kind="class">IECore::CachedImplicitSurfaceFunction</class>
    <class kind="class">IECore::CachedReader</class>
    <class kind="class">IECore::CameraController</class>
    <class kind="class">IECore::CapturingRenderer</class>
    <class kind="class">IECore::ChannelOp</class>
    <class kind="class">IECore::CineonToLinearDataConversion</class>
    <class kind="class">IECore::CineonToLinearOp</class>
    <class kind="class">IECore::CINImageReader</class>
    <class kind="class">IECore::CINImageWriter</class>
    <class kind="class">IECore::CircularIterator</class>
    <class kind="class">IECore::ClassData</class>
    <class kind="class">IECore::ClientDisplayDriver</class>
    <class kind="class">IECore::ColorSpaceTransformOp</class>
    <class kind="struct">IECore::ColorTransform</class>
    <class kind="class">IECore::ColorTransformOp</class>
    <class kind="class">IECore::CompoundData</class>
    <class kind="class">IECore::CompoundDataConversion</class>
    <class kind="class">IECore::CompoundFrameList</class>
    <class kind="class">IECore::CompoundMessageHandler</class>
    <class kind="class">IECore::CompoundObject</class>
    <class kind="class">IECore::CompoundParameter</class>
    <class kind="class">IECore::CompressSmoothSkinningDataOp</class>
    <class kind="class">IECore::ContrastSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::Converter</class>
    <class kind="class">IECore::CSGImplicitSurfaceFunction</class>
    <class kind="class">IECore::CubeColorLookup</class>
    <class kind="class">IECore::CubicBasis</class>
    <class kind="class">IECore::CurveExtrudeOp</class>
    <class kind="class">IECore::CurveLineariser</class>
    <class kind="class">IECore::CurvesMergeOp</class>
    <class kind="class">IECore::CurvesPrimitive</class>
    <class kind="class">IECore::CurvesPrimitiveEvaluator</class>
    <class kind="class">IECore::CurveTangentsOp</class>
    <class kind="class">IECore::CurveTracer</class>
    <class kind="class">IECore::Data</class>
    <class kind="class">IECore::DataCastOp</class>
    <class kind="struct">IECore::DataConversion</class>
    <class kind="struct">IECore::DataConvert</class>
    <class kind="class">IECore::DataConvertOp</class>
    <class kind="class">IECore::DataInterleaveOp</class>
    <class kind="class">IECore::DataPromoteOp</class>
    <class kind="class">IECore::DecompressSmoothSkinningDataOp</class>
    <class kind="class">IECore::DeepImageConverter</class>
    <class kind="class">IECore::DeepImageReader</class>
    <class kind="class">IECore::DeepImageWriter</class>
    <class kind="class">IECore::DeepPixel</class>
    <class kind="struct">IECore::Deleter</class>
    <class kind="struct">IECore::ArrayDeleter</class>
    <class kind="struct">IECore::NullDeleter</class>
    <class kind="struct">IECore::DimensionTraits</class>
    <class kind="class">IECore::DirNameParameter</class>
    <class kind="class">IECore::Display</class>
    <class kind="class">IECore::DisplayDriver</class>
    <class kind="class">IECore::DisplayDriverServer</class>
    <class kind="class">IECore::DPXImageReader</class>
    <class kind="class">IECore::DPXImageWriter</class>
    <class kind="class">IECore::EmptyFrameList</class>
    <class kind="class">IECore::EnvMapSampler</class>
    <class kind="class">IECore::EnvMapSHProjector</class>
    <class kind="class">IECore::EuclideanToSphericalTransform</class>
    <class kind="class">IECore::Exception</class>
    <class kind="class">IECore::IOException</class>
    <class kind="class">IECore::FileNotFoundIOException</class>
    <class kind="class">IECore::InvalidArgumentException</class>
    <class kind="class">IECore::PermissionDeniedIOException</class>
    <class kind="class">IECore::NotImplementedException</class>
    <class kind="class">IECore::ExclusionFrameList</class>
    <class kind="class">IECore::EXRImageReader</class>
    <class kind="class">IECore::EXRImageWriter</class>
    <class kind="class">IECore::FaceAreaOp</class>
    <class kind="class">IECore::FaceVaryingPromotionOp</class>
    <class kind="class">IECore::FileIndexedIO</class>
    <class kind="class">IECore::FileNameParameter</class>
    <class kind="class">IECore::FileSequence</class>
    <class kind="class">IECore::FileSequenceParameter</class>
    <class kind="class">IECore::FileSequenceVectorParameter</class>
    <class kind="class">IECore::FileSystemIndexedIO</class>
    <class kind="class">IECore::FilteredMessageHandler</class>
    <class kind="class">IECore::Font</class>
    <class kind="class">IECore::FrameList</class>
    <class kind="class">IECore::FrameRange</class>
    <class kind="class">IECore::FromCoreConverter</class>
    <class kind="class">IECore::Grade</class>
    <class kind="class">IECore::Group</class>
    <class kind="class">IECore::HdrMergeOp</class>
    <class kind="class">IECore::HeaderGenerator</class>
    <class kind="class">IECore::HierarchicalCache</class>
    <class kind="class">IECore::HitMissTransform</class>
    <class kind="class">IECore::IFFFile</class>
    <class kind="class">IECore::IFFHairReader</class>
    <class kind="class">IECore::ImageCompositeOp</class>
    <class kind="class">IECore::ImageCropOp</class>
    <class kind="class">IECore::ImageDiffOp</class>
    <class kind="class">IECore::ImageDisplayDriver</class>
    <class kind="class">IECore::ImagePremultiplyOp</class>
    <class kind="class">IECore::ImagePrimitive</class>
    <class kind="class">IECore::ImagePrimitiveEvaluator</class>
    <class kind="class">IECore::ImageReader</class>
    <class kind="class">IECore::ImageThinner</class>
    <class kind="class">IECore::ImageUnpremultiplyOp</class>
    <class kind="class">IECore::ImageWriter</class>
    <class kind="class">IECore::ImathRandAdapter</class>
    <class kind="class">IECore::ImplicitSurfaceFunction</class>
    <class kind="class">IECore::IndexedIOFilter</class>
    <class kind="class">IECore::IndexedIONullFilter</class>
    <class kind="class">IECore::IndexedIOEntryTypeFilter</class>
    <class kind="class">IECore::IndexedIORegexFilter</class>
    <class kind="class">IECore::IndexedIOInterface</class>
    <class kind="class">IECore::IndexedIOPath</class>
    <class kind="class">IECore::Interned</class>
    <class kind="class">IECore::InterpolatedCache</class>
    <class kind="class">IECore::IntrusivePtr</class>
    <class kind="class">IECore::InverseDistanceWeightedInterpolation</class>
    <class kind="class">IECore::JPEGImageReader</class>
    <class kind="class">IECore::JPEGImageWriter</class>
    <class kind="class">IECore::KDTree</class>
    <class kind="class">IECore::LevelFilteredMessageHandler</class>
    <class kind="class">IECore::LevenbergMarquardt</class>
    <class kind="class">IECore::Light</class>
    <class kind="class">IECore::LimitSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::LinearToCineonDataConversion</class>
    <class kind="class">IECore::LinearToCineonOp</class>
    <class kind="struct">IECore::LinearToPanalogDataConversion</class>
    <class kind="class">IECore::LinearToPanalogOp</class>
    <class kind="struct">IECore::LinearToRec709DataConversion</class>
    <class kind="class">IECore::LinearToRec709Op</class>
    <class kind="struct">IECore::LinearToSRGBDataConversion</class>
    <class kind="class">IECore::LinearToSRGBOp</class>
    <class kind="class">IECore::LineSegment</class>
    <class kind="class">IECore::Lookup</class>
    <class kind="class">IECore::LRUCache</class>
    <class kind="class">IECore::LuminanceOp</class>
    <class kind="class">IECore::MappedRandomPointDistributionOp</class>
    <class kind="class">IECore::MarchingCubes</class>
    <class kind="class">IECore::MarschnerBCSDF</class>
    <class kind="class">IECore::MarschnerLookupTableOp</class>
    <class kind="class">IECore::MarschnerParameter</class>
    <class kind="class">IECore::MatrixMultiplyOp</class>
    <class kind="struct">IECore::MatConvert</class>
    <class kind="struct">IECore::MatrixTraits</class>
    <class kind="struct">IECore::MatrixTraits&lt; Imath::M33f &gt;</class>
    <class kind="struct">IECore::MeanSquaredError</class>
    <class kind="class">IECore::MedianCutSampler</class>
    <class kind="class">IECore::MemoryStream</class>
    <class kind="class">IECore::MeshDistortionsOp</class>
    <class kind="class">IECore::MeshMergeOp</class>
    <class kind="class">IECore::MeshNormalsOp</class>
    <class kind="class">IECore::MeshPrimitive</class>
    <class kind="class">IECore::MeshPrimitiveBuilder</class>
    <class kind="class">IECore::MeshPrimitiveEvaluator</class>
    <class kind="class">IECore::MeshPrimitiveImplicitSurfaceFunction</class>
    <class kind="class">IECore::MeshPrimitiveImplicitSurfaceOp</class>
    <class kind="class">IECore::MeshPrimitiveShrinkWrapOp</class>
    <class kind="class">IECore::MeshTangentsOp</class>
    <class kind="class">IECore::MeshVertexReorderOp</class>
    <class kind="class">IECore::MessageHandler</class>
    <class kind="class">IECore::MixSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::ModifyOp</class>
    <class kind="class">IECore::MotionBlock</class>
    <class kind="class">IECore::MotionPrimitive</class>
    <class kind="class">IECore::MurmurHash</class>
    <class kind="class">IECore::NormalizeSmoothSkinningWeightsOp</class>
    <class kind="class">IECore::NParticleReader</class>
    <class kind="class">IECore::NullMessageHandler</class>
    <class kind="class">IECore::NullObject</class>
    <class kind="class">IECore::NumericParameter</class>
    <class kind="class">IECore::NURBSPrimitive</class>
    <class kind="class">IECore::Object</class>
    <class kind="class">IECore::ObjectParameter</class>
    <class kind="class">IECore::ObjectReader</class>
    <class kind="class">IECore::ObjectVector</class>
    <class kind="class">IECore::ObjectWriter</class>
    <class kind="class">IECore::OBJReader</class>
    <class kind="class">IECore::Op</class>
    <class kind="class">IECore::OStreamMessageHandler</class>
    <class kind="class">IECore::OversamplesCalculator</class>
    <class kind="class">IECore::PanalogToLinearDataConversion</class>
    <class kind="class">IECore::PanalogToLinearOp</class>
    <class kind="class">IECore::Parameter</class>
    <class kind="class">IECore::Parameterised</class>
    <class kind="class">IECore::ParameterisedInterface</class>
    <class kind="class">IECore::ParameterisedProcedural</class>
    <class kind="class">IECore::ParticleMeshOp</class>
    <class kind="class">IECore::ParticleReader</class>
    <class kind="class">IECore::ParticleWriter</class>
    <class kind="class">IECore::PatchMeshPrimitive</class>
    <class kind="class">IECore::PathParameter</class>
    <class kind="class">IECore::PathVectorParameter</class>
    <class kind="class">IECore::PDCParticleReader</class>
    <class kind="class">IECore::PDCParticleWriter</class>
    <class kind="struct">IECore::SmoothStepFalloff</class>
    <class kind="struct">IECore::SmootherStepFalloff</class>
    <class kind="class">IECore::PerlinNoise</class>
    <class kind="class">IECore::PlaneImplicitSurfaceFunction</class>
    <class kind="class">IECore::PNGImageReader</class>
    <class kind="class">IECore::PointBoundsOp</class>
    <class kind="class">IECore::PointDensitiesOp</class>
    <class kind="class">IECore::PointDistribution</class>
    <class kind="class">IECore::PointDistributionOp</class>
    <class kind="class">IECore::PointMeshOp</class>
    <class kind="class">IECore::PointNormalsOp</class>
    <class kind="class">IECore::PointRepulsionOp</class>
    <class kind="class">IECore::PointSmoothSkinningOp</class>
    <class kind="class">IECore::PointsMotionOp</class>
    <class kind="class">IECore::PointsPrimitive</class>
    <class kind="class">IECore::PointsPrimitiveEvaluator</class>
    <class kind="class">IECore::PointVelocityDisplaceOp</class>
    <class kind="class">IECore::PolygonIterator</class>
    <class kind="class">IECore::PolygonVertexIterator</class>
    <class kind="class">IECore::PreWorldRenderable</class>
    <class kind="class">IECore::Primitive</class>
    <class kind="class">IECore::PrimitiveEvaluator</class>
    <class kind="class">IECore::PrimitiveImplicitSurfaceFunction</class>
    <class kind="class">IECore::PrimitiveOp</class>
    <class kind="struct">IECore::PrimitiveVariable</class>
    <class kind="class">IECore::RadixSort</class>
    <class kind="class">IECore::RandomRotationOp</class>
    <class kind="class">IECore::Reader</class>
    <class kind="class">IECore::RealSphericalHarmonicFunction</class>
    <class kind="struct">IECore::Rec709ToLinearDataConversion</class>
    <class kind="class">IECore::Rec709ToLinearOp</class>
    <class kind="class">IECore::RefCounted</class>
    <class kind="class">IECore::RemoveSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::Renderable</class>
    <class kind="class">IECore::Renderer</class>
    <class kind="class">IECore::ReorderedFrameList</class>
    <class kind="class">IECore::ReorderSmoothSkinningInfluencesOp</class>
    <class kind="class">IECore::ReversedFrameList</class>
    <class kind="class">IECore::RGBToXYZColorTransform</class>
    <class kind="class">IECore::RunTimeTyped</class>
    <class kind="struct">IECore::ScaledDataConversion</class>
    <class kind="class">IECore::ScopedMessageHandler</class>
    <class kind="class">IECore::SearchPath</class>
    <class kind="class">IECore::SGIImageReader</class>
    <class kind="class">IECore::Shader</class>
    <class kind="class">IECore::SimpleSubsurface</class>
    <class kind="class">IECore::LongDataAlias</class>
    <class kind="class">IECore::SmoothSkinningData</class>
    <class kind="class">IECore::SmoothSmoothSkinningWeightsOp</class>
    <class kind="struct">IECore::SpaceTransform</class>
    <class kind="class">IECore::SphereImplicitSurfaceFunction</class>
    <class kind="class">IECore::SpherePrimitive</class>
    <class kind="class">IECore::SpherePrimitiveEvaluator</class>
    <class kind="class">IECore::SphericalHarmonics</class>
    <class kind="class">IECore::SphericalHarmonicsProjector</class>
    <class kind="class">IECore::SphericalHarmonicsRotationMatrix</class>
    <class kind="class">IECore::SphericalHarmonicsTensor</class>
    <class kind="class">IECore::SphericalHarmonicsTransferMatrix</class>
    <class kind="class">IECore::SphericalToEuclideanTransform</class>
    <class kind="class">IECore::Spline</class>
    <class kind="class">IECore::SplineToImage</class>
    <class kind="struct">IECore::SRGBToLinearDataConversion</class>
    <class kind="class">IECore::SRGBToLinearOp</class>
    <class kind="class">IECore::StateRenderable</class>
    <class kind="class">IECore::SummedAreaOp</class>
    <class kind="class">IECore::TGAImageReader</class>
    <class kind="class">IECore::TGAImageWriter</class>
    <class kind="class">IECore::TIFFImageReader</class>
    <class kind="class">IECore::TIFFImageWriter</class>
    <class kind="class">IECore::TimePeriod</class>
    <class kind="class">IECore::Timer</class>
    <class kind="class">IECore::ToCoreConverter</class>
    <class kind="class">IECore::Transform</class>
    <class kind="class">IECore::TransformationMatrix</class>
    <class kind="class">IECore::TransformBlock</class>
    <class kind="class">IECore::TransformOp</class>
    <class kind="class">IECore::TriangulateOp</class>
    <class kind="class">IECore::Triangulator</class>
    <class kind="class">IECore::Turbulence</class>
    <class kind="class">IECore::TypedData</class>
    <class kind="class">IECore::TypedDataTraits</class>
    <class kind="class">IECore::TypedObjectParameter</class>
    <class kind="class">IECore::TypedParameter</class>
    <class kind="class">IECore::TypedPrimitiveOp</class>
    <class kind="struct">IECore::TypeInfoCmp</class>
    <class kind="class">IECore::UniformRandomPointDistributionOp</class>
    <class kind="class">IECore::UVDistortOp</class>
    <class kind="class">IECore::ValidatedStringParameter</class>
    <class kind="class">IECore::VectorDataFilterOp</class>
    <class kind="struct">IECore::VecConvert</class>
    <class kind="struct">IECore::VectorTraits</class>
    <class kind="struct">IECore::VectorTraits&lt; int &gt;</class>
    <class kind="struct">IECore::VectorTraits&lt; float &gt;</class>
    <class kind="struct">IECore::VectorTraits&lt; double &gt;</class>
    <class kind="class">IECore::LongVectorDataAlias</class>
    <class kind="class">IECore::VisibleRenderable</class>
    <class kind="class">IECore::WarpOp</class>
    <class kind="class">IECore::WorldBlock</class>
    <class kind="class">IECore::Writer</class>
    <class kind="class">IECore::XYYToXYZColorTransform</class>
    <class kind="class">IECore::XYZToRGBColorTransform</class>
    <class kind="class">IECore::XYZToXYYColorTransform</class>
    <class kind="class">IECore::YUVImageWriter</class>
    <class kind="class">IECore::ZhuBridsonImplicitSurfaceFunction</class>
    <class kind="class">IECore::Formatter</class>
    <class kind="class">IECore::WrappedTextFormatter</class>
    <class kind="class">IECore::ClassLoader</class>
    <class kind="class">IECore::OptionalCompoundParameter</class>
    <class kind="class">IECore::FileExaminer</class>
    <class kind="class">IECore::NukeFileExaminer</class>
    <class kind="class">IECore::RIBFileExaminer</class>
    <class kind="class">IECore::Struct</class>
    <class kind="class">IECore::MenuItemDefinition</class>
    <class kind="class">IECore::MenuDefinition</class>
    <class kind="class">IECore::ParameterParser</class>
    <class kind="class">IECore::CapturingMessageHandler</class>
    <class kind="class">IECore::LayeredDict</class>
    <class kind="class">IECore::CompoundVectorParameter</class>
    <class kind="class">IECore::SubstitutedDict</class>
    <class kind="class">IECore::VisualiserProcedural</class>
    <class kind="class">IECore::ClassParameter</class>
    <class kind="class">IECore::ClassVectorParameter</class>
    <class kind="class">IECore::CompoundStream</class>
    <class kind="class">IECore::IgnoredExceptions</class>
    <class kind="class">IECore::Preset</class>
    <class kind="class">IECore::BasicPreset</class>
    <class kind="class">IECore::RelativePreset</class>
    <member kind="typedef">
      <type>BlobbyImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>BlobbyImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af86bde12b55a7e6553f95c41a062c8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlobbyImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>BlobbyImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3a171c0b5736e3fc599e4d0713cccd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlobbyImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>BlobbyImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad5446def33f23f32a4d0a678f1d117e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlobbyImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>BlobbyImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4607dcf513bd71402f7499da27bb1834</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; std::vector&lt; Imath::Box2f &gt;::const_iterator &gt;</type>
      <name>Box2fTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acdc9700ba9d09a53faeff587e5d33510</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; std::vector&lt; Imath::Box2d &gt;::const_iterator &gt;</type>
      <name>Box2dTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac314bf64e738ef7cec3fbf7092389982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; std::vector&lt; Imath::Box3f &gt;::const_iterator &gt;</type>
      <name>Box3fTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7f9b1c8a65c3a73379662c4ff6125a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; std::vector&lt; Imath::Box3d &gt;::const_iterator &gt;</type>
      <name>Box3dTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac8f9e6162d8ac5db5847cd90310fd548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>CachedImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4cff4abcac87b5812734075a17742127</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>CachedImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab88ec928ee6ea05f59b012ce57ccf818</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>CachedImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a43b7773a9b15aad53bf91ca71f724bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CachedImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>CachedImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a067d814d0e233e3eac9ce7f5423f84ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; InternedString, DataPtr &gt;</type>
      <name>CompoundDataMap</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab8801f59558a8c67f526d7c9d730cdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; CompoundDataMap &gt;</type>
      <name>CompoundDataBase</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9570b2de8895a26379c1f31614492b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSGImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>CSGImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a25966a1e01ba15883b0b7f6930823515</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSGImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>CSGImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6527bafccf028afc882441050683535d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSGImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>CSGImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a721b181684d5560a0cec45f07d20d1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSGImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>CSGImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad8a6263c181aca578b68ad34c54840f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubeColorLookup&lt; float &gt;</type>
      <name>CubeColorLookupf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0a130de12119013ad79edd8673af49cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubeColorLookup&lt; double &gt;</type>
      <name>CubeColorLookupd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adf1e72dd9a99d597263a6f24e4fbf42a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; CubeColorLookupf &gt;</type>
      <name>CubeColorLookupfData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4bee1442c0cf872cc8e4b99b03d3e256</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; CubeColorLookupd &gt;</type>
      <name>CubeColorLookupdData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a986f593522a00cb6b1667b5984dfe66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; CubeColorLookupf &gt;</type>
      <name>CubeColorLookupfParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad64ad5af5b04abb679f169a721ad601f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; CubeColorLookupd &gt;</type>
      <name>CubeColorLookupdParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0dd032d310de9c87d61c1b2672f58ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBasis&lt; float &gt;</type>
      <name>CubicBasisf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14edce11fddb143025e3933f8c43ccff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBasis&lt; double &gt;</type>
      <name>CubicBasisd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1a795bb617da015faa7cf5983464281f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; boost::posix_time::ptime &gt;</type>
      <name>DateTimeData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9dc575ea62e812d8046353da0442d5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; boost::posix_time::ptime &gt;</type>
      <name>DateTimeParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a22e2597ca03985d1faba41d3a99821b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; Imath::V3f, Imath::V2f &gt;</type>
      <name>EuclideanToSphericalTransform3f2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4ed43dd411a043898c84c570768ee9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; Imath::V3f, Imath::V3f &gt;</type>
      <name>EuclideanToSphericalTransform3f3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afbe9c7172e0f17942551bdbe0c44c6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; Imath::V3d, Imath::V2d &gt;</type>
      <name>EuclideanToSphericalTransform3d2d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7d2eac4b24baca9eb013384ec24ad11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; Imath::V3d, Imath::V3d &gt;</type>
      <name>EuclideanToSphericalTransform3d3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ada06afd55a40c9e8eee846f862aa59ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImathRandAdapter&lt; Imath::Rand32 &gt;</type>
      <name>ImathRand32Adapter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99815bd7449f142bd37ceac5188ca3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImathRandAdapter&lt; Imath::Rand48 &gt;</type>
      <name>ImathRand48Adapter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a42e4f7a0ec9e8181063d45bceae453c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>ImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a02e90941bf66968f63455ef404d570f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>ImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3789cc4c0f06078bb0a85f00baae1be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>ImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4151df328c746e08b7e9ba31393d8032</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>ImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a27587cbdce7adebc4350d81d902506c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interned&lt; std::string &gt;</type>
      <name>InternedString</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0464fb020f30d07ca58d9f3f573666a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V2f &gt;::const_iterator, std::vector&lt; float &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV2ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa924a6e7111f4fff7821c10167031850</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V2d &gt;::const_iterator, std::vector&lt; double &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV2dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a253a77d5ed931ef2dc22a3eec7d0c54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V3f &gt;::const_iterator, std::vector&lt; float &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adfe8331819973dc06e561c3ad62aa376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V3d &gt;::const_iterator, std::vector&lt; double &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abff16ca0a2877029f24e7aded15773f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V2f &gt;::const_iterator, std::vector&lt; Imath::V2f &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV2fV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae46e0328df75a009841dc378ce370f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V2d &gt;::const_iterator, std::vector&lt; Imath::V2d &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV2dV2d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac340aa6db5d4fdcf19e607be80e24a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V3f &gt;::const_iterator, std::vector&lt; Imath::V3f &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV3fV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a578d07ee9009cfa379568ccd7784b4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseDistanceWeightedInterpolation&lt; std::vector&lt; Imath::V3d &gt;::const_iterator, std::vector&lt; Imath::V3d &gt;::const_iterator &gt;</type>
      <name>InverseDistanceWeightedInterpolationV3dV3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad3009dc7659f9e009e90ada17666dc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; std::vector&lt; Imath::V2f &gt;::const_iterator &gt;</type>
      <name>V2fTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a98212ce90efbcf76005ca88c3fee0980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; std::vector&lt; Imath::V2d &gt;::const_iterator &gt;</type>
      <name>V2dTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6aa1846746ccf390bee4958e3d99fa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; std::vector&lt; Imath::V3f &gt;::const_iterator &gt;</type>
      <name>V3fTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a22216376fe24d1dd4f62cd63d38fc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; std::vector&lt; Imath::V3d &gt;::const_iterator &gt;</type>
      <name>V3dTree</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3657b283cf31d294203d2f9f668e7441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LineSegment&lt; Imath::V3f &gt;</type>
      <name>LineSegment3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aac4f87db0db2e29e3ea247fc6ef56796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LineSegment&lt; Imath::V3d &gt;</type>
      <name>LineSegment3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adae7a7e008b88a4dd61ae56b3b41a734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LineSegment&lt; Imath::V2f &gt;</type>
      <name>LineSegment2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6b4d01a3569ebd48f254961596f6c5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LineSegment&lt; Imath::V2d &gt;</type>
      <name>LineSegment2d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae80a0ab315599bbd7947620be576bdb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Lookup&lt; float, float &gt;</type>
      <name>Lookupff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3920b9e7a95745081772bc926808ba46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Lookup&lt; double, double &gt;</type>
      <name>Lookupdd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab012902de0f62b0a2df1458423b64539</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Lookup&lt; float, Imath::Color3f &gt;</type>
      <name>LookupfColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7006c6c10c622e3edc0bc346d2820321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Lookup&lt; float, Imath::Color4f &gt;</type>
      <name>LookupfColor4f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aae59c5b141e4fb719fee6e22da664763</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MarschnerBCSDF&lt; Imath::Color3f &gt;</type>
      <name>MarschnerBCSDFC3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99a895bde697a446e6228fca87857d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MessageHandler</type>
      <name>Msg</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a58c953ed45258381094e1b996004a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericParameter&lt; int &gt;</type>
      <name>IntParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aebcf3b7f77fabef7a93a9ac6743921c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericParameter&lt; float &gt;</type>
      <name>FloatParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a69bde0725203b0e6183631f68256db60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericParameter&lt; double &gt;</type>
      <name>DoubleParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a70fb4853f08f94d1810fe1e69a85bed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V3f, float, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab72c541c1050ef215e6ae35c2d38e14d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V2f, float, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV2ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a60fdf2311ea7be337c7b84c8b2478714</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; float, float, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2e81d43bf7758230039f6321dd50e49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V3f, Imath::V2f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV3fV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acd3dde4830f74e5bd6405203b2dbd067</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V2f, Imath::V2f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV2fV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acf5671ae183d232ed28fd6502e401167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; float, Imath::V2f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoisefV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b1646a1f73745e3490cd8f73368fd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V3f, Imath::V3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV3fV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac4e8fe79aa1c6671ae75470bbb8491e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V2f, Imath::V3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV2fV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7774aac44e935c35535b150bba71b081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; float, Imath::V3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoisefV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5b7f5cc681c5d77a321cc7d621b1c565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V3f, Imath::Color3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV3fColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af1dc6a87d3fd43e7bd146fa1d2151e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; Imath::V2f, Imath::Color3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoiseV2fColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aff19381ea5c8e1ee3315df61efe04af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PerlinNoise&lt; float, Imath::Color3f, SmootherStepFalloff&lt; float &gt; &gt;</type>
      <name>PerlinNoisefColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab911bc88d2a42f245a206ca6973d8ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlaneImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>PlaneImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a49632ad06eefebe948f3f7550b926381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlaneImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>PlaneImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae887b827469cd0d673bbaccf97d2177b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlaneImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>PlaneImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a02dbcbe1a302bec15bfe1085e6f6a9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PlaneImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>PlaneImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a33983c2ca6e8f5ad36c683b040918416</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, PrimitiveVariable &gt;</type>
      <name>PrimitiveVariableMap</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8831a05758aad0cc4f1968f74afdffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; bool &gt;</type>
      <name>BoolData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa595d1e01aea0d9aff1b97d7667c0d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; float &gt;</type>
      <name>FloatData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a88cc8f071c7f947e95944024495f7a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; double &gt;</type>
      <name>DoubleData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a08c0000ab2ebc45ca8129b8aa4cfa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; int &gt;</type>
      <name>IntData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a59096aa3d40d24e084b8726be1e4635f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; unsigned int &gt;</type>
      <name>UIntData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8f464fd6f16597759ee920bfd0c97afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; char &gt;</type>
      <name>CharData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adaa7772d3f3b30a3a2f6679ee8e3f0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; unsigned char &gt;</type>
      <name>UCharData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a86e55d229f61764b86635efaea864f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; short &gt;</type>
      <name>ShortData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aca3f8a4defcd9c8481a8cc8ad6944eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; unsigned short &gt;</type>
      <name>UShortData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3186c42b1d4523ab03131aaa5fb81011</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; int64_t &gt;</type>
      <name>Int64Data</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab2d053931ad6c5dde5da6d360cda7509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; uint64_t &gt;</type>
      <name>UInt64Data</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aac0103c62449398528b97da2fa5d19c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::string &gt;</type>
      <name>StringData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3cbf568fa621b257890953ea9d6d4636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; half &gt;</type>
      <name>HalfData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af0a71be391b10065848e3389b82e1545</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V2i &gt;</type>
      <name>V2iData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3e399b3977143ab56901bdfc330ca3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V3i &gt;</type>
      <name>V3iData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a04d5094a04ea7e86b79987ca4ebca49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V2f &gt;</type>
      <name>V2fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a25ae7e0063b97f713db3a48838963454</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V3f &gt;</type>
      <name>V3fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac49b2de43834def97a05f3895e48142e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V2d &gt;</type>
      <name>V2dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a64af3b497494ee980706479f32f0fea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::V3d &gt;</type>
      <name>V3dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6972fe90af73a05c48c0836f0da444c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Color3f &gt;</type>
      <name>Color3fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a33eb7565b01830ad1a9ad5118ea2fa23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Color4f &gt;</type>
      <name>Color4fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa7d3fc01d1d541e0a776ad65f37ed964</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Color3&lt; double &gt; &gt;</type>
      <name>Color3dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab11441439fb8c5b6373f28946b788619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Color4&lt; double &gt; &gt;</type>
      <name>Color4dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2e18b46762b4450b256bdc9334a7951e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box2i &gt;</type>
      <name>Box2iData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0f1a399242533079a6f581ca699dfc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box3i &gt;</type>
      <name>Box3iData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a60e3a76806854c7f28f65db4a15f7394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box2f &gt;</type>
      <name>Box2fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac6d84223f47757ec7a19c28aba7d593c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box3f &gt;</type>
      <name>Box3fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae9eeafe2a03fe0c6f7ae5836a361beac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box2d &gt;</type>
      <name>Box2dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a072dd9f2427361c7683dae9cfe371a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Box3d &gt;</type>
      <name>Box3dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4f4995bcb1b1efe18d1ee8fd40cb6a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::M33f &gt;</type>
      <name>M33fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a263dc9772456e25cb8b245d528b53bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::M33d &gt;</type>
      <name>M33dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae988ba331be6a6b2270d36be9e14f10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::M44f &gt;</type>
      <name>M44fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acc816b18adb3b620a316dafe33d71978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::M44d &gt;</type>
      <name>M44dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a004d430943ef800c283f5a8b11fec8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Quatf &gt;</type>
      <name>QuatfData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad6ac38dc0a4025389edcbaabb6db1dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Imath::Quatd &gt;</type>
      <name>QuatdData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a10c8f4596f8de2f35f4a1cd7823fb6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; LineSegment3f &gt;</type>
      <name>LineSegment3fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab5167d13e6db6598757d4ff9f6f05488</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; LineSegment3d &gt;</type>
      <name>LineSegment3dData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a86f8b9c9ced1902f7a97530f73a3e2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; bool &gt;</type>
      <name>BoolParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9fc3090f5678f5bea196ef46523b4283</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::string &gt;</type>
      <name>StringParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af3b26b8cd5009c201a5f4fbff1af6ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V2i &gt;</type>
      <name>V2iParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab28229270de7697d44c1de420d0ae657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V3i &gt;</type>
      <name>V3iParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a68c609c51725baf94532d6e1c8dad35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V2f &gt;</type>
      <name>V2fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a521dc1e72683248c13d9f1bec0459f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V3f &gt;</type>
      <name>V3fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a83fb7562966abe5b28daf2b8f69244c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V2d &gt;</type>
      <name>V2dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaa642520b25ea2302a76094c65bc0547</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::V3d &gt;</type>
      <name>V3dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5e225d59638a04ab98c792100a043521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Color3f &gt;</type>
      <name>Color3fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a98dc1a2755dcbe2909b8270fca35fb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Color4f &gt;</type>
      <name>Color4fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a912acf0e35159233e5b1656b3684daac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box2i &gt;</type>
      <name>Box2iParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2300d20bf6653ef3e58bc9058ce1fab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box3i &gt;</type>
      <name>Box3iParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4742baf408e8d2e7860bbcee47cafe4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box2f &gt;</type>
      <name>Box2fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a511ed5906f8baf72947fed121c2f9470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box3f &gt;</type>
      <name>Box3fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acb74988476c1735e495b526cb637f3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box2d &gt;</type>
      <name>Box2dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af6dabbd1df42085968aa1f11bbaaf99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::Box3d &gt;</type>
      <name>Box3dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6ec2b6fbb842f26019fac7595349bc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::M44f &gt;</type>
      <name>M44fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a960c6afc916ebd3a0302434af391f711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Imath::M44d &gt;</type>
      <name>M44dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a85e433f0c0348f42bdc3fbd1355b6692</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; TransformationMatrixf &gt;</type>
      <name>TransformationMatrixfParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8c2108191007c1e5ae0c9ba34be5f4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; TransformationMatrixd &gt;</type>
      <name>TransformationMatrixdParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a60849d6fb99868ec6fcb7e74247fdbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; LineSegment3f &gt;</type>
      <name>LineSegment3fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1accf30b5c9d195777eddbe835fe314f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; LineSegment3d &gt;</type>
      <name>LineSegment3dParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abb0f52687ed85d8b83bd230743dd33ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>SphereImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a634833570da282f2a751177b893fa3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>SphereImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3eaa762d35293fa88f1940d7c57ef0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>SphereImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3548c9edf99445c7f24d0f15a6b37df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>SphereImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a93b6b7045a74c1f17b46a55fad1ee229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonics&lt; float &gt;</type>
      <name>SHf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af4a4e85367d44ff0ed7358a39470fea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonics&lt; double &gt;</type>
      <name>SHd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6b6a6c93d556c4da6ca25f1dd0ae48c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonics&lt; Imath::V3f &gt;</type>
      <name>SHV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afdcaa090d16fd0121eed80bc0233e73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonics&lt; Imath::V3d &gt;</type>
      <name>SHV3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abbb6885a4cefe04cfbc4a4992e3c4b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonics&lt; Imath::Color3f &gt;</type>
      <name>SHColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abcd676c316f036c7a3c88ec91285c7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsProjector&lt; float &gt;</type>
      <name>SHProjectorf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a05b025d35a9360ae328e8640a01950ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsProjector&lt; double &gt;</type>
      <name>SHProjectord</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a327e932868cd912d57d58b27751047ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsRotationMatrix&lt; float &gt;</type>
      <name>SHRotationf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab4817d04759b75ad8548018b57f8dcc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsRotationMatrix&lt; double &gt;</type>
      <name>SHRotationd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a27b787053e3fbf7ea01b465379ad0f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsTransferMatrix&lt; double &gt;</type>
      <name>SHTransferMatrixd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a93b156b9c40692810f85b7585bc35af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalHarmonicsTransferMatrix&lt; float &gt;</type>
      <name>SHTransferMatrixf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9899dd9ed024b1051dccbbdc4bce6c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalToEuclideanTransform&lt; Imath::V2f, Imath::V3f &gt;</type>
      <name>SphericalToEuclideanTransform2f3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4bec756b0810b5ac7c73a1192fca9527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalToEuclideanTransform&lt; Imath::V3f, Imath::V3f &gt;</type>
      <name>SphericalToEuclideanTransform3f3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a57128af9953eda0de1ea3a3bcbcb844d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalToEuclideanTransform&lt; Imath::V2d, Imath::V3d &gt;</type>
      <name>SphericalToEuclideanTransform2d3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a78014eb0cc43053afbc1169d3cbfc441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalToEuclideanTransform&lt; Imath::V3d, Imath::V3d &gt;</type>
      <name>SphericalToEuclideanTransform3d3d</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae9b764432dc2cdfa21c13132db68b037</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; float, float &gt;</type>
      <name>Splineff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab68456e3750640f66f23b00b04e12ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; double, double &gt;</type>
      <name>Splinedd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5b9fc55a9661b591e38a6acda94e0580</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; float, Imath::Color3f &gt;</type>
      <name>SplinefColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae10cfc2434557dff5eb29fccd670eb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; float, Imath::Color4f &gt;</type>
      <name>SplinefColor4f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5030cf76042c5c8e6c14b4781c04f992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Splineff &gt;</type>
      <name>SplineffData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2be8e3244b6a1dbee60a376c80869181</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; Splinedd &gt;</type>
      <name>SplineddData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adee256689990a9718287972157baa2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; SplinefColor3f &gt;</type>
      <name>SplinefColor3fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a771b9fa278726d9a6e16cbb6ecd6aa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; SplinefColor4f &gt;</type>
      <name>SplinefColor4fData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab1ba3bda1cae81a151fb67e0c2b9d5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Splineff &gt;</type>
      <name>SplineffParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab0cfc24441e23eb1b1693ec039cf05ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; Splinedd &gt;</type>
      <name>SplineddParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aee8992653474b0ccef753d9cce54582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; SplinefColor3f &gt;</type>
      <name>SplinefColor3fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0d74924f4b1abd6aa162e658f3d9e854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; SplinefColor4f &gt;</type>
      <name>SplinefColor4fParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7776b20a96415dc7759b315992a6748c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; boost::posix_time::time_duration &gt;</type>
      <name>TimeDurationData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3f4cc3a2349157992bc5e16863b81603</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; boost::posix_time::time_duration &gt;</type>
      <name>TimeDurationParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a619758d33ae1f3cc2fa5956880935e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; TimePeriod &gt;</type>
      <name>TimePeriodData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac9fd272e002493e1dd8cc68198ab6df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; TimePeriod &gt;</type>
      <name>TimePeriodParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a86e93e204812bdf282e7a0f351b92f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransformationMatrix&lt; double &gt;</type>
      <name>TransformationMatrixd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4589c8c5a4bb82ff835b93f95179dee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransformationMatrix&lt; float &gt;</type>
      <name>TransformationMatrixf</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a94dc403c96ba2967e1bf70b13683d8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; TransformationMatrixf &gt;</type>
      <name>TransformationMatrixfData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a521cd3fae228bf7ed9b20717af672918</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; TransformationMatrixd &gt;</type>
      <name>TransformationMatrixdData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a444679e219bb2fa37f37c0a8a96e4544</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Triangulator&lt; std::vector&lt; Imath::V2f &gt;::const_iterator &gt;</type>
      <name>V2fTriangulator</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1cea8447a8e7f09103b79500a80c2976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Triangulator&lt; std::vector&lt; Imath::V3f &gt;::const_iterator &gt;</type>
      <name>V3fTriangulator</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aedc86a3e98a39760c7b3a700847dd943</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Triangulator&lt; std::vector&lt; Imath::V2d &gt;::const_iterator &gt;</type>
      <name>V2dTriangulator</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa130a53f2ed8d9f8a1deac67b39f746f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Triangulator&lt; std::vector&lt; Imath::V3d &gt;::const_iterator &gt;</type>
      <name>V3dTriangulator</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac5ddca8a6f4f61529dc2eb2e18d48e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV3ff &gt;</type>
      <name>TurbulenceV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a90639ddc2d0d827dbc2ca3f6743291da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV2ff &gt;</type>
      <name>TurbulenceV2ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1b5dee9820f820fe89e70015d635c249</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseff &gt;</type>
      <name>Turbulenceff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa708f641378db76731a2ed8010e13a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV3fV2f &gt;</type>
      <name>TurbulenceV3fV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a889035a34786bdfb0a3b25942d7b7d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV2fV2f &gt;</type>
      <name>TurbulenceV2fV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abaf7ca1f23c7479b3371dca796016472</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoisefV2f &gt;</type>
      <name>TurbulencefV2f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2490ff1ea472ed9fdd401c2abe8e44a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV3fV3f &gt;</type>
      <name>TurbulenceV3fV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a84bcf31ad16496f70ee1287d7dd6e739</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV2fV3f &gt;</type>
      <name>TurbulenceV2fV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8af39296c3ecd79f4610d331848bf224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoisefV3f &gt;</type>
      <name>TurbulencefV3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6add9ad8affeb1ea8331126b6261c0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV3fColor3f &gt;</type>
      <name>TurbulenceV3fColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af1b1222af0e1aef52f073eb5ef8fdc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoiseV2fColor3f &gt;</type>
      <name>TurbulenceV2fColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2171314a6dda290cb3b7a997cec2e1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Turbulence&lt; PerlinNoisefColor3f &gt;</type>
      <name>TurbulencefColor3f</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae8b21ea066231097718ca79e3d05739d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; Renderable &gt;</type>
      <name>RenderableParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a42e0159cbb4dc91f55600f0750d67e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; StateRenderable &gt;</type>
      <name>StateRenderableParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a266ab8c459cce8dd4b408676d11ddec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; AttributeState &gt;</type>
      <name>AttributeStateParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2e42e2798f956dc88e22b69b14deb709</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; Shader &gt;</type>
      <name>ShaderParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a55e50b9f19378a0ad525bac5bcecdc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; Transform &gt;</type>
      <name>TransformParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adb0375ac3d15aae9338427b998590d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; MatrixMotionTransform &gt;</type>
      <name>MatrixMotionTransformParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a67e990878a88f5e1f1a154676c368cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; MatrixTransform &gt;</type>
      <name>MatrixTransformParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6b56524b2f0c7a3af4944ea0e35ac87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; VisibleRenderable &gt;</type>
      <name>VisibleRenderableParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acca3786f2df1527a934890b9372e1e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; Group &gt;</type>
      <name>GroupParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acb2f942556cfa4e4d12b366857ffe374</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; CompoundObject &gt;</type>
      <name>CompoundObjectParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aabfc309af742bde3d33dd6316c1dcc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; ObjectVector &gt;</type>
      <name>ObjectVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0133e982cf1c03f9d762c56c804a2ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; SmoothSkinningData &gt;</type>
      <name>SmoothSkinningDataParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a42a0e9d9b1aadee93ee08247888e0454</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; ImagePrimitive &gt;</type>
      <name>ImagePrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38c46169a4a20641023f5dfaac58e056</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; MotionPrimitive &gt;</type>
      <name>MotionPrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afa3333a29af312f154d646788fa6531c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; Primitive &gt;</type>
      <name>PrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a16ef246b18751a688f9cc95438cb7fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; MeshPrimitive &gt;</type>
      <name>MeshPrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a141d64399a0f930bf479658016d55b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; CurvesPrimitive &gt;</type>
      <name>CurvesPrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1f6b3bda0cc80323089b178014d39cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedObjectParameter&lt; PointsPrimitive &gt;</type>
      <name>PointsPrimitiveParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a67f008382d408e3a0abd7e647ab4dcf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; bool &gt; &gt;</type>
      <name>BoolVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acf5e8337925591f01213253bf3e29a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; half &gt; &gt;</type>
      <name>HalfVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a866f84305bc3aaca534f66220b61944b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; float &gt; &gt;</type>
      <name>FloatVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae343d48f376e878c419d71f78ab84b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; double &gt; &gt;</type>
      <name>DoubleVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2b76d5f7cc20e1b49c1077d3b2dbd526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; int &gt; &gt;</type>
      <name>IntVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abf3f7af852c6ec9caef012faeee5a949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; unsigned int &gt; &gt;</type>
      <name>UIntVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0f60298d560b76a30e3f354613f79cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; char &gt; &gt;</type>
      <name>CharVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6d28642cf93fc28f0bf18f252e103ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; unsigned char &gt; &gt;</type>
      <name>UCharVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a600336962da323798b3641e10c16f982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; short &gt; &gt;</type>
      <name>ShortVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0d8b9e211719b5bdf491a6a477687968</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; unsigned short &gt; &gt;</type>
      <name>UShortVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6a11c5ed4c1a50c7e89a07d3dcdd7957</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; int64_t &gt; &gt;</type>
      <name>Int64VectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a661c53eecd453814abed605d42837b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; uint64_t &gt; &gt;</type>
      <name>UInt64VectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34cc2da04ee6279edc7a6bcbea10baf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>StringVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14f0a80d411ecc025649df4cd843f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V2f &gt; &gt;</type>
      <name>V2fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a561a72e470dd8d60632e862dfdf137aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V2d &gt; &gt;</type>
      <name>V2dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a051e4bf5a52934ff36be7c3e1b3dfa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V2i &gt; &gt;</type>
      <name>V2iVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adeb49d3011c696cf6f56440aaac5fab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V3f &gt; &gt;</type>
      <name>V3fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4601895e5879c584c9631b9b752a0aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V3d &gt; &gt;</type>
      <name>V3dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace6a13e0a09cb9881d4cbe596a839aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::V3i &gt; &gt;</type>
      <name>V3iVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2fadc7b3cafa34fb02c2ad94182f50d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box2i &gt; &gt;</type>
      <name>Box2iVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3077ec8a765113e840e2bf0627f7708a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box2f &gt; &gt;</type>
      <name>Box2fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5eab19ffbd185bac6cc8a667401177ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box2d &gt; &gt;</type>
      <name>Box2dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a110f7b679024ecd50d70654a3de64265</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box3i &gt; &gt;</type>
      <name>Box3iVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a699ea698b26d2d8689ebb59acf37b169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box3f &gt; &gt;</type>
      <name>Box3fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5842ea462c240ccb1c0aaa55d8fd3d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Box3d &gt; &gt;</type>
      <name>Box3dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0f88f4351432e8119df1e926700254df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::M33f &gt; &gt;</type>
      <name>M33fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad9177ac78070976bbac410c8ccdd5cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::M33d &gt; &gt;</type>
      <name>M33dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac4761691deebe941624dd300d9c6c727</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::M44f &gt; &gt;</type>
      <name>M44fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab76c182a7892aa045c7774d87ee9bfa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::M44d &gt; &gt;</type>
      <name>M44dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afa0259755e4cfb35225b2a05d0e1cf93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Quatf &gt; &gt;</type>
      <name>QuatfVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaf60de28bdc8eca01cf485fa70967bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Quatd &gt; &gt;</type>
      <name>QuatdVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa1ad2b151c85ae0c6df0eaa4368f6ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Color3f &gt; &gt;</type>
      <name>Color3fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3dd3c72539e17b049365e1fcd7f26d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Color4f &gt; &gt;</type>
      <name>Color4fVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af78404bd86c0f1e4aa4dfcfab3111fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Color3&lt; double &gt; &gt; &gt;</type>
      <name>Color3dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a04c6c8d1b99a5df7226fa1adf8b8ea5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; std::vector&lt; Imath::Color4&lt; double &gt; &gt; &gt;</type>
      <name>Color4dVectorData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aff2215ccfb7bcbcb9cf26aef00c0cfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; bool &gt; &gt;</type>
      <name>BoolVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae9cd2aa6ea176be61b35e31148d63e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; int &gt; &gt;</type>
      <name>IntVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38d8150e08eab898de3d4142946c9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; float &gt; &gt;</type>
      <name>FloatVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aded56379b0c0c8cb13933c6d82a9e658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; double &gt; &gt;</type>
      <name>DoubleVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac202031659701eef622c10c988257b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>StringVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a05fd8d777668a47dc24c17c5b4e11673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::V2f &gt; &gt;</type>
      <name>V2fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aae12e27fb96069db3ee136f05586d699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::V3f &gt; &gt;</type>
      <name>V3fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae4036799e196e388935aef9b8a630e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::V2d &gt; &gt;</type>
      <name>V2dVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aee448fc0b5cad0f63ddba9f80f1c3ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::V3d &gt; &gt;</type>
      <name>V3dVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ada7cf6bda13edb28f2517118126f31d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Box3f &gt; &gt;</type>
      <name>Box3fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae2ae4bbee8c52934d61f14e0e3b53cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Box3d &gt; &gt;</type>
      <name>Box3dVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a40121d18fbb8b9e5f61be3d4bf76f80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::M33f &gt; &gt;</type>
      <name>M33fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a198ef1348f00b3a91837ac5cc98cd6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::M44f &gt; &gt;</type>
      <name>M44fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a016f1f0cd379a730883519519de3079d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::M33d &gt; &gt;</type>
      <name>M33dVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aab2d8663078bbd63ebc9efca09cf08bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::M44d &gt; &gt;</type>
      <name>M44dVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aab40aa0f584e16756c7381e5ca947373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Quatf &gt; &gt;</type>
      <name>QuatfVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace3426f1e43874b15f00d4d57a68143f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Quatd &gt; &gt;</type>
      <name>QuatdVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3f642d57d4cd32f565d553bb9dbcd1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Color3f &gt; &gt;</type>
      <name>Color3fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2f10cd91869d51c6bd860f0e22226cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedParameter&lt; std::vector&lt; Imath::Color4f &gt; &gt;</type>
      <name>Color4fVectorParameter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a74b24859d7e883600bcf81caa4c298d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZhuBridsonImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</type>
      <name>ZhuBridsonImplicitSurfaceFunctionV3ff</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5c4a65fdf11f4bdf24e50688fa25a5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZhuBridsonImplicitSurfaceFunction&lt; Imath::V3f, double &gt;</type>
      <name>ZhuBridsonImplicitSurfaceFunctionV3fd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2f38807725de4aa4df2fc84d05bc02d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZhuBridsonImplicitSurfaceFunction&lt; Imath::V3d, float &gt;</type>
      <name>ZhuBridsonImplicitSurfaceFunctionV3df</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3fcf4c2562e5cc50383761d1920a3073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ZhuBridsonImplicitSurfaceFunction&lt; Imath::V3d, double &gt;</type>
      <name>ZhuBridsonImplicitSurfaceFunctionV3dd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a458e864a29111e90ba6a75b8314dd01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Winding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af7b6a1ae33dbc2a88ce32dfe2f5e17c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TypeId</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af294ec67f3b39230d75efef3844cf448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIntDataTypeId</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af294ec67f3b39230d75efef3844cf448af8d56791e4cfd7acea579f043a6294c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CompoundDataTypeId</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af294ec67f3b39230d75efef3844cf448a6ebf5bf5e1dd1a5fb62c2a4e65ececf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abe3f77b9a9268fe70d144325cdd724bc</anchor>
      <arglist>(AddSmoothSkinningInfluencesOp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>degreesToRadians</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1b4de96ee578936003713f30d569509f</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>radiansToDegrees</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa536c6b52592c93212eaf3fd6ff05213</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af5eb3a09f2507eb9b4d63343dd2acedc</anchor>
      <arglist>(CompoundObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aee75ee80bc08d96b06b033dcfd407899</anchor>
      <arglist>(AttributeCache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad1a49fb5a331facde8b316601fa02e97</anchor>
      <arglist>(AttributeState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierSubdivide</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7c39dd45fb2be5d59837e6143821e91f</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, typename Vec::BaseType tolerance, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierSubdivide</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acb2bd3abec255cea10d7544b93304680</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, typename Vec::BaseType tolerance, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad9972fd25d63af15008150312eddd4c5</anchor>
      <arglist>(BGEOParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1c2dd648c908bffc19c694adfc94d442</anchor>
      <arglist>(BinaryFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a87602670a38762b491dc1883bf30c19f</anchor>
      <arglist>(MeshPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afdc66ac7627b834b6cff41595ac80daf</anchor>
      <arglist>(BINMeshReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9cede48aa3e81f4b576a1e225e8d72c7</anchor>
      <arglist>(BINParticleWriter)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab035b5a6a69af7fe2f670f0b1fdec537</anchor>
      <arglist>(std::ostream &amp;os, const Imath::Box&lt; T &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Vec2&lt; T &gt;</type>
      <name>closestPointInBox</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b1996f69636095d67f59e928ceae50d</anchor>
      <arglist>(const Imath::Vec2&lt; T &gt; &amp;p, const Imath::Box&lt; Imath::Vec2&lt; T &gt; &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>BoxTraits&lt; T &gt;::BaseType</type>
      <name>boxSize</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7763cfcad2d0ef8682c50be59a064000</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>BoxTraits&lt; T &gt;::BaseType</type>
      <name>boxCenter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afae734f76ad479c5f5723adef2976ef7</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxExtend</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a68c54a45d0ff61dedb8de9651101168c</anchor>
      <arglist>(T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxExtend</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a39d58550a043ba17840b1710b630d9d0</anchor>
      <arglist>(T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>boxIntersection</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa17f1a420d60f1dd9a3d27fe362d81a4</anchor>
      <arglist>(const T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a625eecbec2fa37a2e78a446c67c7ff2f</anchor>
      <arglist>(const T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa6d895a80c72abf1d8f7fe7bc224d258</anchor>
      <arglist>(const T &amp;box, const T &amp;box2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxContains</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1a8863af5add2529a94a761b9b357852</anchor>
      <arglist>(const T &amp;box, const T &amp;containee)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxIntersects</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab40f42c2ea0a2619754688b1c4f4845b</anchor>
      <arglist>(const T &amp;box, const typename BoxTraits&lt; T &gt;::BaseType &amp;origin, const typename BoxTraits&lt; T &gt;::BaseType &amp;direction, typename BoxTraits&lt; T &gt;::BaseType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxSplit</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1d9f52aeeeee83e91604b0f8d0220845</anchor>
      <arglist>(const T &amp;box, T &amp;low, T &amp;high, int axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boxSplit</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2f24a5a06a24e098c2c4bf2db673089a</anchor>
      <arglist>(const T &amp;box, T &amp;low, T &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxMajorAxis</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace610f0f61893bcc44cb09012387e59b</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>littleEndian</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2d27ebf497225511f84b01197c69902d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bigEndian</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaabb31a910a554c7dd258a1a2e4787ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverseBytes</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1bfb8ed7ec86d6282194e40fbf40aaac</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>reverseBytes&lt; char &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a90992efbc5b22913df3148a65fba35fe</anchor>
      <arglist>(const char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>reverseBytes&lt; unsigned char &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5f53917c635ca12b3ea6c32f0b1441e8</anchor>
      <arglist>(const unsigned char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>reverseBytes&lt; int16_t &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3c5b65ca072051c876c097ffcd461500</anchor>
      <arglist>(const int16_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>reverseBytes&lt; uint16_t &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a781c6828357c39a4ff834b17e5b39f9b</anchor>
      <arglist>(const uint16_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>reverseBytes&lt; int32_t &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a917f29edadf885aa27e5e129ee667cb9</anchor>
      <arglist>(const int32_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>reverseBytes&lt; uint32_t &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6c6b4b2aa2665cd295dbe8fdb23b807c</anchor>
      <arglist>(const uint32_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>reverseBytes&lt; float &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac7e4819cf3b1955003f25cf8afd6defd</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Imf::Int64</type>
      <name>reverseBytes&lt; Imf::Int64 &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa524069e153448277ed6398c721d8f89</anchor>
      <arglist>(const Imf::Int64 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>reverseBytes&lt; double &gt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a011f26d2950a823577ee681aa3c3b703</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asLittleEndian</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8412510fc0fb771fa7ae20f590a345fe</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asBigEndian</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a74a456f3c96ca630c9ca78df1985b98b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5a7a505c15445fff7110d5ed4b134b4f</anchor>
      <arglist>(CachedReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0216847f3b44499201b68a297c637d26</anchor>
      <arglist>(ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad5a3b39799bd60cd96673e96297d8121</anchor>
      <arglist>(Object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2d2c26db0b07b783fff6bbb0bba602fb</anchor>
      <arglist>(Camera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a15142233bf45c0c01df62de410ebc1fd</anchor>
      <arglist>(ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9b9dd9aaa5e3fa6d4fd0d64476d7a8d8</anchor>
      <arglist>(CineonToLinearOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a28eb4f5c3e8a8e5c1d62ecc5c542152f</anchor>
      <arglist>(CINImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a07f6a62d85a5986fdf556ad2dd58976e</anchor>
      <arglist>(CINImageWriter)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseType</type>
      <name>luminance</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9258114d32c3f7bab113046320b4c023</anchor>
      <arglist>(const T &amp;color, const S &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseType</type>
      <name>luminance</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a90ccf12f27cdfa7d6d5eb68499f0a8ad</anchor>
      <arglist>(const T &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>adjustSaturation</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac91275d3741a85448e25565aa12e6705</anchor>
      <arglist>(const T &amp;color, typename T::BaseType saturation)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>linearToSRGB</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac048ba76b3de4c16cf6a8191e95bd927</anchor>
      <arglist>(const T &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sRGBToLinear</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>affad29cb60d88f3af8e1d0f0a24adad5</anchor>
      <arglist>(const T &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a80d0228ad095b1cacdba4babb5afa1b9</anchor>
      <arglist>(ColorSpaceTransformOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0f7d3bddd28b42b503fa94cf1046cce5</anchor>
      <arglist>(ColorTransformOp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeOver</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad4ba1dc817433bddbd9bfbbfcd8bbdab</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMax</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaec4e0025d22d5133da459443796056c</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMin</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1f82a36ec1c91527ec7c42116e1ccb45</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compositeMultiply</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abd15dd37dcc27a345b7c157b2131d4a6</anchor>
      <arglist>(T aVal, T aAlpha, T bVal, T bAlpha)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a92cc71e152c4e7844df5de836f6cdcf8</anchor>
      <arglist>(CompoundData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a49ae6d94b233772b67ef90cc4620145e</anchor>
      <arglist>(CompoundDataBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3d617928321003cf6a79ebe9f6e054c</anchor>
      <arglist>(CompoundFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af8eda177190bdf3c3d2dbd22ce6d6d40</anchor>
      <arglist>(CompoundMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3fb1993b111d779a96966a7519360f5c</anchor>
      <arglist>(CompoundObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a174bffc48ecb478beb434765d4e4100a</anchor>
      <arglist>(CompoundParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af16019dcd849807e5ccf510e4abd5ff1</anchor>
      <arglist>(CompressSmoothSkinningDataOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a49942e38cb40b4918920dcfc27db3a02</anchor>
      <arglist>(ContrastSmoothSkinningWeightsOp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab42e7a32a2f8b9e13a144d67f2fffe56</anchor>
      <arglist>(const F &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3c862e0bc421a4e5c61bb3be8659dab4</anchor>
      <arglist>(Converter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a66a25d6cc5c98f52f2cae80c38865789</anchor>
      <arglist>(CoordinateSystem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2efd3589e752d8ceeec5fbf34cacfe99</anchor>
      <arglist>(CubeColorLookupfParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34536d548d456b579773085498cda57b</anchor>
      <arglist>(CubeColorTransformOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa950b11475c0f0212e0bb2fb09c4f917</anchor>
      <arglist>(CurveExtrudeOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3f94bf5957e31286d979ed64b252334</anchor>
      <arglist>(CurveLineariser)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a61ce0a4a74531a296adc9a95f6cf70b6</anchor>
      <arglist>(CurvesMergeOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3ee7a47a9801d3a727846ee7715d5c90</anchor>
      <arglist>(CurvesPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18720b76badd3ae373baa528191665c2</anchor>
      <arglist>(CurvesPrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0777c46154d260de3d93aa26c2705628</anchor>
      <arglist>(CurveTangentsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6e6e0768e7c43f44eadb3871d96b6b01</anchor>
      <arglist>(CurveTracer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2e6ed8396816920ce716e5c853d21129</anchor>
      <arglist>(Data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3669e02e84ac1dd57e51e4c240c22748</anchor>
      <arglist>(DataCastOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af207b9d146fd5800c8e3e6e8141a28e9</anchor>
      <arglist>(DataConvertOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af3e6d7435295b17a209b94d8dda21db2</anchor>
      <arglist>(DataInterleaveOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4ff58a4cf1a5cdd3d41a5f5d0627a2ad</anchor>
      <arglist>(DataPromoteOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac3fd04711bef530935d27e66f2f6e69a</anchor>
      <arglist>(DecompressSmoothSkinningDataOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34c24a9a34df19b414a32c0259c34a25</anchor>
      <arglist>(FileNameParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3f59bf92c465568e5bb0a7aa2f126c3a</anchor>
      <arglist>(DeepImageConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a36e592f93be1f2291ff1d00264610316</anchor>
      <arglist>(DeepImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a090b74d09a2ff1acbdf613f099510fb7</anchor>
      <arglist>(DeepImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5d87c74f92ea4d782617c6a78ebfd65d</anchor>
      <arglist>(DeepImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad7548adc78defffa453027702339ad7f</anchor>
      <arglist>(DeepPixel)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1d51fa21da2e208390b7c045138bc6c6</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor, ErrorHandler &amp;errorHandler)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaba658e01a7548d3c0ca9da5927666ed</anchor>
      <arglist>(const DataPtr &amp;data, Functor &amp;functor)</arglist>
    </member>
    <member kind="function">
      <type>Functor::ReturnType</type>
      <name>despatchTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab70a70fd78d8ddccf5c4b4bf474bf08b</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>despatchTraitsTest</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac766dd6ab0172b2126a1a093e167500c</anchor>
      <arglist>(const DataPtr &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaffd60892216ac3337475e90e4d91df1</anchor>
      <arglist>(Display)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b0d82826db05769f98e4b20733a9f2e</anchor>
      <arglist>(DisplayDriver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0b5e99b0717d574cdbe2316cdf90fcac</anchor>
      <arglist>(DPXImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab4967a9e2324c55c3504e753a2d98bef</anchor>
      <arglist>(DPXImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a792fbb6546c726a62a9b57b88750c368</anchor>
      <arglist>(EmptyFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5c00670f7e0ed099c2e4eb17db50155a</anchor>
      <arglist>(EnvMapSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab2141f90305aba8f446a02d1264707f7</anchor>
      <arglist>(ObjectParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac147277a899be6f7f1fb1cd4c5629b32</anchor>
      <arglist>(EnvMapSHProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a244bf7216a686322f92e549157abfe50</anchor>
      <arglist>(ExclusionFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae267d81fcb0e55efe124916547323fba</anchor>
      <arglist>(EXRImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14b18937022a2ff7b60607e7b197d43e</anchor>
      <arglist>(EXRImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99f4e0b54c3736a3299e968f12e062b8</anchor>
      <arglist>(FaceAreaOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a343b9f311bc0fa0c3491324ae6db57d4</anchor>
      <arglist>(FaceVaryingPromotionOp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloat2Int</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa370c14c7a8cca0e1fda92ce3b5db203</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatRound</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaf857fc797051f75662498ed8a1cd4c6</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatFloor</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afbaf1beda1f26962b2b5ef0346bd5eae</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fastFloatCeil</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>add584de2d39fefdd06d9ffc0684dbbfd</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa80e9b49d75aa1de4d0c6b6894d18aa4</anchor>
      <arglist>(FileSequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSequences</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3363d90baf93a0cfc3d6285a57f8c659</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names, std::vector&lt; FileSequencePtr &gt; &amp;sequences)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSequences</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a63d8840f3f82e3d415e7d6a2f9076956</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names, std::vector&lt; FileSequencePtr &gt; &amp;sequences, size_t minSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ls</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5e4cb7ffc69000b3504b078e2b5bdbfe</anchor>
      <arglist>(const std::string &amp;path, std::vector&lt; FileSequencePtr &gt; &amp;sequences, size_t minSequenceSize=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ls</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a08d5ae7890448dff3fd9a8a4aeb0b6e6</anchor>
      <arglist>(const std::string &amp;sequencePath, FileSequencePtr &amp;sequence, size_t minSequenceSize=2)</arglist>
    </member>
    <member kind="function">
      <type>FrameListPtr</type>
      <name>frameListFromList</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8707d2e5aea139ab4a9783789a0d9573</anchor>
      <arglist>(const std::vector&lt; FrameList::Frame &gt; &amp;frames)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afd0627b3196cf5c065cd8baa87d00ba4</anchor>
      <arglist>(FileSequenceParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0a23ff35670872cd23cca225c3efb141</anchor>
      <arglist>(FileSequenceVectorParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a13bb6d30476470703aeaf51a69ef2414</anchor>
      <arglist>(FilteredMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4532601463fcd15846910100d8c489dd</anchor>
      <arglist>(ImagePrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0bdab84231c96a6775752ab2f9f870db</anchor>
      <arglist>(Group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad4daa2d7d5e4cd75143c79659b278c94</anchor>
      <arglist>(Font)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5ce89070bd84a33a02be00ee155b125c</anchor>
      <arglist>(FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>add63571d6f8dab701f195e8436cc28a3</anchor>
      <arglist>(FrameListParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a034dee4ec56c34475cf81c75ea32e8ce</anchor>
      <arglist>(FrameRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7942d7c6c9b72fb1e5e68124c1f486f3</anchor>
      <arglist>(FromCoreConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3d6a70cfdb43abe4e9566c2c9692f07</anchor>
      <arglist>(Grade)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8eaac574793b30655a6a9d593f89d4cb</anchor>
      <arglist>(HdrMergeOp)</arglist>
    </member>
    <member kind="function">
      <type>Vec::BaseType</type>
      <name>henyeyGreenstein</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4139330e917ee4bb5e2f040efd61a0e3</anchor>
      <arglist>(typename Vec::BaseType g, const Vec &amp;incident, const Vec &amp;outgoing)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>henyeyGreenstein</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac9b2f93d675384a0940a7f078b446b3c</anchor>
      <arglist>(T g, T theta)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>henyeyGreensteinCT</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aca99e4d384db8aca8c9ec75e5dd1c7ca</anchor>
      <arglist>(T g, T cosTheta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3d563b6dfe13cdcf285a9922d5dd8b1f</anchor>
      <arglist>(T value, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae9ee58367483174a21fd073601e4f688</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3de3e8092d6788428d73e1229dbfc066</anchor>
      <arglist>(RandomAccessIterator first, RandomAccessIterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>decToHex</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9d1f6f3418ff73a4b419df9c3ce69fad</anchor>
      <arglist>(T n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3bf95622dc793d3bd7ab77a44ef3d8bf</anchor>
      <arglist>(InputIterator first, InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b9d3a694cae6a21d26cd9854b1faf18</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hexToDec</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a500ac1ded0ff2942c4449e4bbacd3b47</anchor>
      <arglist>(InputIterator first, InputIterator last, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a61079f68813cfc8f011de101f1657b01</anchor>
      <arglist>(IndexedIOInterface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a35e54249b0d633d0fe291145dc7df5c8</anchor>
      <arglist>(HierarchicalCacheDependency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a59786e4776c9397d0bb12e8fc06d7d22</anchor>
      <arglist>(HierarchicalCache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18fcf7a21c23874fafda77343494ce44</anchor>
      <arglist>(HitMissTransform)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>majorVersion</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9c1df72ed68c0cf62189ea682bede2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>minorVersion</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3ddfeb384bc5c8e6b10962fe51b8ff69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>patchVersion</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3494522a518d025935d796e97b0a390b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>versionString</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3f8c3a8882e592a86d6431159b98d16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withASIO</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad8dc122936348b0dacb8ec08b9d5c1c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withBoostFactorial</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad06d03a96ae8d3195dd742dee58ffa25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withTIFF</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af84a9421a52a246a917854a8fce84b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withJPEG</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af08f894af56b6b1d4bece023af0e3cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withFreeType</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7d5b1a9a58dd218a7bab5e2da9bb7574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>withPNG</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab4ff2e8a609af21600e246b9412d6dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4f73a17153255e3d377c0ccb496ffebd</anchor>
      <arglist>(IFFFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a055f11f9fc151fbd5bfb21a538052c3e</anchor>
      <arglist>(CurvesPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac4ddb2f8201e870e2c74d192be76f14d</anchor>
      <arglist>(IFFHairReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1d9dc137f55f08f232d05c34c92724c1</anchor>
      <arglist>(ImageCompositeOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4d51a81b614e908afe9af2b61ff5889b</anchor>
      <arglist>(ImageConvolveOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a56cfd4c0bb7ee7606a075bb1d1459622</anchor>
      <arglist>(ImageCropOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a268b9c433beb22292a45b15c5a2a2939</anchor>
      <arglist>(ImageDiffOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5bd03c71cd8752fe35363c13c6f6fde4</anchor>
      <arglist>(ImagePremultiplyOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad868f5f4bd2cad8f910b556b8fb174c6</anchor>
      <arglist>(ImagePrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8986a8811cadc5b4c8089b67d350bd4f</anchor>
      <arglist>(ImagePrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3a8c44b1f66dc3f1a42fd7229c58d422</anchor>
      <arglist>(ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a346ff01aac41e5cab8cb6eaa861854a1</anchor>
      <arglist>(ImageThinner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af7ddd782cc240af2ad4e49c4f63436c8</anchor>
      <arglist>(ImageUnpremultiplyOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0b40a304dc986ce56872184d1d6ade8c</anchor>
      <arglist>(ImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7a0aeb61f46df59931612cd6abab3eea</anchor>
      <arglist>(IndexedIOFilter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7f2634cb55fb41880f59deafbfa9f1e6</anchor>
      <arglist>(IndexedIONullFilter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18dad73f875deda8d7906a98c4be214b</anchor>
      <arglist>(IndexedIOEntryTypeFilter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3a283d4bcd7429154e6b322442a12ba7</anchor>
      <arglist>(IndexedIORegexFilter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afc46b6c3fd160b87fb48f10f138264ce</anchor>
      <arglist>(InterpolatedCache)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2990928990a47cb2fecc701e44e548ef</anchor>
      <arglist>(T *a, IntrusivePtr&lt; U &gt; const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a696c98f8c554d7a8187b5f43c0a005fa</anchor>
      <arglist>(T *a, IntrusivePtr&lt; U &gt; const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad265be9c3d3d55ab1389592dca879406</anchor>
      <arglist>(IntrusivePtr&lt; T &gt; &amp;lhs, IntrusivePtr&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_pointer</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4fa771d2929245fbb0674a8cb7559387</anchor>
      <arglist>(IntrusivePtr&lt; T &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>staticPointerCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5a7ba1afe62d42abb3f74e86d50fc95a</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>constPointerCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8bc6ded702ada39dc81143836ac16726</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>dynamicPointerCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5bdde68c97dbb1b009c6df770f64096a</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; E, T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aae7b16315fe2ef8dee4e872e0c1e6a8d</anchor>
      <arglist>(std::basic_ostream&lt; E, T &gt; &amp;os, IntrusivePtr&lt; Y &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3188f308ddadf4e3b83d63f57bc8981d</anchor>
      <arglist>(JPEGImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a43f966232df8adc41967de99afccb17f</anchor>
      <arglist>(JPEGImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18b5d9c499caa01084a3cd76037da13e</anchor>
      <arglist>(LevelFilteredMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa28ce7d4b541219ae6157ff706b067bc</anchor>
      <arglist>(Light)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af9cfe2d11b8a5d0f0c445d92fd703813</anchor>
      <arglist>(LimitSmoothSkinningInfluencesOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3596540b317ae0fe990a763c5f9d776</anchor>
      <arglist>(LinearToCineonOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a013c48e30d9c324c8e3dc5c78808c06c</anchor>
      <arglist>(LinearToPanalogOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14c25432c2d30812ada21e608ea449e7</anchor>
      <arglist>(LinearToRec709Op)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a33abd96edf2a3d8c628bc228123b7ed1</anchor>
      <arglist>(LinearToSRGBOp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7623ad1b094c436defbf5e11e7ed6da9</anchor>
      <arglist>(std::ostream &amp;o, const LineSegment&lt; T &gt; &amp;lineSegment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a55b3c5abb2689ab14a7dea51e4c6c730</anchor>
      <arglist>(LuminanceOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34487e4d796103edbdd7f179cfcaff16</anchor>
      <arglist>(MappedRandomPointDistributionOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a871baea5257e186c943c4458b068e228</anchor>
      <arglist>(MarschnerLookupTableOp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a11cf3c4f61da0541f87b8116121451f7</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>smoothstep</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7bcf4e848b4773f68bb99023465390e9</anchor>
      <arglist>(T v0, T v1, T x)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Matrix44&lt; T &gt;</type>
      <name>matrixFromBasis</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14509b451874071a7768e479637d4670</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;x, const Imath::Vec3&lt; T &gt; &amp;y, const Imath::Vec3&lt; T &gt; &amp;z, const Imath::Vec3&lt; T &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab253fd88efc28ca5d338662911e2c1d6</anchor>
      <arglist>(const Imath::Matrix33&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a587684881e5382f30e9fe17cb43bb511</anchor>
      <arglist>(const Imath::Matrix44&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44d</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0adfe0922a2beca63c87fed0cd5a266f</anchor>
      <arglist>(const Imath::M44f &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b8440858b8c4ffe740949c96b53c960</anchor>
      <arglist>(const Imath::M44d &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8587699928af522624ed7e189e6cf866</anchor>
      <arglist>(MatrixMotionTransform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab5fafbc0d6832d53f3376fe9ef723190</anchor>
      <arglist>(MatrixMultiplyOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matSet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa40d92ffb1eb05c31cf8484c3bc1c8bd</anchor>
      <arglist>(T &amp;m, unsigned int i, unsigned int j, typename MatrixTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matSetAll</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a00a7f96b73c3bc7ba42e41e7003ceefe</anchor>
      <arglist>(T &amp;m, typename MatrixTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>MatrixTraits&lt; T &gt;::BaseType</type>
      <name>matGet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab914c7226f81116fc617f2ecd356e974</anchor>
      <arglist>(const T &amp;m, unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>matConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1236b40544abf71d2a0a501bf3196d66</anchor>
      <arglist>(const T &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a19254ea4967d4c9f130427bd2ceb2168</anchor>
      <arglist>(const T &amp;m1, S &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a651cccf96be291cd4bfdc43afedcf16f</anchor>
      <arglist>(MatrixTransform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab954a51043b79e05ee046cc09ea27031</anchor>
      <arglist>(MedianCutSampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7f9e2d268a8aa20738720dc75769b08f</anchor>
      <arglist>(MeshDistortionsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1786a9a469f8f9e2e2702fb9bbd8ca80</anchor>
      <arglist>(MeshMergeOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace8c65f7256703c818e7b8e9fee0cdf0</anchor>
      <arglist>(MeshNormalsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5ae9b5a518497c6a1b59720fab6393bf</anchor>
      <arglist>(MeshPrimitiveBuilder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7823a355e5e9980b0db09e77bdab96b2</anchor>
      <arglist>(MeshPrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adef8cca6bbc6535df45b8a7bf750a901</anchor>
      <arglist>(MeshPrimitiveImplicitSurfaceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5a7f8cdb6c2c004ba81bd3126db12947</anchor>
      <arglist>(MeshPrimitiveImplicitSurfaceOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae5ee5b96cd234836d359e6376fed1248</anchor>
      <arglist>(MeshPrimitiveShrinkWrapOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a867159c1b8c5542e56278c08fc196599</anchor>
      <arglist>(MeshTangentsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a55d4c1ba2934d64567b919f0d238ef46</anchor>
      <arglist>(MeshVertexReorderOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aedf42095e8d2e316fb817ca6d1df5125</anchor>
      <arglist>(MessageHandler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6e3f58cea9575026d0e6d04d4d41b0aa</anchor>
      <arglist>(MessageHandler::Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>msg</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a12263ce0884bed9fd9075c587c14f78f</anchor>
      <arglist>(MessageHandler::Level level, const std::string &amp;context, const boost::format &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab3e5a545dafbfa73d4eba053efa6172d</anchor>
      <arglist>(MixSmoothSkinningWeightsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a17396b9cb7f06206d2a747a6eb3fd658</anchor>
      <arglist>(ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a608496d65acf971fda842d0d20ed92e6</anchor>
      <arglist>(MotionPrimitive)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99d5b4aed400e5aa49eb855efbd6ca6a</anchor>
      <arglist>(std::ostream &amp;o, const MurmurHash &amp;hash)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a545689e4beac323dc87f803e58524fbd</anchor>
      <arglist>(NormalizeSmoothSkinningWeightsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa9d4365736a645bb68b899ac06141a41</anchor>
      <arglist>(NParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa7f173efc0af1f9fe369a8ae6c76cd19</anchor>
      <arglist>(NullMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adfd090dc345ecf319a0aff06312d7dbe</anchor>
      <arglist>(IntParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa2aff01927711372f2121526bbdb5021</anchor>
      <arglist>(NURBSPrimitive)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>linearObjectInterpolation</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa258b9577474c5c5ce7db9c32e759620</anchor>
      <arglist>(const ObjectPtr &amp;y0, const ObjectPtr &amp;y1, double x)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>cubicObjectInterpolation</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3da70f6ca10d66cf7b49572026d7936b</anchor>
      <arglist>(const ObjectPtr &amp;y0, const ObjectPtr &amp;y1, const ObjectPtr &amp;y2, const ObjectPtr &amp;y3, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adcf72e6d968f305b44dc33041e313c20</anchor>
      <arglist>(ObjectParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a20b38072ae92b546dc6e19987d9e888a</anchor>
      <arglist>(ObjectReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad8a93e8f11be024eb96c19769e1fefb2</anchor>
      <arglist>(ObjectWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a082c6cc7e1f2aef363bee59a2bb88544</anchor>
      <arglist>(OBJReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae3bb433a06188c0b5dd124e3d1239df5</anchor>
      <arglist>(Parameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9db60179413410d7cb581c5bd54f63da</anchor>
      <arglist>(Op)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a599bd2d6485b178d6361a84f614a078f</anchor>
      <arglist>(OStreamMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a27d5d9272932488bab529fd9688a2a35</anchor>
      <arglist>(PanalogToLinearOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2a1ecf08798f6da65a210243a4ff2ab8</anchor>
      <arglist>(Parameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6bc567f2462d37c7cb0853cd52411b5e</anchor>
      <arglist>(Parameterised)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a98405300a59e4957c76f9f08d14d0493</anchor>
      <arglist>(CompoundParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a696f46b836502f2089fb0331ca3c5e58</anchor>
      <arglist>(ParameterisedProcedural)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3dc82c2a6a6d5c5f3649f57e4b2e7818</anchor>
      <arglist>(ParticleMeshOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6c130d38db6621cb15062dbc210a0c95</anchor>
      <arglist>(ParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a445fc048f4ff991548447bee97209b52</anchor>
      <arglist>(PointsPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4c4e531913265c9e8337951bbd9cf6ac</anchor>
      <arglist>(ParticleWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5be4a303ff8596a30a6dec81591ecc49</anchor>
      <arglist>(PatchMeshPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad8c51b77c4c38e487420f52f81c77462</anchor>
      <arglist>(PDCParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adb6167fafed74b592b5a27b302a4c306</anchor>
      <arglist>(PDCParticleWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af11d37b1bd68e6933f2fd7e670245087</anchor>
      <arglist>(PNGImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6689f746638d6c81e6320f10f50e68cd</anchor>
      <arglist>(PointBoundsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4172b5b954178232df15549e83941e44</anchor>
      <arglist>(PointDensitiesOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af68569da5e069baae4ac127dd1dbd166</anchor>
      <arglist>(PointDistributionOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3e87186e6d4fca12aef6cfeda11a4dd3</anchor>
      <arglist>(PointMeshOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ada86064aa7d3e3f35a6fc4912acfc9eb</anchor>
      <arglist>(PointNormalsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abea396f6603fd621c7bd11e24bd0a777</anchor>
      <arglist>(PointRepulsionOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aca503c64e518a6011d3b2c88a1b1d09d</anchor>
      <arglist>(PointSmoothSkinningOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abf69756931ec7ffa28d4f0c6192e3a06</anchor>
      <arglist>(PointsMotionOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a05b7e01e676e43e70f1dd5a45070cb32</anchor>
      <arglist>(PointsPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2826430b517180b6ef89f42a6722be2a</anchor>
      <arglist>(PointsPrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acbe0a0e4f6857825d0e65391e67c1ce9</anchor>
      <arglist>(PointVelocityDisplaceOp)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>polygonNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acc85ae9cbb7b22f3805704225f9df573</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>polygonNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a17f00debf46292dc8c00db29b944246f</anchor>
      <arglist>(Iterator first, Iterator last, bool normalized)</arglist>
    </member>
    <member kind="function">
      <type>Winding</type>
      <name>polygonWinding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a487052497a4315c5588611a33338b39b</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>Winding</type>
      <name>polygonWinding</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aba6cde4cae38285183d33f565389a602</anchor>
      <arglist>(Iterator first, Iterator last, const typename std::iterator_traits&lt; Iterator &gt;::value_type &amp;viewVector)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box&lt; typename std::iterator_traits&lt; Iterator &gt;::value_type &gt;</type>
      <name>polygonBound</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9329e6d85b4b1c771c6d8912f0b1583e</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type::BaseType</type>
      <name>polygonArea</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>add4e4b1c928077809a769e3f854bd72c</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a75d53f8acc2c2f33e50e5acd7a3b8835</anchor>
      <arglist>(PreWorldRenderable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a00dbd0a5d144d1a77b130db9fe8ff242</anchor>
      <arglist>(Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7cfd06382634b4434a13ec888a00a3de</anchor>
      <arglist>(PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7b7613b18a588036caa451a36bfbc8cf</anchor>
      <arglist>(PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8c9a44b5fb311a45fff8ef0f298ea8e6</anchor>
      <arglist>(PrimitiveImplicitSurfaceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2aa59e825c82ba3b95c88e3a60640171</anchor>
      <arglist>(PrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinx_over_x</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6f348699d2df15c9c35a2929ae681f4a</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>angle4D</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a43d172eee37b9d8f8a3bbedef83dc50c</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Quat&lt; T &gt;</type>
      <name>slerp</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38d1245c9bd50eadb74b692d1866ed90</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2, T t)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Quat&lt; T &gt;</type>
      <name>slerpShortestArc</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0b923b49d22803849e9aba01db5b7e0d</anchor>
      <arglist>(const Imath::Quat&lt; T &gt; &amp;q1, const Imath::Quat&lt; T &gt; &amp;q2, T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>barycentricRand</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5367a6e9c3c29ddfffe2e530f65523d5</anchor>
      <arglist>(Rand &amp;rand)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>triangleRand</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3d9a961a551061f0c62fa840a74496e2</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, Rand &amp;rand)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>cosineHemisphereRand</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5c68dc4f88d66670720b690887c844a7</anchor>
      <arglist>(Rand &amp;rand)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a398798ed95cc785ee7a46c3d9e4e4151</anchor>
      <arglist>(RandomRotationOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac070a4a79b5e5210018cdc53af208ada</anchor>
      <arglist>(Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a913b3dcadbcf69c82a6b36274a23bc02</anchor>
      <arglist>(Rec709ToLinearOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intrusive_ptr_add_ref</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3e3f1aa1632a06fab16ee208d258df03</anchor>
      <arglist>(const IECore::RefCounted *r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intrusive_ptr_release</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a24a9b8522ae98639d712b95cfc4ef7d3</anchor>
      <arglist>(const IECore::RefCounted *r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a739735c57637eebc89ea21c0132f9af9</anchor>
      <arglist>(RemoveSmoothSkinningInfluencesOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa1ca0b8fe2ce594b9cc21a4f294c45d6</anchor>
      <arglist>(Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9fb23c72eba1c2178528ec5b9321106d</anchor>
      <arglist>(Renderable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae216252d381ff59ecfe80e939b1d0dbd</anchor>
      <arglist>(ReorderedFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ace7c831ac1a1181798fd5e8b81fcbe81</anchor>
      <arglist>(ReorderSmoothSkinningInfluencesOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae13af629325aa0535b5a4cf805304f1a</anchor>
      <arglist>(ReversedFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14b9d57ac05d48e9ff79103687d2bf8e</anchor>
      <arglist>(RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>runTimeCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abea35236fe913402e1f2f254dd319d57</anchor>
      <arglist>(const IntrusivePtr&lt; S &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>runTimeCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8fc8a896e6aada767c986f7510f39add</anchor>
      <arglist>(S *src)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>assertedStaticCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a763114bea33366e59405a7b2bf8cf3c1</anchor>
      <arglist>(const IntrusivePtr&lt; S &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>assertedStaticCast</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6eb8182d91bd9bd37e55e1d95e6e2a54</anchor>
      <arglist>(S *src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab9839c0c166e1ed5a126a7540da27595</anchor>
      <arglist>(SGIImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad4b79b38ca24635a8058ece599d904ea</anchor>
      <arglist>(Shader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af5048af24d1b3f32b9c262226fc63435</anchor>
      <arglist>(SimpleSubsurface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0fbb0775ea0b0bfa257439364fed5cd1</anchor>
      <arglist>(BoolData, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a17c39efb07fab01415e27768ee54dfd9</anchor>
      <arglist>(FloatData, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a86229ec4b22ec95bb19f4b198ebfdebd</anchor>
      <arglist>(DoubleData, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a394495144b7af4e46ce0ac107ac922c7</anchor>
      <arglist>(IntData, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6a894a52a337ee6ca565d56ecfe588cb</anchor>
      <arglist>(UIntData, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a411705abbea69052c909c4972536a7a6</anchor>
      <arglist>(CharData, char)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a58dbbfdafc0627d16c87d5d8e5a6a4e1</anchor>
      <arglist>(HalfData, half)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad135fb6475682d80d87dd8dffe0fd217</anchor>
      <arglist>(ShortData, short)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a874ce700ad068b304ab191a5b0e82ef8</anchor>
      <arglist>(Int64Data, int64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DEFINETYPEDDATATRAITSSPECIALIZATION</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5cd191dd5ae97002686d7460a3747091</anchor>
      <arglist>(UInt64Data, uint64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7e98b725787659198b0225a89a512296</anchor>
      <arglist>(SmoothSmoothSkinningWeightsOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaed6ddeb57ff974a3913f65869194b45</anchor>
      <arglist>(SpherePrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a44a23aa97a817981065035a9f649cb32</anchor>
      <arglist>(SpherePrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; S &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aba00fce3eaaf8702165812b858e015e7</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;lsh, const SphericalHarmonics&lt; S &gt; &amp;rsh)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a770b25bd4aee1082e391dd236ff1e6a0</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;lsh, const SphericalHarmonics&lt; S &gt; &amp;rsh)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; S &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af2586a434722fb496c00856943a3edf3</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;lsh, const SphericalHarmonics&lt; S &gt; &amp;rsh)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a40f736a403f357f53fa3ac2e07f03444</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;lsh, const SphericalHarmonics&lt; S &gt; &amp;rsh)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; S &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a47450ea468e8b0357d25a2ed1904c90d</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;lsh, const T &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aec300e7fac479d214028f6c694780d34</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;lsh, const T &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; S &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aecd05e7ada6871aedcd6acff6ea1f531</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;sh1, const SphericalHarmonics&lt; T &gt; &amp;sh2)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abf59b7f4a878ed21f8885a2ca49fd185</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;sh1, const SphericalHarmonics&lt; T &gt; &amp;sh2)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; T &gt;</type>
      <name>lambertianKernel</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a655d999c944cc2c1016e6460d893671f</anchor>
      <arglist>(unsigned int bands, bool normalized=false)</arglist>
    </member>
    <member kind="function">
      <type>SphericalHarmonics&lt; T &gt;</type>
      <name>rotatedKernel</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a52f8556e394f5601b57e8178be680e19</anchor>
      <arglist>(const SphericalHarmonics&lt; T &gt; &amp;kernel, const Imath::V3f &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>windowingFilter</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2b20b1a6953f806606b03323badbd2f6</anchor>
      <arglist>(SphericalHarmonics&lt; T &gt; &amp;sh, float windowSize)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a890a37cefe51ea57fe658de82ede467b</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;sh, const SphericalHarmonicsRotationMatrix&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics&lt; S &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1218f853cacec709edf75016170aaf0f</anchor>
      <arglist>(SphericalHarmonics&lt; S &gt; &amp;sh, const SphericalHarmonicsTransferMatrix&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9b6b98a6861835e3d22b958c0b19d3af</anchor>
      <arglist>(SplineToImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af62ba34775acd950dc5547d6933c4664</anchor>
      <arglist>(SRGBToLinearOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4bc94ad83a8c6ececa7dea929763728e</anchor>
      <arglist>(StateRenderable)</arglist>
    </member>
    <member kind="function">
      <type>std::iterator_traits&lt; Iterator &gt;::value_type</type>
      <name>join</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4a952ba9194ef0c6a37dba698d875680</anchor>
      <arglist>(Iterator begin, Iterator end, const typename std::iterator_traits&lt; Iterator &gt;::reference separator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperCase</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4ba304aa84bd420d97f7be34385f6452</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerCase</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acf9447e5c5df35a004e4c11e817b1657</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a857d52e0bdd99f4b33aac852071330a7</anchor>
      <arglist>(SummedAreaOp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testTypedData</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a63d043c62cfefd20ced84cedbaeee93f</anchor>
      <arglist>(DataPtr data)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>tetrahedronVolume</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3c0a3c1d40f99dcbe3f305855489c506</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>tetrahedronPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad0e8c1ca76aced7e8176c7902657548d</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tetrahedronBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a99dc289648627ed2c79f273c9bbd854a</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, const Vec &amp;p, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>tetrahedronClosestBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afd1e1128b42383275680ffdbf7c8a874</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;v3, const Vec &amp;p, typename VectorTraits&lt; Vec &gt;::BaseType barycentric[4])</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3i</type>
      <name>tetrahedronFaceIndices</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae653b6b597a5b885e734a61c0987b94e</anchor>
      <arglist>(int face)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abaa16802625b5f6395380b6ec14d7368</anchor>
      <arglist>(TGAImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>acb7182d4c246da29927570d8286b257f</anchor>
      <arglist>(TGAImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac0e83f170d55e3ed1311cf90e9eed96c</anchor>
      <arglist>(TIFFImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a65bed4b0f984132a4362ef13c226597c</anchor>
      <arglist>(TIFFImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5d301d4fccf92e34a9c89f59bfab2d11</anchor>
      <arglist>(ToCoreConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad39edaf3ed67d57d6528fb61dd3d059f</anchor>
      <arglist>(Transform)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a211e3cb924d0bd17efdbcc376dead177</anchor>
      <arglist>(std::ostream &amp;os, const TransformationMatrix&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2aaccf5a5bc0ab4dbe896ce7acb808c2</anchor>
      <arglist>(TransformOp)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>triangleArea</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a717c0d210f22c639f9208da3ca029291</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>triangleNormal</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a38351cd020b654fad2dfba84d29ea969</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>trianglePoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0e2aad2bb1815adab6911e2c04d71ee4</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; Vec &gt;::BaseType</type>
      <name>triangleClosestBarycentric</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a16a4e57412b805e821ac21e973438782</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>Vec</type>
      <name>triangleClosestPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3f9f446c956048e67e8a8c64340ad74a</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>triangleBarycentricFeature</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a113d8143c59d4fce778a01b615fc12aa</anchor>
      <arglist>(const Vec &amp;barycentric, typename VectorTraits&lt; Vec &gt;::BaseType tolerance=1.e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>triangleClosestFeature</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1c24e64cc7b0a4848bcc6f53a786301f</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleContainsPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5b8383bdf7f73cd2b259e6bed40aa418</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleContainsPoint</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad68070055902975870c2f778715623bb</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;p, Imath::Vec3&lt; typename VectorTraits&lt; Vec &gt;::BaseType &gt; &amp;barycentric)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangleRayIntersection</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a64651bb9cfb7f5613f98fdc0f6857daa</anchor>
      <arglist>(const Vec &amp;v0, const Vec &amp;v1, const Vec &amp;v2, const Vec &amp;origin, const Vec &amp;dir, Vec &amp;pt, Vec &amp;barycentric, bool &amp;front)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6c180f79d465e5d942c177b46ad5a5aa</anchor>
      <arglist>(TriangulateOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2078d614c9d081ec69f1492a363a6fed</anchor>
      <arglist>(RenderableParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa8134c5173b6d8d344b98ab967e34c76</anchor>
      <arglist>(UniformRandomPointDistributionOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1a834d9fdec1864280e91a6e24b75238</anchor>
      <arglist>(UVDistortOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab57cff24a5dfc907aba00406e40b1a63</anchor>
      <arglist>(VectorDataFilterOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecSet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a18948647f19520cf12ba11db251dddfc</anchor>
      <arglist>(T &amp;v, unsigned int i, typename VectorTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecSetAll</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aaf351fee1035879b26d6c7745e70c9c6</anchor>
      <arglist>(T &amp;v, typename VectorTraits&lt; T &gt;::BaseType x)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecGet</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1e6a858ffcdbf77ec8ca691cba65db84</anchor>
      <arglist>(const T &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecAdd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac10a8f7752598f38950dbb0276700223</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecAdd</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a35107a11d4a0a6224f2ab389526cbfbe</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecSub</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a41cb920a8b105d223723307b86f96dbb</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecSub</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>abe922c557a0e1e08c2f05433372ebad0</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4c56519e83c3de2c8dc38b61dd60d16e</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0ff1feb8764720dd53ff0dac021a0091</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a366b027956dcc1fc2c0ba239b62fda7d</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecMul</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aef284dcc5e6c67d198bb94c7a1a5b543</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3677b1b435995dd2730dbc6a81f6f3a5</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a568fded550af50dd86a0e7c1c558fb1d</anchor>
      <arglist>(const T &amp;v1, typename VectorTraits&lt; T &gt;::BaseType v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a44956acd2fc0087718e631b0b34a2422</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecDiv</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa3e688bfbeacce6a960e6e75b0c4f78c</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2, T &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDot</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3625e1090bda1d6f7b0e87cff9b2cc2b</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecLength2</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa4ae353d864873f714b60b712a215006</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecLength</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a4ca9a2a8967aadcb346afc77ab870d02</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecNormalize</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5ba29c5234e77a60c6a1f50965f40815</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDistance2</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aecb0b8120b8e25269ba2812a74a3e3bf</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>vecDistance</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a31bbe3707e0994b03da60a8fd414145c</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>vecConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad35987df3526b6ce62531fd330441976</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vecConvert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a34c8f8370582a3775e0dc0d5f73f5502</anchor>
      <arglist>(const T &amp;v1, S &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecConstruct</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af742ca85bb6c5b754967f3abb0304947</anchor>
      <arglist>(const typename VectorTraits&lt; T &gt;::BaseType *components)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vecCross</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7c14a24dc3c5d923226e404d93c98244</anchor>
      <arglist>(const T &amp;v1, const T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aebf9b952849da2cbc2ffcf082b50a4ba</anchor>
      <arglist>(VisibleRenderable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adfae40ab591452342132e6a8cd75cb87</anchor>
      <arglist>(WarpOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a96a9f832c0e9c07a5abb003144e0f011</anchor>
      <arglist>(Writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a246b87878a6c2f8f8c92112b506e08a5</anchor>
      <arglist>(YUVImageWriter)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerRunTimeTyped</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af7a6644b40edf108c0aa3f4b2cd8d34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerObject</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3707b31258ba671636108940eb5e817d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setLogLevelByName</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaafa52a1b86080c1d2ae16c1d75dbaa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setLogLevel</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga958458f7304199fe49eba8f932e78a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>showCallStack</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaec00f12201c986dfc03099f5b404ae06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>exceptionInfo</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab16c3e12ce448cac0d89b7cd64a46ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>debugException</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga8816b5bb1bfbd62ce0de1f24341f65ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>debug</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3dffcb0dfa21f3a98ea4ad8e8d69f937</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>warning</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaf776df988edc82ce75ea24188f49bead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>info</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab474307ada80262fb692a14baa5ba96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>error</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4f0a227589d6446d529c3fabf5770a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSimpleDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4b330d0302904b94899fb5151d0953fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSimpleNumericDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gafcea35f31fa3c263c305974133e40a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isMatrixDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaee2955c9935b368f20715373ff4afca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isMappingDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gacb492ee9744fc846c8d590124814c28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isSequenceDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3debe370f279662df8c9e11e308e4a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getDataDerivedTypes</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga3474144fef79a5c11e7569ee4ee579cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>elementTypeFromDataType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gae7286dc1f63e5a7c624c3a4f6175c939</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>valueTypeFromSequenceType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga6619cb6555e1a9da9a38b44bad980abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataTypeFromElementType</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga5305711c3a58fb7d92504d85a9cd77e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataTypeFromElement</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga449a2d8c0c20b0705d1648a3d050d902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dataFromElement</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga8fb68d00c2f564473a1c0b92b1f101d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>mv</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab51cd7e171f8ad862b6722f8ed397030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cp</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga23c9282469a5cf3470cf1deedb5e6e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rm</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gad4fffebe708e73720943a0a8e988792d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cat</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>ga4353cbd9f5c0e3975fdf03f7c0063ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>formatParameterHelp</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gaa3451ef2733474701cb1badc248ac7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>curry</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ab71deb30fdebb703d095ed0462f2b3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__object__deepcopy__</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1c4f5330f200ab94271e2717749c2d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>loadConfig</name>
      <anchorfile>group__python.html</anchorfile>
      <anchor>gab661a7e6ac05a1bf99bf0060e63a1836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a94211d200dafcb88d1e0536ec50aa864</anchor>
      <arglist>(const RtPoint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Color3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a768a1923e36a901b395ca763017ad2ac</anchor>
      <arglist>(const RtColor &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a931a53af1d7f0bbac46e5fd2d99dc54c</anchor>
      <arglist>(const RtBound &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a11b3169e6322c1811fc0bf98de8ec054</anchor>
      <arglist>(const Imath::M44f &amp;from, RtMatrix to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7fe3f73e6077d7caec5cd178a420d2f7</anchor>
      <arglist>(const Imath::Box3f &amp;from, RtBound to)</arglist>
    </member>
    <member kind="function">
      <type>DataPtr</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aec7033bc8e12396cfbeaf2703959279b</anchor>
      <arglist>(const char *data, RxInfoType_t type, RtInt count)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V2f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adc4eb033eb8fcd87991af85df35165f8</anchor>
      <arglist>(const DD::Image::Vector2 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V2f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7426c36a34407aa5e15a1f99ab997811</anchor>
      <arglist>(const DD::Image::Vector3 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>DD::Image::Vector3</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac658eec2786d66e5949cb2b587abe97a</anchor>
      <arglist>(const Imath::V3f &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>DD::Image::Vector3</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac6dd4994230ece2f57d94115141b8cb7</anchor>
      <arglist>(const Imath::V3d &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V2f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ae385eb480c3cb0bb8cc6ca60821e3b35</anchor>
      <arglist>(const DD::Image::Vector4 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3ba76a3b1d43e49148a483cd103d0f61</anchor>
      <arglist>(const DD::Image::Matrix4 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2i</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a176e7429965e601b6652cabfd896557e</anchor>
      <arglist>(const DD::Image::Box &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>DD::Image::Box3</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a7c7dad7a55d0e4f2fa6b7083ebcb56cc</anchor>
      <arglist>(const Imath::Box3f &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>af8fc8643b155b1f7411622f318220223</anchor>
      <arglist>(const MString &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MString</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a96c465666f2c1d5ced7910e82f374970</anchor>
      <arglist>(const std::string &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a55d610dad4875ec5a122a34b81107136</anchor>
      <arglist>(const MVector &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a661670c33e1b65657abf15a8506d4867</anchor>
      <arglist>(const MFloatVector &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a92cadfdc1c0d2ac5f133fda8a49e9cbf</anchor>
      <arglist>(const MPoint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5442f62bc6df2c23cc2d8550e3f9591c</anchor>
      <arglist>(const MFloatPoint &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MVector</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2948c1c249682362f1017b928a96da92</anchor>
      <arglist>(const Imath::Color3f &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Color3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a92f6c4341f81c70403105d5706756a91</anchor>
      <arglist>(const MColor &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MColor</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a8b845d5f5bb36ff8e4b4e7fb4e34fe37</anchor>
      <arglist>(const Imath::Color4f &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac89067ab4e0ab5c0c00e8af1a7a4ac14</anchor>
      <arglist>(const MBoundingBox &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Quatf</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a10d07b6e0da0e08ec99eac2d536a303d</anchor>
      <arglist>(const MQuaternion &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MQuaternion</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3a8c9ca4644bbbdb321c6b5fc3b51245</anchor>
      <arglist>(const Imath::Quatf &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MQuaternion</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad9e70252ebf3ca6f006ee453960e8c17</anchor>
      <arglist>(const Imath::Quatd &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>adad6d31968981ca046635ca51408569d</anchor>
      <arglist>(const MMatrix &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Eulerf</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5ff63fe7a6907c75c0c476080a547841</anchor>
      <arglist>(const MEulerRotation &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MEulerRotation</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3ee2083e6beb933073dcb6d959ad9094</anchor>
      <arglist>(const Imath::Eulerf &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MEulerRotation</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9fcf759d677f819507b949c4a27431af</anchor>
      <arglist>(const Imath::Eulerd &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>IECore::TransformationMatrixf</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a2c057537beddedce95eaa4c02e89c9ba</anchor>
      <arglist>(const MTransformationMatrix &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MTransformationMatrix</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a9c128152b0e585d5a3177d464d3689f6</anchor>
      <arglist>(const IECore::TransformationMatrixf &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a5332adbae93ba9014e97dae7daec5d9c</anchor>
      <arglist>(const MCommandResult &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MDistance</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a0cc3d4135d09aa0ce9afb49aa8877825</anchor>
      <arglist>(const double &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a098a4d550453513578a249d1e7e5895d</anchor>
      <arglist>(const MDistance &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a1426e00d439775fcce7d624fa1e02fd1</anchor>
      <arglist>(const MAngle &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a939fe4521a4accc6f90c7e014ed54f06</anchor>
      <arglist>(const MTime &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MDistance</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a6ba436adc690daa611c82c8c908fe946</anchor>
      <arglist>(const float &amp;from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a14a8fda8fba9429b2979c32158b02f45</anchor>
      <arglist>(Primitive)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a3333457897ccd70355ab739c044ac04a</anchor>
      <arglist>(const UT_Vector3 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::V3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>afce54236a8a857079bf7223f92623055</anchor>
      <arglist>(const UT_Vector4 &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box3f</type>
      <name>convert</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>aa547bc9563adb8c64b9b8e9a544f9e22</anchor>
      <arglist>(const UT_BoundingBox &amp;from)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__nextDynamicRunTimeTypedId</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a01fb5b1ad6b1ff0e5901385566b249b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>__all__</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ac3ff3201df60a587405b794c8cd1ed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>__dataTypesConversionDict</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>ad982c77fde15b6c0ea47a7f4777816c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>__formatters</name>
      <anchorfile>namespaceIECore.html</anchorfile>
      <anchor>a898da5f0dfde758513c41fca58e6ce22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::AddSmoothSkinningInfluencesOp</name>
    <filename>classIECore_1_1AddSmoothSkinningInfluencesOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1AddSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>abd31a8eb0a31a0b1dc6ab7ce88f9b3c8</anchor>
      <arglist>(AddSmoothSkinningInfluencesOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1AddSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>aec0fc628c7314c6e81cdfc8839c86e10</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::AttributeBlock</name>
    <filename>classIECore_1_1AttributeBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>AttributeBlock</name>
      <anchorfile>classIECore_1_1AttributeBlock.html</anchorfile>
      <anchor>a2d75640689e6e280a45c07f65844c7fd</anchor>
      <arglist>(RendererPtr renderer, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AttributeBlock</name>
      <anchorfile>classIECore_1_1AttributeBlock.html</anchorfile>
      <anchor>aa7c173e88489a940a311121e0f06d350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1AttributeBlock.html</anchorfile>
      <anchor>a387beba60f9af3aaf6d728be925770dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECore_1_1AttributeBlock.html</anchorfile>
      <anchor>a3968f87a924b5c37d98f97b405b7387c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECore_1_1AttributeBlock.html</anchorfile>
      <anchor>af34065bda100492e78e54031cc0f774d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::AttributeCache</name>
    <filename>classIECore_1_1AttributeCache.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>ObjectHandle</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a62768bd9851b32756552e40e0b53eb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>HeaderHandle</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a30fc9c7becc844da2a4b85eb2c8dc0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>AttributeHandle</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a26334952b1b1fd2caa7bdac1e99a790b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributeCache</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a2dcee7c0389f57bd78de7c469b131534</anchor>
      <arglist>(const std::string &amp;filename, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>aa2052ebb70e5082f8fb8d77624cac465</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr, const Object *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>ab95db3321aa3c48aca6f5a729868153d</anchor>
      <arglist>(const HeaderHandle &amp;hdr, const Object *data)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>aa2b19ed9b15e86d807a80763f1a54880</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a0b21fa5cc11ae5d9c5db17ceaa8be466</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a8ca84e745686809fc43582caad0c6ca5</anchor>
      <arglist>(const HeaderHandle &amp;hdr)</arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a131e6845470b9bccd0e4a50fdcb0b73b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objects</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a0a5bdedab1d30feb9e741742c74b0609</anchor>
      <arglist>(std::vector&lt; ObjectHandle &gt; &amp;objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>headers</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a2cb01d3a41b5862ae2000dad7222261b</anchor>
      <arglist>(std::vector&lt; HeaderHandle &gt; &amp;hds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a51022576cc160b3b03287646b014c5b5</anchor>
      <arglist>(const ObjectHandle &amp;obj, std::vector&lt; AttributeHandle &gt; &amp;attrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>aa42e7188014b0fef8f8c9615c351f5e4</anchor>
      <arglist>(const ObjectHandle &amp;obj, const std::string regex, std::vector&lt; AttributeHandle &gt; &amp;attrs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a0445b81d402e017146a2807be93749a4</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a262278bc16f5d0f9ea2d5c927141611d</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a0a0365d135881eb688766ec92a60a9a2</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a4fd16886313d3548b7ee3e5ac21ed80b</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeHeader</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>accc60d6dcf499dc745869b09b6dfe12d</anchor>
      <arglist>(const HeaderHandle &amp;hdr)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>checkName</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a332dc4e59cdadefb6f31a72c01a58aeb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIOInterfacePtr</type>
      <name>m_io</name>
      <anchorfile>classIECore_1_1AttributeCache.html</anchorfile>
      <anchor>a6ed4c1bcf404f3afc39c29d173eebaa0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::AttributeState</name>
    <filename>classIECore_1_1AttributeState.html</filename>
    <base>IECore::StateRenderable</base>
    <member kind="function">
      <type></type>
      <name>AttributeState</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>aa575bfe0898b2ceb92de031dcc25f0fa</anchor>
      <arglist>(CompoundDataPtr attributes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttributeState</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>a311206d5c0d76a401c910ea0db39cf4f</anchor>
      <arglist>(const CompoundDataMap &amp;attributes=CompoundDataMap())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>a8967668e0f5d3044ce129d65fb730cca</anchor>
      <arglist>(AttributeState, StateRenderable)</arglist>
    </member>
    <member kind="function">
      <type>CompoundDataMap &amp;</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>a2ca8a490537336ead967779e970468a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundDataMap &amp;</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>a91357437cfc6908d35647bb270d183d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundDataPtr</type>
      <name>attributesData</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>aebc7d99e489f7f61e38d5d1c030024cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1AttributeState.html</anchorfile>
      <anchor>ad90b5de4ba932fcc84cbe489debfb0ae</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BGEOParticleReader</name>
    <filename>classIECore_1_1BGEOParticleReader.html</filename>
    <base>IECore::ParticleReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>a267e48c411e3a4af268b490cac39aa4d</anchor>
      <arglist>(BGEOParticleReader, ParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BGEOParticleReader</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>aafe6797cd86603ac6124c7a2adb78b09</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>numParticles</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>acd8120f0f63de90529aac8fac71e1651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeNames</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>afb6bab3d94624bd6048abcca148a3ccf</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataPtr</type>
      <name>readAttribute</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>af8b910b9d9b5c554b20171a55fa9df9f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>aeef0124b47c2d03eb92d12034dce9d8d</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1BGEOParticleReader.html</anchorfile>
      <anchor>af738f25cf8fc63a5cef1b0c90f886c5c</anchor>
      <arglist>(const IECore::CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BinaryFrameList</name>
    <filename>classIECore_1_1BinaryFrameList.html</filename>
    <base>IECore::ReorderedFrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>ab6c817e5e9170e066b94aac08a43a339</anchor>
      <arglist>(BinaryFrameList, ReorderedFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryFrameList</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a42c71a68edaaf7419a1851ccfa959fc8</anchor>
      <arglist>(FrameListPtr frameList=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a9d699ded29cc78495e36d37c9e7eb39b</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a59038d8db6c66d03e1b7f0d6f96ebf7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a66e1d8438528d9d0ef7102cb55be6ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>suffix</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a48ca48b4afdc1ab8c213584ca51dd718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1BinaryFrameList.html</anchorfile>
      <anchor>a7403a9f2612bd3235cd660edb848e712</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BINMeshReader</name>
    <filename>classIECore_1_1BINMeshReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1BINMeshReader.html</anchorfile>
      <anchor>a958182d7e37545f2cc79033cd002910d</anchor>
      <arglist>(BINMeshReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINMeshReader</name>
      <anchorfile>classIECore_1_1BINMeshReader.html</anchorfile>
      <anchor>a59e4380297a7d3cc00c776e080a5ee65</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1BINMeshReader.html</anchorfile>
      <anchor>a36df3d7902171770747a5c1d9243dd31</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1BINMeshReader.html</anchorfile>
      <anchor>a20f7c0014163898b0db1c781c2a47647</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BINParticleWriter</name>
    <filename>classIECore_1_1BINParticleWriter.html</filename>
    <base>IECore::ParticleWriter</base>
    <member kind="function">
      <type></type>
      <name>BINParticleWriter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a5885a30a5dbbbc44e824283f82120c46</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>fluidTypeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a12f1f2ddf23f096e5bbe9bccdbf074a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>fluidTypeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aba477abf0cbef0ab7397ab6558a3c170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>frameNumberParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a1f1d9a613a38280f4493fba26f70701b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>frameNumberParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a0fdcb8240f8dfd4afd2cef7772a30a1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aed50519873b36a67d1dd9c90db1c7a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a59b4a3b49ad349e989060079dfcaa6fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>scaleSceneParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a9bad6b3f997125b19dd0d038c51f1ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>scaleSceneParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a889e98d61704aef33afc36b004d83f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>elapsedSimulationTimeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a01955c444dddb61c6bd19a10d6998291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>elapsedSimulationTimeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a09036d569e6118ebf85f2f98a439a7f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>frameRateParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a70389bfd5ba04742b84f95b17283dd9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>frameRateParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a58d8f6f4ec96f68ec4df13d859de5723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>positionPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a0a8532752f26b70072bb768f1d532a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>positionPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ad21cb770cefabac5cc39a4d0b9ffadb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>velocityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a31b8e3999b29b56b62e6f22d6483cd49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>velocityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ad22a7ded3bf0b409154187b5c8991e20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>forcePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a691120f9c04ce40f3b579ec8a0d339ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>forcePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ab9fb90aca58148508ff586f6c5ca1d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vortisityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a41361bfb5d1d087bbb4e8fb88cc44b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vortisityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a5ca975d5d17b2be4d9fc95df0a331fc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>normalPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a15d159356614adb0a0fe75cd21a28752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>normalPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a6f90bc6dff08bd594a2ba028f039448d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>numNeighboursPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a06020cd3ca8e239a9970030befedb7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>numNeighboursPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a1281fc4e431676f93e800f0a5f40cb78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uvwPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a7c7ab9e31c6432fc535a98f212ac6a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uvwPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a254a314092df40d633bb142e81e2dbe9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>agePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aca6f5d8f9cbeb4f2177a6a27bcd0a901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>agePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a71abf06ffeb7b5490c572aa922bc64b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>isolationTimePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a83b2243877689010861076b65b9cad38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>isolationTimePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a227db6a990c146aecbf7bb9dc134cdc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>viscosityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aba0e0fd09c21b61f282a8d129b434df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>viscosityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a02a71593dd78482284691557be37b0ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>densityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a51df0cf92022942f0e9fd2b43a55e930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>densityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aa02fd8e92a6e4057d49797d746973d19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>pressurePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>af74f4b7691686e663596bc15e5b7071f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>pressurePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a87ce63296cb7da031a01a8f4c7615726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>massPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>aed9c1022ae41e6e9157952da9cb2c43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>massPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a5b75be4f8171933d680f7ae836662944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>temperaturePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a7b70266d007f46bb908f8e1afe12b2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>temperaturePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a66ff492a5c67e2ea3bbd1483a400d394</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>particleIdPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a61a6a4d88fe1d26a4a2cf58608983b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>particleIdPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a40075802807cf0082be528e64f1987fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getMaxMinAvg</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a57fe41f8f9606012e841c574f9374322</anchor>
      <arglist>(const FloatVectorData *data, float &amp;mx, float &amp;mn, float &amp;avg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T::ConstPtr</type>
      <name>getPrimVar</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a4540f51b871785bca6078db030c630db</anchor>
      <arglist>(const StringParameter *parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeParticlePrimVar</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a547f12fc803e473592738eb81ee1a67b</anchor>
      <arglist>(std::ofstream &amp;f, typename T::ConstPtr data, uint32_t i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_fluidTypeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a5c3ccfdec75ef35067ce3f2448a7c683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_frameNumberParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a7a7c88d47e67af2d9758b138748dfd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_radiusParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ae188886dc9d42992c642315672ef592f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_scaleSceneParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a19bc56f641feb81db54371c6603c311f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_elapsedSimulationTimeParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a4426579278a3d68c13f01efd51731822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_frameRateParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a81e52971a5e066f7301f3c718f804161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fParameterPtr</type>
      <name>m_emitterPositionParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a8bd115e50eb97c27624a7fafd0289e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fParameterPtr</type>
      <name>m_emitterRotationParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ae8878e4363680e37c00a0488538f807d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fParameterPtr</type>
      <name>m_emitterScaleParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a96da43d5e3894c87fc54338ea202b47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_positionPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>adaa4dbf657c2d05ede56de354fc8a6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_velocityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a2eae139ad64f2b8311e5ce6a99a2eab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_forcePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a4c22cc948c27a133f88bb255f93ed21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_vortisityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ad17b2b24c93843070ed22d759f2c9c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_normalPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a859b097334aa4e7b06c0dba856374401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_numNeighboursPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a6f8be86c6d38dba3de72e652d2bd9ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_uvwPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a6ab662e3b0ed142a1a64b70d76570127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_agePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a32f747cc5404c75c9c3d5c5c4f4b7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_isolationTimePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a819cc030497f4a86669b05ff6c2d5342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_viscosityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>ac94794b17a50f7440de72ae5b0089c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_densityPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a781e001ca56e2e5edb52e83846c1f47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_pressurePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>a9b7f187ecc87e622e4b7e45738fa1ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_massPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>acc380e12b9c7d49d0d4ae134fe27e040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_temperaturePrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>abd0df0d732b331fd6d21b37a54bdaea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_particleIdPrimVarParameter</name>
      <anchorfile>classIECore_1_1BINParticleWriter.html</anchorfile>
      <anchor>abf56d795b73cb0b0cab08773d3cf0420</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BlindDataHolder</name>
    <filename>classIECore_1_1BlindDataHolder.html</filename>
    <base>IECore::Object</base>
    <member kind="function">
      <type></type>
      <name>BlindDataHolder</name>
      <anchorfile>classIECore_1_1BlindDataHolder.html</anchorfile>
      <anchor>af2b5986d99fbdd3fd7c9b53e421b2e7f</anchor>
      <arglist>(CompoundDataPtr data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlindDataHolder</name>
      <anchorfile>classIECore_1_1BlindDataHolder.html</anchorfile>
      <anchor>a7d50e8dd529796bd673ec2ed181290cc</anchor>
      <arglist>(const BlindDataHolder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1BlindDataHolder.html</anchorfile>
      <anchor>a12a2a3cbd1d5c6f176a0f23c21930ed8</anchor>
      <arglist>(BlindDataHolder, Object)</arglist>
    </member>
    <member kind="function">
      <type>CompoundDataPtr</type>
      <name>blindData</name>
      <anchorfile>classIECore_1_1BlindDataHolder.html</anchorfile>
      <anchor>a9faf62e6b916718bee1c7aa6d404e45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CompoundDataPtr</type>
      <name>m_data</name>
      <anchorfile>classIECore_1_1BlindDataHolder.html</anchorfile>
      <anchor>a19c8a9edfb15d3cb8f71b56b077f7aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BlobbyImplicitSurfaceFunction</name>
    <filename>classIECore_1_1BlobbyImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>acf050178b8bd27e7c0cf104df044113c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a0064377de9efaa2ee742fbe26d5503b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a336a00128276f70d8ee364a3438c1a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>ab7faa9d2428189765b2ef4e6e6b70970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>abaa9180fe917b3213a3b0781c95b0978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>aea6fb16b34e34c7c30728d3b347b5744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; P &gt;</type>
      <name>PointVector</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>aba0d3ea7935dcd1a2858a05d935c3586</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; PointVector &gt;</type>
      <name>PointVectorData</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a55fe54ff83790e828816ec6511b96c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Box&lt; P &gt;</type>
      <name>Bound</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6648f0f32eb4565b8f489234c0e768bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a1ed29b8eedb20f54c4c19d9947e5f290</anchor>
      <arglist>(BlobbyImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlobbyImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a75deb629af6b9a73e85005084c1b5551</anchor>
      <arglist>(typename PointVectorData::ConstPtr p, ConstDoubleVectorDataPtr r, ConstDoubleVectorDataPtr s)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>abe5610350e8063a11515f94b44df13a7</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>abdb403c9970122e3cd6e5e5291862fd9</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Bound &gt;</type>
      <name>BoundVector</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>ad5650ef4fe402aa4eef66212f3afa126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BoundVector::const_iterator</type>
      <name>BoundVectorConstIterator</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>af9a98e87278c2702f6883547dae83644</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BoundedKDTree&lt; BoundVectorConstIterator &gt;</type>
      <name>Tree</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a059edae1a829f2f02c60ce061bb46a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointVectorData::ConstPtr</type>
      <name>m_p</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a658520d7dbc3163c54d4f5ce234e8ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstDoubleVectorDataPtr</type>
      <name>m_radius</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>acab513a1c6e8daa3014b6ed564fbb411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstDoubleVectorDataPtr</type>
      <name>m_strength</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a3e2cfdde400c18ba6be042a8c17cca6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoundVector</type>
      <name>m_bounds</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>a21bd1e745ca62fdce3c7fa60c02b22be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Tree *</type>
      <name>m_tree</name>
      <anchorfile>classIECore_1_1BlobbyImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae86e072fdc9acfac9e37679e4cbe9414</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BoundedKDTree</name>
    <filename>classIECore_1_1BoundedKDTree.html</filename>
    <templarg>BoundIterator</templarg>
    <member kind="typedef">
      <type>BoundIterator</type>
      <name>Iterator</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a5e73c4c228380e0903a1ca7f8b14fa5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; BoundIterator &gt;::value_type</type>
      <name>Bound</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a1fe21ea796032767e528f632d6c1f9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxTraits&lt; Bound &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a0d2bed9c5d674137629bd3262d925d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Node &gt;</type>
      <name>NodeVector</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a9c0c76efc107c4b1f235ff69c39da54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeVector::size_type</type>
      <name>NodeIndex</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a825f8a4fee68a163ee1427bed127774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundedKDTree</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a22ea38854403a8547a81485084d12196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundedKDTree</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>aa2d7cb888db3ff6d33f3e796da257119</anchor>
      <arglist>(BoundIterator first, BoundIterator last, int maxLeafSize=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a2197862f95f29516f4ded84415cf92e1</anchor>
      <arglist>(BoundIterator first, BoundIterator last, int maxLeafSize=4)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>intersectingBounds</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a7a176618a86f836b0e7907b04ec55431</anchor>
      <arglist>(const S &amp;b, std::vector&lt; BoundIterator &gt; &amp;bounds) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>numNodes</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a60dc46f21f196cc4beba0d7592bd858e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>node</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>abb335184d9825fb82adfe3f3da86a1dc</anchor>
      <arglist>(NodeIndex idx) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>rootIndex</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>a83c910ebc125080c1a8a7a2259a9b3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIndex</type>
      <name>lowChildIndex</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>aedb37122daf51b38ac8478c38b2bd722</anchor>
      <arglist>(NodeIndex index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIndex</type>
      <name>highChildIndex</name>
      <anchorfile>classIECore_1_1BoundedKDTree.html</anchorfile>
      <anchor>af640065eb7d7c6e1e50ad21f817003ee</anchor>
      <arglist>(NodeIndex index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::BoxTypeTraits</name>
    <filename>structIECore_1_1BoxTypeTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::BaseType</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1BoxTypeTraits.html</anchorfile>
      <anchor>a7f074ee3daee23aa59eeeaf9bb07db9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::BoxTraits</name>
    <filename>structIECore_1_1BoxTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>BoxTypeTraits&lt; T &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>a50be4ead1536af598a2ef1877b68be82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>create</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>ad21bf96ae813d755a69b98a9389c2dc5</anchor>
      <arglist>(const BaseType &amp;min, const BaseType &amp;max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>create</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>a8002e06c55f7f66c098e194af4cabd9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType</type>
      <name>min</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>a236a97589d9e1cc8ebc5f34661417fde</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType</type>
      <name>max</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>ad724006d9c4493d6004556da8525ea50</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMin</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>ad39f277865015cabd5dba7ea791de93e</anchor>
      <arglist>(T &amp;box, const BaseType &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMax</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>a351b43d4541efcbc035d0d6fd0be25f4</anchor>
      <arglist>(T &amp;box, const BaseType &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEmpty</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>a8a17a57571b93c052a49ef06b522c174</anchor>
      <arglist>(const T &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeEmpty</name>
      <anchorfile>structIECore_1_1BoxTraits.html</anchorfile>
      <anchor>ae08925633a69e0a3cb8a7f746e95bdb0</anchor>
      <arglist>(T &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CachedImplicitSurfaceFunction</name>
    <filename>classIECore_1_1CachedImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6a040ec2192876f6e1d02939b8a09150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a31f666e5ff18706605c646f1917c3fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a54e8fe813baf3a5c60273620eecf272f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>aaa463b02d265093d00ed9627ed4c9edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7febf54b5aedb60c8bd8b2b523724404</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a76b424621267cf83f6f1deed486eda6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; P, V &gt;</type>
      <name>Fn</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>ad2cb3649b4c6d9b3a4617bd34b985a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a30bea093f97a108a3c7110e6a7e7cf6b</anchor>
      <arglist>(CachedImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a1149162e6e2665c1566cfed155461338</anchor>
      <arglist>(typename Fn::Ptr fn, PointBaseType tolerance=Imath::limits&lt; PointBaseType &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a130d73c4dec43530c31fe1b2950ad92a</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>ad3fb9d0119f85c2cb78fe5b2917357ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cache::size_type</type>
      <name>size</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6784e4705cad45207f80c5adfc6b2a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a60b40c7ea8a764720eca22bb8d8b8de1</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>long</type>
      <name>KeyBaseType</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a96a5f3010b78f584371613f56155fa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Imath::Vec3&lt; KeyBaseType &gt;</type>
      <name>Key</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae746fd2f1f6d6c75dbd29812575d4f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>HashTable&lt; Key, Value, Hash &gt;</type>
      <name>Cache</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>ab169211ece99256259fa96be47358df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cache</type>
      <name>m_cache</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a875c285fc7b6031cec7a90497175dc5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Fn::Ptr</type>
      <name>m_fn</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>ab07fe827cee9ec072851a7e89510d71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointBaseType</type>
      <name>m_tolerance</name>
      <anchorfile>classIECore_1_1CachedImplicitSurfaceFunction.html</anchorfile>
      <anchor>a8db54878d70c7d9db4f7167e5507c9e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CachedReader</name>
    <filename>classIECore_1_1CachedReader.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a12f0aeb32ce8ac7e7054501f3794f33c</anchor>
      <arglist>(CachedReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedReader</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a4369829d1acd283a60b8407fa866dd2d</anchor>
      <arglist>(const SearchPath &amp;paths, size_t maxMemory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedReader</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a9d14e2f00cdc19fbe4343972a4701d76</anchor>
      <arglist>(const SearchPath &amp;paths, size_t maxMemory, ConstModifyOpPtr postProcessor)</arglist>
    </member>
    <member kind="function">
      <type>ConstObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>acd4e5fef6a2ddd728177ef62eb089852</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>memoryUsage</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>ad96270e1daaad215dd979bc4a36cf512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a5908694aa7f9f76e551db69789beaf24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a8da7ce26b4d609578d422fbecf7ba5f9</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a303bf248fd9e51119d24ac132ff846f1</anchor>
      <arglist>(const std::string &amp;file, ConstObjectPtr obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cached</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a3117f71cff3fbb038ae91640894463fb</anchor>
      <arglist>(const std::string &amp;file) const </arglist>
    </member>
    <member kind="function">
      <type>const SearchPath &amp;</type>
      <name>getSearchPath</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a5547d381ad64215711ada5cb0d83faca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSearchPath</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a9a7b1218c4eb8e8982645fe6f539f6bb</anchor>
      <arglist>(const SearchPath &amp;paths)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxMemory</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a9ea51203ff74fb721bf272b8888226eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMemory</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>a767cdaae69a28e942673b3fbbc6742de</anchor>
      <arglist>(size_t maxMemory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CachedReaderPtr</type>
      <name>defaultCachedReader</name>
      <anchorfile>classIECore_1_1CachedReader.html</anchorfile>
      <anchor>aaf5d8b699986f83762f62ea7110a2171</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CameraController</name>
    <filename>classIECore_1_1CameraController.html</filename>
    <member kind="function">
      <type></type>
      <name>CameraController</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a2dcf7ab1f5e87798109be4677bcf4c52</anchor>
      <arglist>(CameraPtr camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>ac6a28af174b14847e2e82096ae157481</anchor>
      <arglist>(CameraPtr camera)</arglist>
    </member>
    <member kind="function">
      <type>CameraPtr</type>
      <name>getCamera</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a21920c7d4b06266cd6e704ac5a752fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentreOfInterest</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a075cb0d155cc5d8f251ccdd4a0a90f53</anchor>
      <arglist>(float centreOfInterest)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCentreOfInterest</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>ad8dd2c75d825bf02dd8e1ca210820848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResolution</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>ad8776d26b961b3e0f3aabc57dc97a142</anchor>
      <arglist>(const Imath::V2i &amp;resolution)</arglist>
    </member>
    <member kind="function">
      <type>const Imath::V2i &amp;</type>
      <name>getResolution</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a7b7da64e5e968722399b4aa6e3998aa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a8be561285fdac33dfa37cd4c55d5049a</anchor>
      <arglist>(const Imath::Box3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a5641f78dd03267a463711ff2805d7c1c</anchor>
      <arglist>(const Imath::Box3f &amp;box, const Imath::V3f &amp;viewDirection, const Imath::V3f &amp;upVector=Imath::V3f(0, 1, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unproject</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a8f42d11c31f13b6f3353feef5a839b28</anchor>
      <arglist>(const Imath::V2i rasterPosition, Imath::V3f &amp;near, Imath::V3f &amp;far)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>motionStart</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a24ba35c9a0aa8a8ca14df99629724958</anchor>
      <arglist>(MotionType motion, const Imath::V2i &amp;startPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>motionUpdate</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>a530f8a90b15b41128c7e4de79e3bf320</anchor>
      <arglist>(const Imath::V2i &amp;newPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>motionEnd</name>
      <anchorfile>classIECore_1_1CameraController.html</anchorfile>
      <anchor>aacef151ebb26392def9cf0d322bb1a23</anchor>
      <arglist>(const Imath::V2i &amp;endPosition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CapturingRenderer</name>
    <filename>classIECore_1_1CapturingRenderer.html</filename>
    <base>IECore::Renderer</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a5df28da0aaf0ff9188755e9cefb198a2</anchor>
      <arglist>(CapturingRenderer, Renderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a512ec623e8dbe4226fa5871adeac0102</anchor>
      <arglist>(const std::string &amp;name, ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstDataPtr</type>
      <name>getOption</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a52444fd206c9c16c7c6f298344058692</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>camera</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>acb17ef29ed95aabf3d4255ad3a204a9c</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>adc4039877e308f726b261a24e1f5ee03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;data, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldBegin</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a0bbed7d79fbd727483779a1b4f88f657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldEnd</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>ad956b5ed05b07d083ea0b13e4a0585b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformBegin</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a3b975fcfc158918c8484d7d1ae159ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformEnd</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a79051b311d821c0b9293a6fa3d2b8b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a2c0a86716acb4c4cee1bff59ea275604</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a8d6217cf3ee7527980054649473c80ac</anchor>
      <arglist>(const std::string &amp;coordinateSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>aefce5d41194533902880540de93ba8cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a5bcf2aad85fad7e3f686cde56bc5758a</anchor>
      <arglist>(const std::string &amp;coordinateSystem) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concatTransform</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a10de4b69c67b6a7f0eb2ef4390ec4a2d</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coordinateSystem</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>aa080cab38ddba32c2de2d481c34b151e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeBegin</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a4f733ce84757eb16af545c84b1d7ef04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeEnd</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a12c0317d97135ad7490da3d2914faa5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a5f3acc72f2f9a0881e4a3a20c54f4dbb</anchor>
      <arglist>(const std::string &amp;name, ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstDataPtr</type>
      <name>getAttribute</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>abd4db1c8ff55a535b9c1b4addecd3838</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shader</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a5fec87393b37fa9528e6a5ca6bee97c1</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>light</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a9d32344e4e010bc87129aebcf74ba3da</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;handle, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>illuminate</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a7dc15c023c2a670261b002c831737a26</anchor>
      <arglist>(const std::string &amp;lightHandle, bool on)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionBegin</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>af73cd857a9f6b805547c03694b99824d</anchor>
      <arglist>(const std::set&lt; float &gt; &amp;times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionEnd</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a1d9d5933f1dcdc16bc1d3a00a8e522d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>points</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>afb245e3a4a416e152bd35e34962cd92f</anchor>
      <arglist>(size_t numPoints, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disk</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>af59cfcd3be7cbcd7c071d1b530b876aa</anchor>
      <arglist>(float radius, float z, float thetaMax, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>curves</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a36abf54d1243a7b29348dcd247a5b306</anchor>
      <arglist>(const CubicBasisf &amp;basis, bool periodic, ConstIntVectorDataPtr numVertices, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>text</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>ab5b6286380177e9cd619dab98243847c</anchor>
      <arglist>(const std::string &amp;font, const std::string &amp;text, float kerning=1.0f, const PrimitiveVariableMap &amp;primVars=PrimitiveVariableMap())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sphere</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a3bed05d56a16c1864ffd399b707d7acb</anchor>
      <arglist>(float radius, float zMin, float zMax, float thetaMax, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>image</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a600f34ac498522870409de5df22999bc</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a4f9d72fe5f5e48ce7b7e9c3c85f2d4b3</anchor>
      <arglist>(ConstIntVectorDataPtr vertsPerFace, ConstIntVectorDataPtr vertIds, const std::string &amp;interpolation, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nurbs</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>aa8005fa9f9263b9378acd91aaf5f3a52</anchor>
      <arglist>(int uOrder, ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, ConstFloatVectorDataPtr vKnot, float vMin, float vMax, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>patchMesh</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a114e80dbb026ee3fc9b48a280ef303e6</anchor>
      <arglist>(const CubicBasisf &amp;uBasis, const CubicBasisf &amp;vBasis, int nu, bool uPeriodic, int nv, bool vPeriodic, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>geometry</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a321538d4da086ca2a0fcfeecbd46dc6f</anchor>
      <arglist>(const std::string &amp;type, const CompoundDataMap &amp;topology, const PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>procedural</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a43ba2542139bcff3e810b6ce5aa1c2e9</anchor>
      <arglist>(ProceduralPtr proc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceBegin</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>aa4ce443cbc45b2e4872a328c12c1a773</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceEnd</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a4f6fcce0a1fb7ea40a364a923a8cdf99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instance</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a6e9c25b567f0e8df2f07ae1271eac86a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataPtr</type>
      <name>command</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>ac0128793329d9de098d075c55075dfff</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>ConstGroupPtr</type>
      <name>world</name>
      <anchorfile>classIECore_1_1CapturingRenderer.html</anchorfile>
      <anchor>a654b7a8fdda0df14037c8d0ee62fe80c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ChannelOp</name>
    <filename>classIECore_1_1ChannelOp.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelOp</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>a08bf45a8f0ca87708248d27d0b87fdd8</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>a729f9b81ab8bc714d552470cb1da4640</anchor>
      <arglist>(ChannelOp, ImagePrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>a0ceb93de30fb3cd5dc33c10d0aeb348c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>a168286ba5cf7da78037568d71fbad4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; FloatVectorDataPtr &gt;</type>
      <name>ChannelVector</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>aed7ecb2a9c0633e4c460f620f032cb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1ChannelOp.html</anchorfile>
      <anchor>ae268c66b7e9b4d4a4408da9e1ac3caf8</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CineonToLinearDataConversion</name>
    <filename>classIECore_1_1CineonToLinearDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>LinearToCineonDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>a247f7549dbfc85ffc318c21a73b206db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>a4a0e264e5fad3b6a9cb98a68b239c89b</anchor>
      <arglist>(sizeof(F) &gt;=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>a48e71b27db8d7db45454e43bd01348f4</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CineonToLinearDataConversion</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>a0abaa638723c930d443f56bb0740411c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CineonToLinearDataConversion</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>ae75bd85aeeffc8ca6cb1b0b68c627fb3</anchor>
      <arglist>(float filmGamma, int refWhiteVal, int refBlackVal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>a126add223d9b5839c43d1eee0965a873</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1CineonToLinearDataConversion.html</anchorfile>
      <anchor>aedc8601871f7ead1f3f059d4c7f2fd1e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CineonToLinearOp</name>
    <filename>classIECore_1_1CineonToLinearOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a7007c372f96f82953ff455e7d2f0b7d9</anchor>
      <arglist>(CineonToLinearOp, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>filmGammaParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>aa961f1595fd7ca0bb6774820440b61e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>filmGammaParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a53156c730b07a7ea08eb3ca5fa93b034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>refWhiteValParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a4d763d3dc31f884b65e36d3b30b20c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>refWhiteValParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a1c15e51358ee846b4f886257b69f860d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>refBlackValParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a282ae06445cbd63491fb59843279b460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>refBlackValParameter</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a5905db3c3110cc8c361cab11ba9f8ef3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompoundParameterPtr</type>
      <name>createCineonSettings</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a52caf508a3087a1e3422d6e82837afd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>adcbc48b4f6633f392731408af71502b0</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_filmGamma</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>a3128a47ff769cb1e140b746b5da23ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_refWhiteVal</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>abd6cfdb96f0fa12c78211071c8c20a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_refBlackVal</name>
      <anchorfile>classIECore_1_1CineonToLinearOp.html</anchorfile>
      <anchor>ae6c08b9a99d11599d9a7645a9a5d8ab1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CINImageReader</name>
    <filename>classIECore_1_1CINImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>aceae33647cc2b20e0dcdb880526e1d31</anchor>
      <arglist>(CINImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CINImageReader</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>ac6c29ddf6cc9ad8fc249176649af590d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>a090d41a2518ac6c901e3a18a1f157928</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>a74adca4cfd780de67743ab9bce62ea9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>a519d295c599d8ab6ec3ce16e6d37f682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>a0e22df8d29238a1e0d7c9aac06fdddfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>ae8281168452f33b35feeb0463f9e2515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1CINImageReader.html</anchorfile>
      <anchor>a89bde61b3b3390f09a0a0ac21af7f0b9</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CINImageWriter</name>
    <filename>classIECore_1_1CINImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>CINImageWriter</name>
      <anchorfile>classIECore_1_1CINImageWriter.html</anchorfile>
      <anchor>ab6be719fe0c09698a6f658f61d7625d4</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1CINImageWriter.html</anchorfile>
      <anchor>ab8118efcad1fc2d2a7ead252678d1e87</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CircularIterator</name>
    <filename>classIECore_1_1CircularIterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Iterator</type>
      <name>BaseIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a9c0a7d2d5720c1e41da7a6739f39caeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseIterator::pointer</type>
      <name>pointer</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>aa62e7ecbb36a3b93a242c4cca78a5d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseIterator::reference</type>
      <name>reference</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a88769eb30f35dd707f17a7f76ce5ed14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseIterator::value_type</type>
      <name>value_type</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>aa177f0138439d8aa67224991ecda516f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>ae4be9068790e3d547f0b8b56a2632b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a31c61579f62474ebe8a5deb34db045e1</anchor>
      <arglist>(BaseIterator begin, BaseIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a204328178a7f16c0cb53c44f47e13741</anchor>
      <arglist>(BaseIterator begin, BaseIterator end, BaseIterator position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a3504e48ea20b69d715e7aa1a278cb67a</anchor>
      <arglist>(Container *container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a1230f691812ab8828bb55cc7e5943c09</anchor>
      <arglist>(Container *container, BaseIterator position)</arglist>
    </member>
    <member kind="function">
      <type>CircularIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>acd3a3c0ed686ba0d9bc5c546190fbe76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CircularIterator</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a9788008b1f78a8afb85c219f2add8d5d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a071cee5870ddb7c7c18371062fda7bd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a264d188fc701364ba727d14b2741fab4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a766f41a18ed4acbbff88b7d42ddcbcaf</anchor>
      <arglist>(const CircularIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>aaa9baacfbe314efee558e38919da4d89</anchor>
      <arglist>(const BaseIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>ac1404ef1278ea8827479ec1e5a2094fe</anchor>
      <arglist>(const CircularIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a8d60a4606e9b7d3738d60a8e76bd53b8</anchor>
      <arglist>(const BaseIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator BaseIterator</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a9f0c9f24a196af61f9f881fba648dcfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CircularIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1CircularIterator.html</anchorfile>
      <anchor>a170e198b11a806556b9c9dba223df336</anchor>
      <arglist>(const BaseIterator &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ClassData</name>
    <filename>classIECore_1_1ClassData.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ClassTypeT</type>
      <name>ClassType</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>a5ee95e7c2716ab7c04c6cfdb68ef31e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DataTypeT</type>
      <name>DataType</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>a65977eabea04be229c12dde4ae6f82f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DataDeletePolicyT</type>
      <name>DataDeletePolicy</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>a417d1620c69e9104e4451ed2d703d5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassData</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>af2d680025721ae9ddcf89b12cf781086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataType &amp;</type>
      <name>create</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>ab4daa9cac221828eb5ea6b70d485b5ad</anchor>
      <arglist>(const ClassType *classOwner)</arglist>
    </member>
    <member kind="function">
      <type>DataType &amp;</type>
      <name>create</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>af41b649ae628304c2ddda14a23be1ba1</anchor>
      <arglist>(const ClassType *classOwner, const DataType &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const DataType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>a2e80237e45aaf66bfc2c3d7b6fc9acda</anchor>
      <arglist>(const ClassType *classOwner) const </arglist>
    </member>
    <member kind="function">
      <type>DataType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>ab846e02fdc1b8f9ff5db315d9670a7f3</anchor>
      <arglist>(const ClassType *classOwner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>af2c54552100a0bcbf6e04a38394fccf1</anchor>
      <arglist>(const ClassType *classOwner)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; const ClassType *, DataType &gt;</type>
      <name>ClassDataMap</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>a2ca4c1e93cb569cbdf7456738cf68aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClassDataMap</type>
      <name>m_classDataMap</name>
      <anchorfile>classIECore_1_1ClassData.html</anchorfile>
      <anchor>ac86c9f6d848d30868a4cb6ba9f719068</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ClientDisplayDriver</name>
    <filename>classIECore_1_1ClientDisplayDriver.html</filename>
    <base>IECore::DisplayDriver</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>ac2864116aac892cb3152ef17e7af5c15</anchor>
      <arglist>(ClientDisplayDriver, DisplayDriver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClientDisplayDriver</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a47cf6aa6344d6f3dbea90bcb76b59e9c</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, const std::vector&lt; std::string &gt; &amp;channelNames, ConstCompoundDataPtr parameters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a70a859b533c8f9057fbdfd77312ac382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>port</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a5b606072eebb2705506e3ba51f54160d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>scanLineOrderOnly</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a98909a81052a1c8eac070bed0150f978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>imageData</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a770d508ae55cca4ffc79997f25be99c0</anchor>
      <arglist>(const Imath::Box2i &amp;box, const float *data, size_t dataSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>imageClose</name>
      <anchorfile>classIECore_1_1ClientDisplayDriver.html</anchorfile>
      <anchor>a1f774d6f4baa56509c41cc53f878421d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ColorSpaceTransformOp</name>
    <filename>classIECore_1_1ColorSpaceTransformOp.html</filename>
    <member kind="typedef">
      <type>std::string</type>
      <name>InputColorSpace</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>acf7ff1184b84bef2fa74852338e86b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>OutputColorSpace</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a6f635155bc61e66ffa9fc22b6bb5cf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ModifyOpPtr(const InputColorSpace &amp;, const OutputColorSpace &amp;)&gt;</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a42954b2660449ca8d0e9cfbd091b1761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a933e3d58893adee4b4071aa60afc4a8a</anchor>
      <arglist>(ColorSpaceTransformOp, ImagePrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>inputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>af6a4f8099f435d1d2766a525a2968b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>inputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a3da8a87a86cbe63f2d5843e086a396d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>outputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a2e1319f49a821a5cc87237336b226d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>outputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>af7d048ffcaad5ac19a447c121a0afdf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelsParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a467906d59d6a7ff95d8a2fbd402961a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelsParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a2cd4d41a53717d01bfb865fb8866240f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>alphaPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a23ec78d4fe448872ed8715feb1515c39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>alphaPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a946971be978c00d0c79922895f40d473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>premultipliedParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a341cc7f80c31c602efdb058a3695c32a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>premultipliedParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>ad159fe462fb627ffeb3c4f6fad11c4f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerConversion</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>ae23213eb7c4232dc2d9f3e0874bdfa76</anchor>
      <arglist>(const InputColorSpace &amp;, const OutputColorSpace &amp;, const CreatorFn &amp;creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inputColorSpaces</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>afc82f10dda5f35b8e6e9b8012b696b2f</anchor>
      <arglist>(std::vector&lt; InputColorSpace &gt; &amp;colorSpaces)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>outputColorSpaces</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a4187f8dd8d4668a848efe763da031ad3</anchor>
      <arglist>(std::vector&lt; OutputColorSpace &gt; &amp;colorSpaces)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>colorSpaces</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a80fcb6516f2410368bac1f3404dd6453</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;colorSpaces)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; InputColorSpace, OutputColorSpace &gt;</type>
      <name>Conversion</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a99eb093eaaf625129dab72d7e0f9cbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::tuple&lt; CreatorFn *, InputColorSpace, OutputColorSpace &gt;</type>
      <name>ConversionInfo</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>afd5efff7adde96b2659c83f5d7fd7e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::multimap&lt; InputColorSpace, ConversionInfo &gt;</type>
      <name>ConvertersMap</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a22db5bc8912eb9807560efae000e8008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; CreatorFn *, Conversion &gt;</type>
      <name>ConverterTypesMap</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>ac2250c28f6ee3b84e1e96e5d701759dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Conversion &gt;</type>
      <name>ConversionsSet</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a9724c56948e7c35273c744ec562cef8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findConversion</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a34e03da9770c780b8fd50edc07acda3f</anchor>
      <arglist>(const InputColorSpace &amp;, const OutputColorSpace &amp;, std::vector&lt; ConversionInfo &gt; &amp;conversions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findConversion</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a688748a350761e9dc24482cbfbefa704</anchor>
      <arglist>(const InputColorSpace &amp;, const OutputColorSpace &amp;, std::set&lt; Conversion &gt; &amp;visitedConversions, std::vector&lt; ConversionInfo &gt; &amp;currentConversion, std::vector&lt; ConversionInfo &gt; &amp;bestConversion)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a0fbda9c069b5a3109e5fdb9588093b5a</anchor>
      <arglist>(ImagePrimitive *image, const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConvertersMap &amp;</type>
      <name>converters</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a9d934806ca991faf04443301e4be7723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConverterTypesMap &amp;</type>
      <name>converterTypes</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a9934c9664d582ffe01d7dd4fa1956844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConversionsSet &amp;</type>
      <name>conversionsSet</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>af2e0a64cdd51e0b8d69d11aeea44d3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_inputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>aa01c72115c7d360bad59b4f6915dbad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_outputColorSpaceParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a78e7a0e29cbf63614db38dc2aa08c13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVectorParameterPtr</type>
      <name>m_channelsParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a8fdc4ebd57a7bcbfe6355c3bfb6b7fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_alphaPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>aeae8ef57a473946f36cec275f417dbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolParameterPtr</type>
      <name>m_premultipliedParameter</name>
      <anchorfile>classIECore_1_1ColorSpaceTransformOp.html</anchorfile>
      <anchor>a7221a95f9a16e534530e504877529ccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::ColorTransform</name>
    <filename>structIECore_1_1ColorTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>F</type>
      <name>FromType</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>af93c71f36ccd027e1aaeb88b9a2a4cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ToType</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>a2708888639f664fc8c0f3163d1fabf29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>ad97199fe92c9a7ee12316d2d5bbf6ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>ade2a8cdf0261b3ac10082131d8bb4a77</anchor>
      <arglist>((TypeTraits::IsColor3&lt; F &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>a473260bab59947d2d33a53f14e6f0eeb</anchor>
      <arglist>((TypeTraits::IsColor3&lt; T &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>a5c796ab50766ab7f4ae1aadde53676de</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>a03e6337e1b7bbccb93c4a2abaa3675aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>structIECore_1_1ColorTransform.html</anchorfile>
      <anchor>a29b1a37cbc680d7a43fbfdcbb72b733a</anchor>
      <arglist>(const F &amp;f)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ColorTransformOp</name>
    <filename>classIECore_1_1ColorTransformOp.html</filename>
    <base>IECore::PrimitiveOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a6bfaf4fb7c0813b56fe7b3b38ef2a832</anchor>
      <arglist>(ColorTransformOp, PrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorTransformOp</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a8a7104042b2f80ea4998c21eb99cf985</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>colorPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a5809968a522b45a8fb69c16c66d882c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>colorPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a7296f261b0fe243532d6369832b44101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>redPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a91510d51ad1286defc5650abafd4808d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>redPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a470262f5b176b339df64b311da6e4fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>greenPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a10b76c5eb7f626484768ec98eab85146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>greenPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>af7038d25726f1196450507455d3c3d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>bluePrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>adf4b7d8d2ad2998e731173dc55402da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>bluePrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a03da1eaebac81af482b9b5d61d36777a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>alphaPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>ac1df44f395b3547d5b2ee4c55236a683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>alphaPrimVarParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a00bddb40be5bd82d5dafff4d1e274fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>premultipliedParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>acf65913a6f385f1653687274e808fac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>premultipliedParameter</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>ac85bb3335d2f6377dfe7517b42e3ef6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>ab750b6be408ec565e7ac0534686ab48b</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a341cfa75bd7abd74df3b66b01311a831</anchor>
      <arglist>(Imath::Color3f &amp;color) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classIECore_1_1ColorTransformOp.html</anchorfile>
      <anchor>a86a6f53312ce1b5a33f5f718a18cff88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundData</name>
    <filename>classIECore_1_1CompoundData.html</filename>
    <base>TypedData&lt; CompoundDataMap &gt;</base>
    <member kind="function">
      <type></type>
      <name>CompoundData</name>
      <anchorfile>classIECore_1_1CompoundData.html</anchorfile>
      <anchor>a468831c92220621b5ccd2c7055fb3612</anchor>
      <arglist>(const CompoundDataMap &amp;members)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1CompoundData.html</anchorfile>
      <anchor>a379ece87ae23f2a52bd22f9403b04915</anchor>
      <arglist>(CompoundData, CompoundDataBase)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundData.html</anchorfile>
      <anchor>a6703a05000ecdbfd71affdae82faf438</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions=false)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundData.html</anchorfile>
      <anchor>ab3a1df61f205fa0df615a1dfa617d188</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions=false) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundData.html</anchorfile>
      <anchor>a6c331f7978ecbb5487128e27b4c17c81</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions, bool createIfMissing)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundDataConversion</name>
    <filename>classIECore_1_1CompoundDataConversion.html</filename>
    <templarg>C1</templarg>
    <templarg>C2</templarg>
    <base>DataConversion&lt; C1::FromType, C2::ToType &gt;</base>
    <member kind="typedef">
      <type>CompoundDataConversion&lt; typename C2::InverseType, typename C1::InverseType &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>a82fdcbc52688f4da196bfbc4d484af17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>ac7f035b65f4100a8465dca8559d5c92e</anchor>
      <arglist>((boost::is_same&lt; typename C1::ToType, typename C2::FromType &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundDataConversion</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>ab6f94e3dacdc4bf2c9e848280b99ab6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundDataConversion</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>adc8ae7a939a9b92e40214a18df5f4306</anchor>
      <arglist>(const C1 &amp;c1, const C2 &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>CompoundDataConversion&lt; C1, C2 &gt;::ToType</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>aa02a00961722fffeb64c427770a38cc3</anchor>
      <arglist>(typename CompoundDataConversion&lt; C1, C2 &gt;::FromType f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>a1ec0931398ff39e49e7f52515f0e50be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>C1</type>
      <name>m_c1</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>a4cb2125ffc44cfb2efff8f7007bddde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>C2</type>
      <name>m_c2</name>
      <anchorfile>classIECore_1_1CompoundDataConversion.html</anchorfile>
      <anchor>ac5fcb031127a59631b335332b82dbb22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundFrameList</name>
    <filename>classIECore_1_1CompoundFrameList.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>acad8969f782d6e17030674cd79bf877a</anchor>
      <arglist>(CompoundFrameList, FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundFrameList</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a2fea3654137c9778b9e94b9ac293980e</anchor>
      <arglist>(const std::vector&lt; FrameListPtr &gt; frameLists)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FrameListPtr &gt; &amp;</type>
      <name>getFrameLists</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a31c3dd374092306b5cd25c083118a53c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; FrameListPtr &gt; &amp;</type>
      <name>getFrameLists</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a6cdab61b894be0a322968a5ee05ee7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameLists</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a8ed533af4a490c167ad3b41e0305de3e</anchor>
      <arglist>(const std::vector&lt; FrameListPtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a6cd4eb04b64ba45e64bdccd69b78fd58</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>ab86b6db944f884ed1934ed4f8c05906d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a197b1e3f8e32c6b975bd01bdafe9d7b3</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a549f87d3a834eca3ad62ea6629587d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>a34d2894d4f7c9ce7b49d724144610f26</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FrameListPtr &gt;</type>
      <name>m_frameLists</name>
      <anchorfile>classIECore_1_1CompoundFrameList.html</anchorfile>
      <anchor>aceeb4506b4fb9db7fbc11bda9016de23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundMessageHandler</name>
    <filename>classIECore_1_1CompoundMessageHandler.html</filename>
    <base>IECore::MessageHandler</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1CompoundMessageHandler.html</anchorfile>
      <anchor>a84620d260aed9df0fe8818adc2e1975a</anchor>
      <arglist>(CompoundMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundMessageHandler</name>
      <anchorfile>classIECore_1_1CompoundMessageHandler.html</anchorfile>
      <anchor>ad3a326ee5ece236d46a1fc4948e129e5</anchor>
      <arglist>(const std::set&lt; MessageHandlerPtr &gt; &amp;initialHandlers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1CompoundMessageHandler.html</anchorfile>
      <anchor>a8ecbaeed4acd5107f0e527dbcc5bd5db</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; MessageHandlerPtr &gt;</type>
      <name>handlers</name>
      <anchorfile>classIECore_1_1CompoundMessageHandler.html</anchorfile>
      <anchor>ac673850708507c14001e96a25477be21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundObject</name>
    <filename>classIECore_1_1CompoundObject.html</filename>
    <base>IECore::Object</base>
    <member kind="typedef">
      <type>std::map&lt; InternedString, ObjectPtr &gt;</type>
      <name>ObjectMap</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a7bcc2e4840b1645925c1fd803a304ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a2f86159a63304735589d4ce93f684168</anchor>
      <arglist>(CompoundObject, Object)</arglist>
    </member>
    <member kind="function">
      <type>const ObjectMap &amp;</type>
      <name>members</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>aaf34a29d122caa5d124312121d44dcfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectMap &amp;</type>
      <name>members</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a70b08426fe6ea6e04cc7b0ce02c4a14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>af77b0b6d4b247fa5e608233960029c04</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions=false)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>af5ff8cd9504a3a13034559c47cd32a94</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions=false) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>member</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a3d8f517874a5a0350bb8fcb481ee5f44</anchor>
      <arglist>(const InternedString &amp;name, bool throwExceptions, bool createIfMissing)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompoundObject *</type>
      <name>defaultInstance</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a3490c4bdd9df0f2ea1a2b9808b323d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectMap</type>
      <name>m_members</name>
      <anchorfile>classIECore_1_1CompoundObject.html</anchorfile>
      <anchor>a162a63be8b554d6c4bd60a0bb149c0f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundParameter</name>
    <filename>classIECore_1_1CompoundParameter.html</filename>
    <base>IECore::Parameter</base>
    <member kind="typedef">
      <type>std::map&lt; InternedString, ParameterPtr &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a821f36b869b9e5f11d4b1963bd3bc65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ParameterPtr &gt;</type>
      <name>ParameterVector</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>af41fb760d95a6b3a11e553d955b67b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a7bcbe21671ba9e2cdb398413ca13d746</anchor>
      <arglist>(CompoundParameter, Parameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ab0355960e75e9bf5d3f0119e9acb9886</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;, const std::string &amp;description=&quot;&quot;, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a025c86c7de51c69f3e229f0115f1a8ef</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, I membersBegin, I membersEnd, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Object *</type>
      <name>defaultValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>aff5fd222f95e6dbf3abd1afbe4652dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const PresetsContainer &amp;</type>
      <name>presets</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a73492d9869965415206ab2ea325e5d25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>presetsOnly</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a882d3ee6ba4ae0e889862d56d28f6a00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a4382c930e9a688ad08ee33a7b5182e21</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a5f221856ade1c06e6a3dd41ed910918b</anchor>
      <arglist>(ObjectPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Object *</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>afda9bef22896f4e449e0582da8fef0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Object *</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a7e9308122245bf7dff36ca77c18cbfbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a887e726ba676ec032bee34523a296872</anchor>
      <arglist>(ParameterPtr parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParameters</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ab38cf4b042befe1ef18f4c31b353948a</anchor>
      <arglist>(I begin, I end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ac73752a73cd6a58b1d013938cf5b88a2</anchor>
      <arglist>(ParameterPtr parameter, ConstParameterPtr other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>acc3770aa3bca7b67a1d9f9f09c7628b6</anchor>
      <arglist>(ParameterPtr parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a06643bcd5efad77c50cfc8d35497d661</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearParameters</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a5f197eec92baabbe0e9727f703553ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParameterMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a5784bac340ab07b6858a534954442c39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ParameterVector &amp;</type>
      <name>orderedParameters</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ab88faf2ba940692e0aa06ba4f8b192bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>parameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a717aba9ceb9a517c5c79f3735ef647c0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>parameter</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a2563ba644c1bd5d1418623d7532b03fb</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parameterPath</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>a64d3b28e9d3be37f96e86bad02ab0914</anchor>
      <arglist>(const Parameter *child, std::vector&lt; std::string &gt; &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>afb0e3747307aa1bab04e2c3e6710ecba</anchor>
      <arglist>(const std::string &amp;name, ObjectPtr value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidatedParameterValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>afd82d0a51465e0e914cf24c71ce19939</anchor>
      <arglist>(const std::string &amp;name, ObjectPtr value)</arglist>
    </member>
    <member kind="function">
      <type>Object *</type>
      <name>getParameterValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ae21690926331fa95521bab9ae8471d19</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Object *</type>
      <name>getValidatedParameterValue</name>
      <anchorfile>classIECore_1_1CompoundParameter.html</anchorfile>
      <anchor>ae4f32dbf3d5557bc03e29f6d25eb6dc8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompressSmoothSkinningDataOp</name>
    <filename>classIECore_1_1CompressSmoothSkinningDataOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CompressSmoothSkinningDataOp.html</anchorfile>
      <anchor>ad76c0647aacef4253290d5d31e913b44</anchor>
      <arglist>(CompressSmoothSkinningDataOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1CompressSmoothSkinningDataOp.html</anchorfile>
      <anchor>a3d535bdbc26ce686460b642d8d282fe4</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ContrastSmoothSkinningWeightsOp</name>
    <filename>classIECore_1_1ContrastSmoothSkinningWeightsOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ContrastSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>ac0c79a6b7f6054d189af741d1309cfea</anchor>
      <arglist>(ContrastSmoothSkinningWeightsOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1ContrastSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>a7ebfadaf1a7c0d899d138cdfc76c31f4</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Converter</name>
    <filename>classIECore_1_1Converter.html</filename>
    <base>IECore::Parameterised</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Converter.html</anchorfile>
      <anchor>a2089b37f6b12d98da0a83274c6ddae7f</anchor>
      <arglist>(Converter, Parameterised)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Converter</name>
      <anchorfile>classIECore_1_1Converter.html</anchorfile>
      <anchor>a304f9f3186c09a17357f4011455cf672</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CSGImplicitSurfaceFunction</name>
    <filename>classIECore_1_1CSGImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>abffc08f8fe76b5e915459da1d243178d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>aad61e224723041b66d80d2b0360e156c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a1a2b92f6f92dc0d6db62924f314b3892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a653235c50918aa01f0e72ec6a283b5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a3ebc11e437724abb1dd7eb82f8351643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a00e54654ba3ac6fdef30dbbc7e067eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; P, V &gt;</type>
      <name>Fn</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a49dbe97333fb230dc8c89c7e03575fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>ad84e87193010f7058ca9ecbbb5d98699</anchor>
      <arglist>(CSGImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSGImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>aa0b13277fc4c4805c334c2637af213d6</anchor>
      <arglist>(typename Fn::Ptr fn1, typename Fn::Ptr fn2, Mode mode)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>acbe0ee2605b32ed3fd8c6e8f40eaf588</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a544daad0c491110d8aafc8ea349f1e47</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Fn::Ptr</type>
      <name>m_fn1</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>a3f164757e9c1a5ffd62f2bef4f12cffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Fn::Ptr</type>
      <name>m_fn2</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>aa7912630fd27b756c7fd65e6963e7e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mode</type>
      <name>m_mode</name>
      <anchorfile>classIECore_1_1CSGImplicitSurfaceFunction.html</anchorfile>
      <anchor>ac29185b87d9e4ddfebc20ba8d178c3eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CubeColorLookup</name>
    <filename>classIECore_1_1CubeColorLookup.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a392deaa1b60c064e3d6e4ac497c61159</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Imath::Color3&lt; T &gt; &gt;</type>
      <name>DataType</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a0f66e8d3f32bfa84fc9ae501bf794524</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>VecType</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>adb9d5a1e0c2314d1cf70c5902ddb0a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Box&lt; VecType &gt;</type>
      <name>BoxType</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a7396d2d1bc87375fccbb2a05e6c1700e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Color3&lt; T &gt;</type>
      <name>ColorType</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a1d1c07d6d906c405f4f39921a8cfb29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubeColorLookup</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a72b390ece61397d960fe940d0a68f450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubeColorLookup</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a3889fdd1be069d23363483ac143a8af2</anchor>
      <arglist>(const Imath::V3i &amp;dimension, const DataType &amp;data, const BoxType &amp;domain=BoxType(VecType(0, 0, 0), VecType(1, 1, 1)), Interpolation interpolation=Linear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolation</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a3b6fbf224e5a9e3170fcd42c7ba879c4</anchor>
      <arglist>(Interpolation i)</arglist>
    </member>
    <member kind="function">
      <type>ColorType</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>aa97c4be721abb71b87dfa10c8e47a135</anchor>
      <arglist>(const ColorType &amp;color) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCube</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>aaeaceadd1ec03ac81167f9c352e53391</anchor>
      <arglist>(const Imath::V3i &amp;dimension, const DataType &amp;data, const BoxType &amp;domain=BoxType(VecType(0, 0, 0), VecType(1, 1, 1)))</arglist>
    </member>
    <member kind="function">
      <type>const Imath::V3i &amp;</type>
      <name>dimension</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a8499f9e458ef9deb69c6df1af79d284e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxType &amp;</type>
      <name>domain</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a05c7564ab5a0d6400a39ed29c37c2abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DataType &amp;</type>
      <name>data</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a6dd7fc0f71f06ac23a3ea5b4d906589c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Interpolation</type>
      <name>getInterpolation</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a70f44df18d6f9cc6978e3cb6f22ef4eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a7a113f9f481ad58ff2272b5f2b6a7662</anchor>
      <arglist>(const CubeColorLookup &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a6b35b6d5c4136819d19e6104db2fa291</anchor>
      <arglist>(const CubeColorLookup &amp;rhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VecType</type>
      <name>normalizedCoordinates</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a2d950173dd292bc982c6df5443753007</anchor>
      <arglist>(const ColorType &amp;color) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>clamp</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>acc4969930378b93d0b54d66f6f33a04e</anchor>
      <arglist>(int v, int min, int max) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imath::V3i</type>
      <name>m_dimension</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a4f0e36a0fc4e76a5678a0454852ee4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoxType</type>
      <name>m_domain</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a23fb5932f88dc6f52cedcf2ad12761b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataType</type>
      <name>m_data</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a4f8b9749c18a06389b06d81386026958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolation</type>
      <name>m_interpolation</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>acd52f70a5f8558ebda479f9034f0b9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TypedData&lt; CubeColorLookup&lt; T &gt; &gt;</name>
      <anchorfile>classIECore_1_1CubeColorLookup.html</anchorfile>
      <anchor>a4bbb4bb939f6bbc499349fa57a4c68f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CubicBasis</name>
    <filename>classIECore_1_1CubicBasis.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>abf85f4a6abc771369a46aee57fc36c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Matrix44&lt; T &gt;</type>
      <name>MatrixType</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a46332c2118e9ae96d164a62fa1be3b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBasis</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a024aad08179e784c1c441d0720f18463</anchor>
      <arglist>(const MatrixType &amp;m, unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ad5eb3b8ea1d0f2ad8cb30c60caa86559</anchor>
      <arglist>(S t, S &amp;c0, S &amp;c1, S &amp;c2, S &amp;c3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a4729f30d60cca55ff58cd516ff75452d</anchor>
      <arglist>(S t, S c[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a2f8168ab5842959310223d570acb62ab</anchor>
      <arglist>(S t, S p0, S p1, S p2, S p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a2ab2ac8e23dd2b24138646fdc2a42dbe</anchor>
      <arglist>(S t, const S p[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a039bbd61a1bece077eb01a39b6657596</anchor>
      <arglist>(typename S::BaseType t, const S &amp;p0, const S &amp;p1, const S &amp;p2, const S &amp;p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a310afa6e49bd819328ad3adfb0f52ed4</anchor>
      <arglist>(typename S::BaseType t, const S p[4]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>adbdeaab7740a6e6e4f119b7cb6e11098</anchor>
      <arglist>(const CubicBasis &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a582782141cde3db38c49dd96b1a69f73</anchor>
      <arglist>(const CubicBasis &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivativeCoefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a29daa6c8edd5e5e01340d1c5409b2bd8</anchor>
      <arglist>(S t, S &amp;c0, S &amp;c1, S &amp;c2, S &amp;c3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivativeCoefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a5ff689b043401fe8d384d1510c06d492</anchor>
      <arglist>(S t, S c[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>derivative</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a4db08728fe42b0cae97dc34072ae9f7e</anchor>
      <arglist>(S t, S p0, S p1, S p2, S p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>derivative</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ac00f0b363308c362136f38f148f8b125</anchor>
      <arglist>(S t, const S p[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>derivative</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a6eb2110321a2eaf7432f2741d54e543c</anchor>
      <arglist>(typename S::BaseType t, const S &amp;p0, const S &amp;p1, const S &amp;p2, const S &amp;p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>derivative</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a6f3c707005716e020fe5b6f905052267</anchor>
      <arglist>(typename S::BaseType t, const S p[4]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integralCoefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a363d4d096aa5a2b7b9b5196d0a9734f4</anchor>
      <arglist>(S t0, S t1, S &amp;c0, S &amp;c1, S &amp;c2, S &amp;c3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integralCoefficients</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ad062b16442c4db68379a8b3bc999aeb8</anchor>
      <arglist>(S t0, S t1, S c[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a0d13d27d99b95b9029e05b43c9afe20d</anchor>
      <arglist>(S t0, S t1, S p0, S p1, S p2, S p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a46c19f2556ea49c5a922aa0e99f1ac91</anchor>
      <arglist>(S t0, S t1, const S p[4]) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ab4268e48e9f76470d271994c67309834</anchor>
      <arglist>(typename S::BaseType t0, typename S::BaseType t1, const S &amp;p0, const S &amp;p1, const S &amp;p2, const S &amp;p3) const </arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ada36b7d13ca6ceef689026bff536d37a</anchor>
      <arglist>(typename S::BaseType t0, typename S::BaseType t1, const S p[4]) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CubicBasis &amp;</type>
      <name>linear</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a208892bd4e92d9439ed4c8c0e31e3e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CubicBasis &amp;</type>
      <name>bezier</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a52d26ae49a015a2549fd2e58617b2b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CubicBasis &amp;</type>
      <name>bSpline</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>a0435e14dba269de1b6c7958a7132eee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CubicBasis &amp;</type>
      <name>catmullRom</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>ade680cd65101bd2dbbe8a1a5b311325f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MatrixType</type>
      <name>matrix</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>aeffac84c52060043039acef1b7b595de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>step</name>
      <anchorfile>classIECore_1_1CubicBasis.html</anchorfile>
      <anchor>af4df86b186a4ca32ef7e9ec697c060c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurveExtrudeOp</name>
    <filename>classIECore_1_1CurveExtrudeOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>a2519e1661e954fd231c9888631d3c089</anchor>
      <arglist>(CurveExtrudeOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>CurvesPrimitiveParameter *</type>
      <name>curvesParameter</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>a166ef25d47c103f70bce78177a282628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CurvesPrimitiveParameter *</type>
      <name>curvesParameter</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>af0b7ceaadab63470f1cb2551e48210ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>aa28db2c8266d7bf8c06efc9d23e2473e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>afa525dfa744da7ec22269b0caa90bfcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>a099bdc3ba4bf1d85d87c21962d6aa2f4</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildReferenceFrames</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>a00ef0712f7e4c76d28250b058c2939a1</anchor>
      <arglist>(const std::vector&lt; Imath::V3f &gt; &amp;points, std::vector&lt; Imath::V3f &gt; &amp;tangents, std::vector&lt; Imath::M44f &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PatchMeshPrimitivePtr</type>
      <name>buildPatchMesh</name>
      <anchorfile>classIECore_1_1CurveExtrudeOp.html</anchorfile>
      <anchor>a065d5c660a3b0977febcf83fb421a200</anchor>
      <arglist>(const CurvesPrimitive *curves, unsigned curveIndex, unsigned vertexOffset, unsigned varyingOffset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurveLineariser</name>
    <filename>classIECore_1_1CurveLineariser.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurveLineariser.html</anchorfile>
      <anchor>ae4d81556a7c231e16d0922a5288e99da</anchor>
      <arglist>(CurveLineariser, CurvesPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>verticesPerSegmentParameter</name>
      <anchorfile>classIECore_1_1CurveLineariser.html</anchorfile>
      <anchor>a0bfc31c2afeb3abd409b8db3b0891294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>verticesPerSegmentParameter</name>
      <anchorfile>classIECore_1_1CurveLineariser.html</anchorfile>
      <anchor>a4deff7ebeabbbc7c3cab7783151250b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1CurveLineariser.html</anchorfile>
      <anchor>a83fb18333ab082e784f7a7985adeafcf</anchor>
      <arglist>(CurvesPrimitive *curves, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurvesMergeOp</name>
    <filename>classIECore_1_1CurvesMergeOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurvesMergeOp.html</anchorfile>
      <anchor>aa69ca198d37d8a8279216d7f3c64be79</anchor>
      <arglist>(CurvesMergeOp, CurvesPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>CurvesPrimitiveParameter *</type>
      <name>curvesParameter</name>
      <anchorfile>classIECore_1_1CurvesMergeOp.html</anchorfile>
      <anchor>a942f7bdf089a14d17d84239f0cc15f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CurvesPrimitiveParameter *</type>
      <name>curvesParameter</name>
      <anchorfile>classIECore_1_1CurvesMergeOp.html</anchorfile>
      <anchor>a18ffbe7b344d40804bceec8135537a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1CurvesMergeOp.html</anchorfile>
      <anchor>abc88c394a286bc775858e49b18465c50</anchor>
      <arglist>(CurvesPrimitive *curves, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurvesPrimitive</name>
    <filename>classIECore_1_1CurvesPrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>CurvesPrimitive</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>aee46a79358720b0ae0cd31d142d52165</anchor>
      <arglist>(ConstIntVectorDataPtr vertsPerCurve, const CubicBasisf &amp;basis=CubicBasisf::linear(), bool periodic=false, ConstV3fVectorDataPtr p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ad6c5fafc154e81c9fa50b37fa7b8acfa</anchor>
      <arglist>(CurvesPrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCurves</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a5ca611af966aec62249aeecfdb9a23f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>verticesPerCurve</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>afc4d69a2b05b2e43fb39badd395738ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CubicBasisf &amp;</type>
      <name>basis</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a3aa5799b439a7f50c9335167bb9b6dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>periodic</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a11d5ac655a540e478b86cce3dc218574</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTopology</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a5b184a765d51ed9c4f1af0adfc2c8657</anchor>
      <arglist>(ConstIntVectorDataPtr verticesPerCurve, const CubicBasisf &amp;basis, bool periodic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a9d01e9e424c8d2f4249bc5beacdb4e27</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ad11ec2e1a9b004a2b69ede65067a700a</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ad4b80ac2d29b4a7c267d162726c136de</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation, unsigned curveIndex) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numSegments</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a14658a26b94e9bb4f2f80a365189b5f9</anchor>
      <arglist>(unsigned curveIndex) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>numSegments</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ad9019c620b570d76e4bcb2c99e772ee2</anchor>
      <arglist>(const CubicBasisf &amp;basis, bool periodic, unsigned numVerts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createBox</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a1a3bbd95430363d7f7e3586e20883201</anchor>
      <arglist>(const Imath::Box3f &amp;b)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static unsigned int</type>
      <name>numSegments</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a15c945e38aaba8a54cc35dd6fefb29cc</anchor>
      <arglist>(bool linear, int step, bool periodic, int numVerts)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CubicBasisf</type>
      <name>m_basis</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a9938c89a41f7d68665012952736ecce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_linear</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ad7516afffc4c788f857f91c0b3759e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_periodic</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>acf4baf8d86e3335dfb3327037523c552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVectorDataPtr</type>
      <name>m_vertsPerCurve</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ae4fa274c560ebf721d3d5afc2bf57a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_numVerts</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>ab225d008a605e8555aa05c4d8eb25d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_numFaceVarying</name>
      <anchorfile>classIECore_1_1CurvesPrimitive.html</anchorfile>
      <anchor>a3c72f590d802e6e12aba09f7c4c0ccdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurvesPrimitiveEvaluator</name>
    <filename>classIECore_1_1CurvesPrimitiveEvaluator.html</filename>
    <base>IECore::PrimitiveEvaluator</base>
    <member kind="typedef">
      <type>CurvesPrimitive</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>afa297ee3d3ee02ae0c9a7aa02912c4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a13d1eff0c4aeff9fe92e2ddc79b1f925</anchor>
      <arglist>(CurvesPrimitiveEvaluator, PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a428506c0640a67215a310f53983d9430</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvesPrimitiveEvaluator</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>af69156f56c7dd4e75c1f503956762f8f</anchor>
      <arglist>(ConstCurvesPrimitivePtr curves)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a7e089aa6e49fc94c07465f268733922b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrimitiveEvaluator::ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a27be3ef72c97ca1e3715426d82fd65d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>af6f4d5434123090f8faa97304feed6dd</anchor>
      <arglist>(PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>abdd303af636ba2b950ac1d5bf18d6121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a57fb7e56413b96120428169d3b663b1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a6a7c3fab52a21688a2f5da269c412776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>ad3817c0352b4894c7a79336a32afce08</anchor>
      <arglist>(const Imath::V3f &amp;p, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a3bc932210b6bf744ab27e67968970453</anchor>
      <arglist>(const Imath::V2f &amp;uv, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>aa3355913479aa369e5fa624b0d0b1f21</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, PrimitiveEvaluator::Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>af3bdbe26360a08db90c778294453fb96</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pointAtV</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a02771fc36ac991ad1109fa8833904b6a</anchor>
      <arglist>(unsigned curveIndex, float v, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>curveLength</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>aea944e0d4f1070734b157ff8143d8671</anchor>
      <arglist>(unsigned curveIndex, float vStart=0.0f, float vEnd=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>verticesPerCurve</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>ac0d2864502107623f6c3afeeb80d9bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>vertexDataOffsets</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a6a3f0a4e2886f210654f0e38acc2cd5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>varyingDataOffsets</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a3e8833d253fe4fd251ca65ddfe20d9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>ad1fa7e6295b5165a81402ff9b90980a9</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static PrimitiveEvaluator::Description&lt; CurvesPrimitiveEvaluator &gt;</type>
      <name>g_evaluatorDescription</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>af30368a60e7a82b7a83b12a5ee5545c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrimitiveEvaluator::Description&lt; CurvesPrimitiveEvaluator &gt;</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>a5caed138f315e23dc5dae80a5f9e6122</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Result</name>
      <anchorfile>classIECore_1_1CurvesPrimitiveEvaluator.html</anchorfile>
      <anchor>aeda2b0238e1d97468018d291a2180853</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurveTangentsOp</name>
    <filename>classIECore_1_1CurveTangentsOp.html</filename>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1CurveTangentsOp.html</anchorfile>
      <anchor>a2a19c7f58b94388d1b9105754c89d7df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1CurveTangentsOp.html</anchorfile>
      <anchor>a075acb46a9f3e8bc9fa4791cf616c13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurveTangentsOp.html</anchorfile>
      <anchor>a3bf0a134ca260cc6fd2d7f4528930e92</anchor>
      <arglist>(CurveTangentsOp, CurvesPrimitiveOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1CurveTangentsOp.html</anchorfile>
      <anchor>ab2be6760d143be855a3e2c40fc9577f5</anchor>
      <arglist>(CurvesPrimitive *curves, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CurveTracer</name>
    <filename>classIECore_1_1CurveTracer.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>ab154f23d3120355149f16fa53a41edc8</anchor>
      <arglist>(CurveTracer, Op)</arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>ac5e7c8f79988a3dd7268de31a6d4ee68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a15aafed84314ba44a6a1c3dd5c7fdb27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a3eab71af1db1fe314ff897193b00178b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a03221909962072083c60b3d61edc41dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>vertexMergeDistanceParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>af16b3d2473fc15d6ca5342a6ed4adf91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>vertexMergeDistanceParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a10bf4783a8e6e14189ca4f8dc345f28d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>minimumLengthParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a038596c14c8d2a2a6e78caf3276eaf8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>minimumLengthParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>acc6e66b8f519a1226a7aa264b21cfc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>colorParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a13c361287a1be9aa15f2fe76ee8c9a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>colorParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>ad217b4d680277658213d38f0023d4715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>outputTypeParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a183b056977f28e16934ede92de087c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>outputTypeParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>aff4b8cdc8344022855576b097ffb8d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>catmullRomStepParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a39f4f6d44b336bbb3820734ac711e896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>catmullRomStepParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>aff39c111bede6be28de06b2918ed3258</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>outputSpaceParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>afebf75c44b37aa09dbe93d8f48d1fad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>outputSpaceParameter</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a77ea2ceec24936cea3480aaf6c211651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1CurveTracer.html</anchorfile>
      <anchor>a2a0e9fe76a81babb7f44013465942023</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Data</name>
    <filename>classIECore_1_1Data.html</filename>
    <base>IECore::Object</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Data.html</anchorfile>
      <anchor>a493700dfae23000837f8a79876c78531</anchor>
      <arglist>(Data, Object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DataCastOp</name>
    <filename>classIECore_1_1DataCastOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>a606d3e7ba69e4d763131740a5be4d5fb</anchor>
      <arglist>(DataCastOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>objectParameter</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>a5e99fbcc3e790db83a0695c6eaa803f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>objectParameter</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>af0c309a94958755fe67a1fb13503012c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>a5482cfe98c18c8c3e03a42a3820166e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>a4af6ec7d81d4483ab5a60bc5b400da02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DataCastOp.html</anchorfile>
      <anchor>a6685427305a8d83b69dec952f1d916e2</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::DataConversion</name>
    <filename>structIECore_1_1DataConversion.html</filename>
    <templarg>F</templarg>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>FromType</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>ae40253331d7bf075f349803592563c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ToType</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>a824ba78fd8a86dfc02a0600f4d8b0665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>a87369492ef47a14af9f2d9ec010e6ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::false_type</type>
      <name>IsIdentity</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>acc9fb79dbb0c8fafdece587b565e2131</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>a22da58af624a2df08f88fe8b220ed112</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1DataConversion.html</anchorfile>
      <anchor>a624ed13ac351596c0bb9c30a52a3c241</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::DataConvert</name>
    <filename>structIECore_1_1DataConvert.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>To::Ptr</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1DataConvert.html</anchorfile>
      <anchor>a7efc9d6ecfa03e0d0918f39b3e9b0453</anchor>
      <arglist>(typename From::ConstPtr from)</arglist>
    </member>
    <member kind="function">
      <type>To::Ptr</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1DataConvert.html</anchorfile>
      <anchor>abd6ce26e80c57ef35f93c50c7cd4970a</anchor>
      <arglist>(typename From::ConstPtr from, Conversion &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DataConvertOp</name>
    <filename>classIECore_1_1DataConvertOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>a922f57d6d874b8178c402727006245c1</anchor>
      <arglist>(DataConvertOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>dataParameter</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>a404a3f7078cf922ab923298e0720a84f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>dataParameter</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>a0f4184dcc3f7bfac30591214aa631cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>ad6575cb386c6f419925b9bf4f93da560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>a24603dd3c966ccf0c9fba0c868c4a132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DataConvertOp.html</anchorfile>
      <anchor>afbbc777d1ab7ebd58437d251aae37e07</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DataInterleaveOp</name>
    <filename>classIECore_1_1DataInterleaveOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>a880cdfae774cf56f584ed10f16577931</anchor>
      <arglist>(DataInterleaveOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectVectorParameter *</type>
      <name>dataParameter</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>a5393bf4df6b2298de0713eeda687ff00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVectorParameter *</type>
      <name>dataParameter</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>a9fe2701b41a9adc491acc3dee98462ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>a747532a032128daac23d5acda27d9d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>targetTypeParameter</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>aba7cbda16310197760ffcc6c4a57d0ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DataInterleaveOp.html</anchorfile>
      <anchor>a62bf6982c30b7466fe3e859abdc53797</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DataPromoteOp</name>
    <filename>classIECore_1_1DataPromoteOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DataPromoteOp.html</anchorfile>
      <anchor>aa64f9b0b57f9391104ccc056dbcbdbb5</anchor>
      <arglist>(DataPromoteOp, Op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DataPromoteOp.html</anchorfile>
      <anchor>a2235da2226dc55dabe03b878df2f3d7f</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DecompressSmoothSkinningDataOp</name>
    <filename>classIECore_1_1DecompressSmoothSkinningDataOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DecompressSmoothSkinningDataOp.html</anchorfile>
      <anchor>ab3cb7a86f0165704de5ebf391bae8c97</anchor>
      <arglist>(DecompressSmoothSkinningDataOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1DecompressSmoothSkinningDataOp.html</anchorfile>
      <anchor>afa54c2ce090f0d9e8ab367d92e5e2b4c</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DeepImageConverter</name>
    <filename>classIECore_1_1DeepImageConverter.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DeepImageConverter.html</anchorfile>
      <anchor>a6406d0813dd13e41266ab5bf6d0a08e3</anchor>
      <arglist>(DeepImageConverter, Op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DeepImageConverter.html</anchorfile>
      <anchor>a06c451c676dad8bd0c4f5e5615a981d0</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DeepImageReader</name>
    <filename>classIECore_1_1DeepImageReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>aa34b38753713d2d54dfc104c159c0a66</anchor>
      <arglist>(DeepImageReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeepImageReader</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>a5d7fb4cd1841959c35880e64b508ccc5</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>aa1714182c5a51d3cadb240e9fd705752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>ad0bb8eb67310dc992a6f3be64664b361</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>a254f6d1f0163500bc7134db5191a55e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>ac62f1c6524183ebc6e72c63fb2671b1d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>a664f35eba2637b6f688d110e24e18e50</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>DeepPixelPtr</type>
      <name>readPixel</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>aae687f957e5e033bddd57babe9be31fe</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>a0892dbd764c32cf7e2bca765432e88fe</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual DeepPixelPtr</type>
      <name>doReadPixel</name>
      <anchorfile>classIECore_1_1DeepImageReader.html</anchorfile>
      <anchor>a72ea3fa6f1f7be1ae1abdd3aa0ec34fa</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DeepImageWriter</name>
    <filename>classIECore_1_1DeepImageWriter.html</filename>
    <base>IECore::Parameterised</base>
    <class kind="class">IECore::DeepImageWriter::DeepImageWriterDescription</class>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>fileName</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a9fbbe4a1014fd7b1681975f972368a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>aac349bc1fff35cdc2e6fc8654bd5f2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a5558805c68e8ac465bd20c8f23dd9e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>aba1d010dae90aa1aca01a5ee9b561825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a91ff3937124bddd23e4e4d6ae1876957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePixel</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a5b6324f26316de96129a29bd9285008d</anchor>
      <arglist>(int x, int y, const DeepPixel *pixel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeepImageWriterPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>aafd042fbbd4e21fb637f024b8f46f099</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>ac38c9656e6429f9ba6a62740c8986496</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a04d675adff05355e27e985ce953c2c89</anchor>
      <arglist>(TypeId typeId, std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeepImageWriterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a72cf4984457cc6f3d5585d3d5277bbd4</anchor>
      <arglist>)(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>bool(*</type>
      <name>CanWriteFn</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>aa7c0c1c3a09c06e04e4e3f7771967ef2</anchor>
      <arglist>)(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeepImageWriter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a7c4f50aba78620c2fcb024b3d6a49ff7</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doWritePixel</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>ac324c4ab6a8ea7a0b550d6ddf795ac21</anchor>
      <arglist>(int x, int y, const DeepPixel *pixel)=0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerDeepImageWriter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a20fa36649194cc6525a47337455807b4</anchor>
      <arglist>(const std::string &amp;extensions, CanWriteFn canWrite, CreatorFn creator, TypeId typeId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileNameParameterPtr</type>
      <name>m_fileNameParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>afd56806577f5a81d1d846071c22035fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVectorParameterPtr</type>
      <name>m_channelsParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a175b91548087d9890645e542daa9b63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V2iParameterPtr</type>
      <name>m_resolutionParameter</name>
      <anchorfile>classIECore_1_1DeepImageWriter.html</anchorfile>
      <anchor>a12fb816462b6eeecf6209f081a82ad5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DeepImageWriter::DeepImageWriterDescription</name>
    <filename>classIECore_1_1DeepImageWriter_1_1DeepImageWriterDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DeepImageWriterDescription</name>
      <anchorfile>classIECore_1_1DeepImageWriter_1_1DeepImageWriterDescription.html</anchorfile>
      <anchor>a3ad42293d7972a1aaf5e588d07e22fb1</anchor>
      <arglist>(const std::string &amp;extensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DeepPixel</name>
    <filename>classIECore_1_1DeepPixel.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a1785673afa43d0f28d288c79525580d3</anchor>
      <arglist>(DeepPixel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeepPixel</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a8143d9ec2dca611c07ed3ba685a2e70f</anchor>
      <arglist>(const std::string channelNames=&quot;RGBA&quot;, unsigned numSamples=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeepPixel</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>af92d538f8a1227fafe2bbce39bbb177e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;channelNames, unsigned numSamples=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeepPixel</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a8869aa0246b50c0a7fe750693d93fe0a</anchor>
      <arglist>(const DeepPixel &amp;pixel)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numSamples</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>aac3d8d4d691b570dd5e21d65865e18d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>min</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>aead5d35c9cb58003712fe38afa59b4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>max</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>ae0579ab7fec0856e6ee15e6ba75147f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDepth</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a6e04be14222e6489b6714bbdf7d74ae5</anchor>
      <arglist>(unsigned index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepth</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>aaf494e0432eea5f89fcea06b3777b5cb</anchor>
      <arglist>(unsigned index, float depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a067bdb1c06895b4e9fa091d67e4aee73</anchor>
      <arglist>(float depth, const float *channelData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSample</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a6fa0f0e4d71b7ac395aae766821e2275</anchor>
      <arglist>(unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>channelData</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a1eac217fbb51393b91a596b7dcef497e</anchor>
      <arglist>(unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>channelData</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a36cf8dcf029a18b90ae6f44376fd3740</anchor>
      <arglist>(unsigned index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolatedChannelData</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a03e4372e74f03dd93cb2752d4e37053b</anchor>
      <arglist>(float depth, float *result) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numChannels</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a5d006f37e72c8a9f6df257769e6c1f1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>channelIndex</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>aa3ce09dbfe264cb937ff6cc83bacb16b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; *</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a214b5f42d690c0e7fa59d52f8bf442fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>ab43f5b035b02f342448a899301c5e4d8</anchor>
      <arglist>(const DeepPixel *pixel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>composite</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a4a5b6d479155cc6538da20de590b4df7</anchor>
      <arglist>(float *result) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeepPixelPtr</type>
      <name>average</name>
      <anchorfile>classIECore_1_1DeepPixel.html</anchorfile>
      <anchor>a2e815ea437145d5eb0aa865f01c729e1</anchor>
      <arglist>(std::vector&lt; const DeepPixel * &gt; &amp;pixels, std::vector&lt; float &gt; &amp;weights)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::Deleter</name>
    <filename>structIECore_1_1Deleter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1Deleter.html</anchorfile>
      <anchor>abc37d4732390031e1e22f13d3080b2ca</anchor>
      <arglist>(T &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::ArrayDeleter</name>
    <filename>structIECore_1_1ArrayDeleter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1ArrayDeleter.html</anchorfile>
      <anchor>ae35677ae262ad60c35bac446ffd69bf0</anchor>
      <arglist>(T &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::NullDeleter</name>
    <filename>structIECore_1_1NullDeleter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1NullDeleter.html</anchorfile>
      <anchor>a2e87ffd353084326e7d642bf3791df65</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::DimensionTraits</name>
    <filename>structIECore_1_1DimensionTraits.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>VectorType</name>
      <anchorfile>structIECore_1_1DimensionTraits.html</anchorfile>
      <anchor>aa678b42d816e10ff9fa1c7309682c8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>BoxType</name>
      <anchorfile>structIECore_1_1DimensionTraits.html</anchorfile>
      <anchor>a35c5a426aca60f0e52fba1bedc3dd80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>PlaneType</name>
      <anchorfile>structIECore_1_1DimensionTraits.html</anchorfile>
      <anchor>a2e792833ce000af503a64971a6bb6814</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>LineSegmentType</name>
      <anchorfile>structIECore_1_1DimensionTraits.html</anchorfile>
      <anchor>ac1d8a7e990ea9e4c2b3dd5df04fb4255</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1DimensionTraits.html</anchorfile>
      <anchor>a6d3a62a37981a636918faaea7157ba86</anchor>
      <arglist>(sizeof(T)==0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DirNameParameter</name>
    <filename>classIECore_1_1DirNameParameter.html</filename>
    <base>IECore::PathParameter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DirNameParameter.html</anchorfile>
      <anchor>a56213a2dddfd0c9927918f53014bca92</anchor>
      <arglist>(DirNameParameter, PathParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirNameParameter</name>
      <anchorfile>classIECore_1_1DirNameParameter.html</anchorfile>
      <anchor>a0c0f51fe818d1fa23524f107909020e5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::string &amp;defaultValue=&quot;&quot;, bool allowEmptyString=true, PathParameter::CheckType check=PathParameter::DontCare, const StringParameter::PresetsContainer &amp;presets=StringParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1DirNameParameter.html</anchorfile>
      <anchor>af3fc14564df98a5191f966d774b1bc73</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Display</name>
    <filename>classIECore_1_1Display.html</filename>
    <base>IECore::PreWorldRenderable</base>
    <member kind="function">
      <type></type>
      <name>Display</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a9fa2305b0ad5b30aa4c58f2a51a966a8</anchor>
      <arglist>(const std::string &amp;name=&quot;default&quot;, const std::string &amp;type=&quot;exr&quot;, const std::string &amp;data=&quot;rgba&quot;, CompoundDataPtr parameters=new CompoundData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>abfa11dcfd1b3c21ce4b6a9eb60d82ae5</anchor>
      <arglist>(Display, PreWorldRenderable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a4f75b598561d987200fb9b3bace5ebf7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>afaffbe373d5483e98e1e7815243a5b44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a97e4520cb40e0e219cf402ff70f54288</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>aee52416482b2c003a1019372ead2c6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a7a3d807639040195eae790619420f476</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getData</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>ad62faff0fa9987130887e9a5b533cd86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a4c86c05d88687a5a6c8305c3ee010b53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>aa9bc6b11cd33ee22a1fc420233d75915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundDataPtr</type>
      <name>parametersData</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>aa5f84b0f0666e6b08c5a0bc55a0c6ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Display.html</anchorfile>
      <anchor>a8381b3f2f474fbe3d36e05848851457b</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DisplayDriver</name>
    <filename>classIECore_1_1DisplayDriver.html</filename>
    <base>IECore::RunTimeTyped</base>
    <class kind="class">IECore::DisplayDriver::DisplayDriverDescription</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a3b7889e421658d08c9e3f8dbbc82c451</anchor>
      <arglist>(DisplayDriver, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplayDriver</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>ac289618e15483676037e5b37a609fe64</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, const std::vector&lt; std::string &gt; &amp;channelNames, ConstCompoundDataPtr parameters)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageData</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a1c4fd74a97992e6f651a9722646f4ef4</anchor>
      <arglist>(const Imath::Box2i &amp;box, const float *data, size_t dataSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>imageClose</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a22717a9bd06d8e3bccde1e257941f361</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>scanLineOrderOnly</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a83144d023c95c9b5e30315180880adf0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a10aa24f55e5c4196097ba25000b229d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>aa6cda4450f96ca82ed3783ac424bc7bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>ab83474015541bc14a3ba763afac12bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; DisplayDriverPtr(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, const std::vector&lt; std::string &gt; &amp;channelNames, ConstCompoundDataPtr parameters)&gt;</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a7ef77248c1f7683ffa66f61b54ee874a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayDriverPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>ac76d06e92d2e3ee266d1b545c0180615</anchor>
      <arglist>(const std::string &amp;typeName, const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, const std::vector&lt; std::string &gt; &amp;channelNames, ConstCompoundDataPtr parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerType</name>
      <anchorfile>classIECore_1_1DisplayDriver.html</anchorfile>
      <anchor>a62ba04ee4557ebf07b9b14a566d83222</anchor>
      <arglist>(const std::string &amp;typeName, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DisplayDriver::DisplayDriverDescription</name>
    <filename>classIECore_1_1DisplayDriver_1_1DisplayDriverDescription.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IECore::DisplayDriverServer</name>
    <filename>classIECore_1_1DisplayDriverServer.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DisplayDriverServer.html</anchorfile>
      <anchor>ae21bbf9326970db6162001662daeaa43</anchor>
      <arglist>(DisplayDriverServer, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplayDriverServer</name>
      <anchorfile>classIECore_1_1DisplayDriverServer.html</anchorfile>
      <anchor>aadf277fed8a44f234b1097b6f8e01f23</anchor>
      <arglist>(int portNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DPXImageReader</name>
    <filename>classIECore_1_1DPXImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a3aff65b2b52ba32664c7e46183dae4a5</anchor>
      <arglist>(DPXImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DPXImageReader</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a99a8408fd2dbabe5490fc1152c3c2834</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a090772a498cb11453a779344ea64f662</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>ac469c10403d832e79f4ae94206662fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>ac7aef475672f3f93afadef7d69942bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a223984f869f3ed72883e371fddfaccdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a4bdfb4341d27e26e1a6941cdef9acb10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1DPXImageReader.html</anchorfile>
      <anchor>a8891fdc8648ba1bcf9cfdf0bcc1669b1</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::DPXImageWriter</name>
    <filename>classIECore_1_1DPXImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>DPXImageWriter</name>
      <anchorfile>classIECore_1_1DPXImageWriter.html</anchorfile>
      <anchor>a3907cad5b5536f5298ebf23c8ab651ae</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1DPXImageWriter.html</anchorfile>
      <anchor>a2d14666d2d66b848a0ecedd9a237cb3b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EmptyFrameList</name>
    <filename>classIECore_1_1EmptyFrameList.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1EmptyFrameList.html</anchorfile>
      <anchor>a8636ef41c2c5a24dab896767aec21d80</anchor>
      <arglist>(EmptyFrameList, FrameList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1EmptyFrameList.html</anchorfile>
      <anchor>aa2e0f55a64ceed509f82bca30cef837d</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1EmptyFrameList.html</anchorfile>
      <anchor>a6f4d4a045dc28d672e09adb7b446627c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1EmptyFrameList.html</anchorfile>
      <anchor>a978189141a73ac62eef179898ba43bc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1EmptyFrameList.html</anchorfile>
      <anchor>a2ea3d9f4b72aea71e547dcfa66739bf1</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EnvMapSampler</name>
    <filename>classIECore_1_1EnvMapSampler.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>ae16d368cd11774f1def9fb829897aaf8</anchor>
      <arglist>(EnvMapSampler, Op)</arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>a2dd335c105f08a736cba61ac7b3b8275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>ab8940b621836759b0a6636010dbe72e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>subdivisionDepthParameter</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>a01fd6713e614f5e65241a4d6bc6e85b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>subdivisionDepthParameter</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>acc437c7fad8f78ee1326a01cdd953e3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1EnvMapSampler.html</anchorfile>
      <anchor>ac3ed7e8768cf95a5eb0bbbcf19fbe9fb</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EnvMapSHProjector</name>
    <filename>classIECore_1_1EnvMapSHProjector.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECore_1_1EnvMapSHProjector.html</anchorfile>
      <anchor>a2ef006a44efdcd0a350bb73aa4bf090a</anchor>
      <arglist>(EnvMapSHProjector, EnvMapSHProjectorTypeId, Op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1EnvMapSHProjector.html</anchorfile>
      <anchor>a7b5092dcbe95b9cfd73cd69e85fe7de4</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EuclideanToSphericalTransform</name>
    <filename>classIECore_1_1EuclideanToSphericalTransform.html</filename>
    <templarg>F</templarg>
    <templarg>T</templarg>
    <base>IECore::SpaceTransform</base>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1EuclideanToSphericalTransform.html</anchorfile>
      <anchor>ade459541ee4ef661bca9c4244b3519a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1EuclideanToSphericalTransform.html</anchorfile>
      <anchor>acfb205f307c6d04944186226cd50a2d5</anchor>
      <arglist>((TypeTraits::IsVec3&lt; F &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1EuclideanToSphericalTransform.html</anchorfile>
      <anchor>a1fff8c032ee3e1b7bed935ad22cf0128</anchor>
      <arglist>((boost::mpl::or_&lt; TypeTraits::IsVec3&lt; T &gt;, TypeTraits::IsVec2&lt; T &gt; &gt;::value==true))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1EuclideanToSphericalTransform.html</anchorfile>
      <anchor>a294c153f5a4afcac7dc4fb8971b924be</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1EuclideanToSphericalTransform.html</anchorfile>
      <anchor>a078458f4088f0cc971d88c2940364c05</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Exception</name>
    <filename>classIECore_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>add4251a9e913f76200d3a2ae5d1ebf31</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>a897e087852db7a7fd865e873485801ec</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>a233806dca1370387cd1ed968cf30bd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>ab5ea0262f42a409573f010082edee37b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>a49610e17fccb8b7baec2555942959824</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>af86fa924a6b14580c0765e50666b58ad</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>prepend</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>a86ac9f6ced6e12e3e01c7364fe63483f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>prepend</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>aad8a8935a621ceaf3fd3df36149063ab</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RefCountedStringPtr</type>
      <name>m_what</name>
      <anchorfile>classIECore_1_1Exception.html</anchorfile>
      <anchor>a59b0611a225820d0d5e233ae5173fc2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IOException</name>
    <filename>classIECore_1_1IOException.html</filename>
    <base>IECore::Exception</base>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classIECore_1_1IOException.html</anchorfile>
      <anchor>a2c2cbe57109f8b0ecb040e8293590343</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classIECore_1_1IOException.html</anchorfile>
      <anchor>a41aa8993f8bbcd004d7d20e22d99bc4f</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1IOException.html</anchorfile>
      <anchor>a2182d0d750a84c6014b88a8616385b7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileNotFoundIOException</name>
    <filename>classIECore_1_1FileNotFoundIOException.html</filename>
    <base>IECore::IOException</base>
    <member kind="function">
      <type></type>
      <name>FileNotFoundIOException</name>
      <anchorfile>classIECore_1_1FileNotFoundIOException.html</anchorfile>
      <anchor>a4eaafc2b42d731f1294ee3ee4b25274b</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileNotFoundIOException</name>
      <anchorfile>classIECore_1_1FileNotFoundIOException.html</anchorfile>
      <anchor>a37dce27aaa596d8834a2fc25dc6c02a5</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1FileNotFoundIOException.html</anchorfile>
      <anchor>a30deed17112e7acfe78c8ec5d1952276</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::InvalidArgumentException</name>
    <filename>classIECore_1_1InvalidArgumentException.html</filename>
    <base>IECore::Exception</base>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentException</name>
      <anchorfile>classIECore_1_1InvalidArgumentException.html</anchorfile>
      <anchor>a4a4a0f9674aa15810726761ca8197546</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentException</name>
      <anchorfile>classIECore_1_1InvalidArgumentException.html</anchorfile>
      <anchor>a9486652c7cf5b139e3252be8fedc1000</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1InvalidArgumentException.html</anchorfile>
      <anchor>affe5d2f6cf49fc33c01f4baeca9a92bb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PermissionDeniedIOException</name>
    <filename>classIECore_1_1PermissionDeniedIOException.html</filename>
    <base>IECore::IOException</base>
    <member kind="function">
      <type></type>
      <name>PermissionDeniedIOException</name>
      <anchorfile>classIECore_1_1PermissionDeniedIOException.html</anchorfile>
      <anchor>abf79478aaabd77703abbb92acabe0613</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermissionDeniedIOException</name>
      <anchorfile>classIECore_1_1PermissionDeniedIOException.html</anchorfile>
      <anchor>a0ce22acafef94f088b39fbdf9f5ad9f6</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1PermissionDeniedIOException.html</anchorfile>
      <anchor>abaaa2d12559123636511cf5e0f72ed89</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NotImplementedException</name>
    <filename>classIECore_1_1NotImplementedException.html</filename>
    <base>IECore::Exception</base>
    <member kind="function">
      <type></type>
      <name>NotImplementedException</name>
      <anchorfile>classIECore_1_1NotImplementedException.html</anchorfile>
      <anchor>a0c9aa077286e404e709b5d81d6033a31</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotImplementedException</name>
      <anchorfile>classIECore_1_1NotImplementedException.html</anchorfile>
      <anchor>aeeadacfe76eeb6624830e783dd89096e</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECore_1_1NotImplementedException.html</anchorfile>
      <anchor>ad322c80f86a9382e45bbba7edfaa3cd8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ExclusionFrameList</name>
    <filename>classIECore_1_1ExclusionFrameList.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a64472e090e3d4c35f44e210f7a011461</anchor>
      <arglist>(ExclusionFrameList, FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExclusionFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a6c1f802ace22b241309c2781e9038d68</anchor>
      <arglist>(FrameListPtr frameList, FrameListPtr exclusionFrameList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>abf871483592e746b2eab8278aa2ce499</anchor>
      <arglist>(FrameListPtr frameList)</arglist>
    </member>
    <member kind="function">
      <type>FrameListPtr</type>
      <name>getFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a03b1f91797d7c9df029d0525e34d0f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a8e2901359a9038f2c4a53480b35f8a93</anchor>
      <arglist>(FrameListPtr exclusionFrameList)</arglist>
    </member>
    <member kind="function">
      <type>FrameListPtr</type>
      <name>getExclusionFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a124ff6b57a6ffe0dd80eddadc7ecbad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a7787337437671bc2d5dc075fe9369c82</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>af9d4c1a6dc20bcc843084eb0975f3fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>acd45d1b1ea5fe01e3b8a5f9f7af0d023</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>ad4a2a603c840028343a89e86aa0c67c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a68a0b88079ef204918e758f3cdd282a1</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameListPtr</type>
      <name>m_frameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a8adc4246b65f11cf40ac9f6d1e01d733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameListPtr</type>
      <name>m_exclusionFrameList</name>
      <anchorfile>classIECore_1_1ExclusionFrameList.html</anchorfile>
      <anchor>a0338cacb3c1f54b6c428fc5eaf47746b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EXRImageReader</name>
    <filename>classIECore_1_1EXRImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a3adacd0efed182fd79ec9c329c4bcb87</anchor>
      <arglist>(EXRImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EXRImageReader</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a01a8a42eaa8624c5d9bb21b9a03d4ba0</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a9c072278a7dacd34f4e653bcf7567b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a984ff4bfb659674cccb622d0edfbd908</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>aa69ab5a5069fc1b9c5af79be9d937369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>adbd61e41205fd30e5f1e855432d90a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a915d6b1a9be4b93c3c4a07b25a18974d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a52dcff36ea504af57f895593be5d2916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a5909b1f54c08e5fc9a4469609caea39c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1EXRImageReader.html</anchorfile>
      <anchor>a330244d314be69451e719c4766824518</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::EXRImageWriter</name>
    <filename>classIECore_1_1EXRImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>EXRImageWriter</name>
      <anchorfile>classIECore_1_1EXRImageWriter.html</anchorfile>
      <anchor>a3c2c1a952246572d9316d02315cc925c</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1EXRImageWriter.html</anchorfile>
      <anchor>a2bc1f8d12572b56499e3338f59ade6f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>compressionParameter</name>
      <anchorfile>classIECore_1_1EXRImageWriter.html</anchorfile>
      <anchor>a52bcc5c223fed1f1f9a00e12aabb3742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>compressionParameter</name>
      <anchorfile>classIECore_1_1EXRImageWriter.html</anchorfile>
      <anchor>a2cb1d7ab80a4a1efde3f200ca948a8a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FaceAreaOp</name>
    <filename>classIECore_1_1FaceAreaOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FaceAreaOp.html</anchorfile>
      <anchor>aee0a3b99f38864b160b4b26f8c240830</anchor>
      <arglist>(FaceAreaOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1FaceAreaOp.html</anchorfile>
      <anchor>ade478681cd8f6cef9c2156afed4911ad</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FaceVaryingPromotionOp</name>
    <filename>classIECore_1_1FaceVaryingPromotionOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>a2af80551517f0d7881ee1791a90dfcca</anchor>
      <arglist>(FaceVaryingPromotionOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>primVarNamesParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>aad50abbd6b74fd30da2d42e49dc49cda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>primVarNamesParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>aec6fcc253234c0da62720ebe38ebb08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>promoteUniformParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>a8efc76d3571b829b086d4d3e04aea1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>promoteUniformParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>add4b9c92d3bd6726cdc786003bb3bdb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>promoteVaryingParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>a7f98bfc47ae4607bfc9ef99ea0dd4fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>promoteVaryingParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>a5a751291d104f671cd31138963c5626e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>promoteVertexParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>a44375f264b8b38232f70522a688f31fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>promoteVertexParameter</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>ae35f721d1abf69185fea2e0be3b50020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1FaceVaryingPromotionOp.html</anchorfile>
      <anchor>abf899ad0e24ee41a72f501b26c58ccc0</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileIndexedIO</name>
    <filename>classIECore_1_1FileIndexedIO.html</filename>
    <base>IECore::IndexedIOInterface</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ad083535d3fc83f1cad4cd3d19c55f52f</anchor>
      <arglist>(FileIndexedIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileIndexedIO</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a2decba55509cf0c82dfc4e447b9270a7</anchor>
      <arglist>(const std::string &amp;path, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IndexedIO::OpenMode</type>
      <name>openMode</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a276f650298a007a83928cc16b0505b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>resetRoot</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a959a6e24809f4d379d1017e19a92d0fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chdir</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ab16b9de1428c56da7813d461e6ca2042</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mkdir</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a4794038af064848e92b9ee4f13126e21</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::EntryID</type>
      <name>pwd</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a1cc55ba6de47d3dc4e034487190ce52f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::EntryList</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a21c17d59a22be1fd7f8fa56350dbb62b</anchor>
      <arglist>(IndexedIOFilterPtr f=0)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::Entry</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a43f0232a483269d254040155647eaec8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>rm</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a685deb0d2bac90f69c0107b420d5209b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a27d1ea0b07f8dead40ee4204168523af</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0e5a8a586c1dc9339136eb9f14a0ebd2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0b9fa5965ebbafa15fb2aa443d555aca</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a5cd89e101675f59147045a72ae8b24c8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a9592d4f3036b39646db32a221a490e88</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a252970d7489f3a16d7e5fd9c4ad67bd8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a960d6728fdbe33d7b6ec0d2a46baac41</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>acea2b303fa89fafece7cedd9ce9a0521</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a83f9058be8a9aa1a2ab7c8005c676ec2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a8ef3342b05e8f8b480832f28766bf446</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a6a0fde012ec57f771adbfc2bcda86ac8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a88225b000ac16f222381b4ee7321b25f</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a4992930b6d358b45a122e7ff9d6c191e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0749e8519e5a7083e00d173c0c714fdf</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ae593fdf78b17f60aabcd50f73d934aad</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a4cd2f1e25e974cfec548b07cd0f803b6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ad296335150e19f47b25db9f5a2ac8b72</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ac04a53a776ee0c2d7f0d88feaa7117da</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>afde5c69934169974cd494b7ddeef1c37</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>af0762b8b90e4143675090a6fa45f2abb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0af94c6952f667c05090b040d0485dd3</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a6b3483354d1619e6f34b16e8d0e39762</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a7433d5bc3e9da73b22a264560b6adde6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a144b474535e4c2697e8183dac36e0f65</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0492e2907697d4a5ed0d3baf0027a2dc</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a7dc9fbed9867fac8138fe3262440ecc6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a10a5e2cb8d856d34de5faeeb0dd92b83</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a701085ae0453d539f24b53b4d1e2c515</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a25fdf155061d087e9ff7bd7a564f2482</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a85e20454e619b6706fc84caab85f3cda</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a51246a42f59f2168cec38b88f315f08b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a2b5cdfe0b8b4fcdab28c0ba68cf6b1d6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a3646177003ac7b380bf020529db443d2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a4cb7caf785a4130a1644f7787a347531</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>af550681397969e5fc147fbeb18c0c202</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a64c6311d46a1ff4371e6e15349ff33fa</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>af9d27c0943006547e99020f396a07314</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a450255f8506cb5ef2f5fffb8fd393ec8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a67f218f5027556349ea7fd045009847c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ae03e8123dbc2c5da80a3b9a1383102e4</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a5717413c2820e4f08ec4b23952656790</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a00353b0bc414312e7f26a39a27280a86</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a8b35b2526374b57ff778ad916df849e8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>aabec91fe76d65bd2d5321a270018d385</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a30d1f2512a9fd3da3df6e9c45c3d2f03</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0250b360043cd321933827b00c59807b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>adc80c5adffe0b74038c94e0ee6ac2170</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a64022ca58bbc6f1049131ffcb34e12b2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ConstCharVectorDataPtr</type>
      <name>buf</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a8e4425771d51041ac55a79d1d83fa05b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IndexedIOInterfacePtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a387935f99ab5ca7796c6230b6b36e6ce</anchor>
      <arglist>(const std::string &amp;path, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a0c0a91628c9080b29b23b05f6547da8e</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileIndexedIO</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a7f00829c0e4142945964b31b956b7859</anchor>
      <arglist>(const FileIndexedIO &amp;other, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ae8e3f6a77e6bc5ed6f74365e881845fe</anchor>
      <arglist>(const IndexedIOPath &amp;path, IndexedIO::EntryType e) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a8f03612e881052d7ad0c32e770a18296</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned long</type>
      <name>rm</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a31c44008b615f65c3445f07c4162c985</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, bool throwIfNonExistent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ad4cfda3f66c01639eacf700892b27b6e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const T *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a477c356d689d863808e633eadbc6ba2f</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, T *&amp;x, unsigned long arrayLength) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>aa6e95d3aa410e04e342c3a4303987be1</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const T &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a5873a5705a9d3a21fe57fd547581ef7b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, T &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a090ffa6eae7fa8aa7170ee10643d2289</anchor>
      <arglist>(Index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a40605bf41bfe150021387685b1a02733</anchor>
      <arglist>(IndexedFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ad14309d472119bb43135b19d171d502a</anchor>
      <arglist>(Node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>find</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a353cb8a02491acef475b86d21e34dc67</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, NodePtr &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>insert</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>afc13377c6cbb275c6de8d582661cd736</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boost::optional&lt; Imf::Int64 &gt;</type>
      <name>flush</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a1042fc17a611691e71ffb870c09e993b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::iostream *</type>
      <name>device</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a71e55f23e4e90b83baf66ddee078f150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>open</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a81a8c45191f34620cdd55471e043b1fa</anchor>
      <arglist>(std::iostream *device, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode, bool newStream=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIOPath</type>
      <name>m_currentDirectory</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a2fc011d1ef91efc37de18a3ea6ec2b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIO::OpenMode</type>
      <name>m_mode</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a1e9b01f960cbcb1ca576684982072824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedFilePtr</type>
      <name>m_indexedFile</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>ae59ecf01f0ad313cdacd9feffb1cc106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodePtr</type>
      <name>m_currentDirectoryNode</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>af82137be81ffc929e371decca7d3e7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodePtr</type>
      <name>m_rootDirectoryNode</name>
      <anchorfile>classIECore_1_1FileIndexedIO.html</anchorfile>
      <anchor>a5fc2ff1d423e055ee233be2659032364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileNameParameter</name>
    <filename>classIECore_1_1FileNameParameter.html</filename>
    <base>IECore::PathParameter</base>
    <member kind="function">
      <type></type>
      <name>FileNameParameter</name>
      <anchorfile>classIECore_1_1FileNameParameter.html</anchorfile>
      <anchor>a313c692eede29b05ba8e3ef0ec792e12</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::string &amp;extensions=&quot;&quot;, const std::string &amp;defaultValue=&quot;&quot;, bool allowEmptyString=true, PathParameter::CheckType check=PathParameter::DontCare, const StringParameter::PresetsContainer &amp;presets=StringParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>extensions</name>
      <anchorfile>classIECore_1_1FileNameParameter.html</anchorfile>
      <anchor>a7003269e50a740ca2911ce6e8cca9f85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1FileNameParameter.html</anchorfile>
      <anchor>a0c34f9f1836be618e2fc7edb63b970a3</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileSequence</name>
    <filename>classIECore_1_1FileSequence.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>ae2713086dbf076c06833fb46e7beeb63</anchor>
      <arglist>(FileSequence, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSequence</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a1764b5301ab19253e7e35cacaaf312eb</anchor>
      <arglist>(const std::string &amp;fileName, FrameListPtr frameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSequence</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>aec8d156ad645f4f12d8e2f5a9842c1bd</anchor>
      <arglist>(const std::string &amp;fileSequenceStr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFileName</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>abc785ba2cb266b957cf9e05d18078ac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>af0f9c5814e47678683ff225824bf4250</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>FrameListPtr</type>
      <name>getFrameList</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a3f4a5e3782394093bef5daa63ccecbf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameList</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>adb7e3250406e196da9b1f863b2570f7b</anchor>
      <arglist>(FrameListPtr frameList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>ae9475762ce3b0bf3d84830eacdcf9485</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getPadding</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a0a230939254339d298819fdb257090eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>ac0d643ce81f23e09b447a4cf73d4a619</anchor>
      <arglist>(unsigned padding)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPrefix</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a08659cfe614305bad12501fc4a251e6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefix</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>af1978d9a27ed745159eb096c96ffec6f</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSuffix</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a97d884ae59204a31a492f2194f273482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSuffix</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a841c51066b873496ddc6f8fe21dfd666</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>fileNameForFrame</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a6b48b5410cc4723c475742ae02556cce</anchor>
      <arglist>(FrameList::Frame frameNumber) const </arglist>
    </member>
    <member kind="function">
      <type>FrameList::Frame</type>
      <name>frameForFileName</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a92a45dd98aa4c026d93774609f2690f5</anchor>
      <arglist>(const std::string &amp;fileName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fileNames</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>af051192c9310e4e465e10c1ce5c15b86</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clumpedFileNames</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a7d82cde57c454de619588fc9e9162936</anchor>
      <arglist>(unsigned clumpSize, std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>FileSequencePtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>ab63def7aa0b4606bab55c14f1b3eab49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapTo</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a3c7e29261b0617c1f230035b65863ac9</anchor>
      <arglist>(ConstFileSequencePtr other, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapTo</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a6671c5b1b1e35183ef4c65e0c01fcc63</anchor>
      <arglist>(ConstFileSequencePtr other, std::map&lt; std::string, std::string &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>ab2446976a036b62e72a5fd5602a0c1d7</anchor>
      <arglist>(const FileSequence &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::regex</type>
      <name>fileNameValidator</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>aa5ea9e092668047b6e3e54e98e36237e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boost::format</type>
      <name>fileNameTemplate</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a3737654d6b2445a0025b4112b8b2cb6b</anchor>
      <arglist>(bool negativeFrame) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_fileName</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a0a29555eeefb4229f3402cfee3c4c1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameListPtr</type>
      <name>m_frameList</name>
      <anchorfile>classIECore_1_1FileSequence.html</anchorfile>
      <anchor>a41c5eac2c318162c9a0311ae4f8be29e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileSequenceParameter</name>
    <filename>classIECore_1_1FileSequenceParameter.html</filename>
    <base>IECore::PathParameter</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ExtensionList</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>aa1bd7d208f47caaab89180bb7eb65cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a87d20427bdfe6b9fee2228ced9170eaa</anchor>
      <arglist>(FileSequenceParameter, PathParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSequenceParameter</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a58ffbb4cd037f89d71821dc1a1c5864e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::string &amp;defaultValue=&quot;&quot;, bool allowEmptyString=true, CheckType check=PathParameter::DontCare, const StringParameter::PresetsContainer &amp;presets=StringParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0, const ExtensionList &amp;extensions=ExtensionList(), size_t minSequenceSize=2)</arglist>
    </member>
    <member kind="function">
      <type>const ExtensionList &amp;</type>
      <name>getExtensions</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a5481edaa24805ee433cf5f6e0a874a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtensions</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a1900f1bc801fcca0b8fc4eb71d330c0d</anchor>
      <arglist>(const ExtensionList &amp;extensions)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMinSequenceSize</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>aab2ec0b67f045c5764466d99f8f6ba9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinSequenceSize</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>afe8c918077db177693072672d24415ea</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a40e928234cefe1433369a1f5a094ae35</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileSequenceValue</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a1ee6310cd77201a976e88d3a927403a1</anchor>
      <arglist>(ConstFileSequencePtr fileSequence)</arglist>
    </member>
    <member kind="function">
      <type>FileSequencePtr</type>
      <name>getFileSequenceValue</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a4f772cd8276b45b0436f38f6d51ccf3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtensionList</type>
      <name>m_extensions</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>ae6941f8acca6d578c9f3ef523627f620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_minSequenceSize</name>
      <anchorfile>classIECore_1_1FileSequenceParameter.html</anchorfile>
      <anchor>a0443bbdd429852d43f1a00df05d4545b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileSequenceVectorParameter</name>
    <filename>classIECore_1_1FileSequenceVectorParameter.html</filename>
    <base>IECore::PathVectorParameter</base>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ExtensionList</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a293c4c3cdd8a1d9724998d1f5b7e4453</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a35eb188401f027440a9f273d0fd601bf</anchor>
      <arglist>(FileSequenceVectorParameter, PathVectorParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSequenceVectorParameter</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>addd463f16b0fe939c5622d2666ad9ee3</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::vector&lt; std::string &gt; &amp;defaultValue, bool allowEmptyList=true, CheckType check=PathVectorParameter::DontCare, const StringVectorParameter::PresetsContainer &amp;presets=StringVectorParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0, const ExtensionList &amp;extensions=ExtensionList())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSequenceVectorParameter</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a30402de580aaf3b941764a43767273a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectTypePtr defaultValue, bool allowEmptyList=true, CheckType check=PathVectorParameter::DontCare, const StringVectorParameter::ObjectPresetsContainer &amp;presets=StringVectorParameter::ObjectPresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0, const ExtensionList &amp;extensions=ExtensionList())</arglist>
    </member>
    <member kind="function">
      <type>const ExtensionList &amp;</type>
      <name>getExtensions</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a5dbc59d32a8fe33280ae156d8a58f2b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtensions</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>aafee4584ae99091766cbedabd8561ec5</anchor>
      <arglist>(const ExtensionList &amp;extensions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a62c6199bb0a04b676c6b07672942a184</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileSequenceValues</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a848ff2d7e97372d65cbfb65ed2c7ec33</anchor>
      <arglist>(const std::vector&lt; FileSequencePtr &gt; &amp;sequences)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFileSequenceValues</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a1d568eae177bccb6e8a9aed7fc093de7</anchor>
      <arglist>(std::vector&lt; FileSequencePtr &gt; &amp;sequences) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileSequencePtr</type>
      <name>parseFileSequence</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>ac4c9a17be46f48b3781ac18cae213ee0</anchor>
      <arglist>(const std::string &amp;fileSequenceString) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtensionList</type>
      <name>m_extensions</name>
      <anchorfile>classIECore_1_1FileSequenceVectorParameter.html</anchorfile>
      <anchor>a4da4f800cf65bcd659e9c3f5261e6e95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileSystemIndexedIO</name>
    <filename>classIECore_1_1FileSystemIndexedIO.html</filename>
    <base>IECore::IndexedIOInterface</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a35a93d78799ff3f6fa606abc9ea3ae56</anchor>
      <arglist>(FileSystemIndexedIO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileSystemIndexedIO</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a2c0a29f74e72df96478303ce4ca60a4a</anchor>
      <arglist>(const std::string &amp;path, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IndexedIO::OpenMode</type>
      <name>openMode</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a7d2ec4c57d38dfecb8e4dfb774aea7ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>resetRoot</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>adacefcc0c4285eb77bde804e43d432e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chdir</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a53a328ad3402dd2ece27cce34e292259</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mkdir</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a11e715ebe8cbee7b071450b8af879aeb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::EntryID</type>
      <name>pwd</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ab25c234a881ceb1b8cfbeab81112fc7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::EntryList</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a1014340b2e84eacb0447e2645df514a6</anchor>
      <arglist>(IndexedIOFilterPtr f=0)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIO::Entry</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ae445931182fa1f51692aba84d9024bc8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>rm</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>accd73b678e7287413ed2cd91652fd0d8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a46c5340a46466cfbf0085921b9cffc09</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a82dfee36560bac33a5930458ae98134b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a4fa3e80aa6f33b81ceb5b3e001b4fa21</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a1b166a715880ec15c660d882b9ba027a</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a74fc0de136c0c5d1d797d8ae48521cd7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a9c044eaf2d9c075b53dd5489c701c21b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a7279f5e57f1abe7f538424eac646b394</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>aadfa94b9781acb546741f6775fba7d44</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ab5d6d0c7a7f2e92ead4b9fc6ad16d658</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a5b7d4223dfc150fd1a0a5df3006aba13</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a505b5258b27abdd2e3f9638a1c812179</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a7a8982fba1c5ad4b1152a31e38bf548e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a840468dc1ecafda9299f1c4d95082809</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a55c4dae011ee619c386b16acacc1b781</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>abdfbb13c1dc29594125db3fd8af88fff</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a6937db9f384b656f88131b7e067133a2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>abe2a04214ad41618b0bfd9ec2d3ee683</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a94578fae3490efa2e068dea6e89fc2d6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ae9f1c0858e9660fc766555b35484f19d</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a7d39e383778e3a3000d99c2a2e16c9d8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a8ebe6d14434c80fc5185fb993f6cda16</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a38fbe6104c9115d9f9857996a337cb09</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a92908d92a017a93b681cdec0f5b4c3bd</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a02ac7eaa118399a3279a15f0300d7e9f</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ab49d1525478c28f1d6ecb505d35018f7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a19a1ae04634052986ef1818d5bc7f8a4</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a2dc1a1fc1997a0d60ea7e0eabef519a7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a0686e858d1c5fa684605bb19db5a14ef</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>aa86f2b2a9c68ad7cb77ecf7f30f773f9</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a84cf62abe51f01f57ea24c4755322a1b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>af8310524e455a9f39c69cad5dbf5acf1</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a72bf7283cfc5175867c81c9de8c8eed5</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a311252ebf4b3995050b71f174a557ab5</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a1a0cb1ed3abf5577fb76ceef4b80726b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a437e7880ac9ee154268282d64e4b00ee</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a0eaf2855159feffce9949cd2186840a3</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short *&amp;x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a1ebf23cc28c29a9befc3865ab90af3f7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ae58ddd70f86c57af806f366d0eb6701d</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a75928e3f6e5ece2189402d61db9c0395</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a321655d3a4b2e84fc12337b4d455c7b2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a344bbcaf284da04b83f6a893126a6446</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a31c5f4706fa47f24e8b7b6a85ea159c6</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a5cee87dcf1b55f69f88d7ede8a40313a</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ab2c490a1690463f397d766f05aeba228</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ac36bfa6d21b55a48ba8c4eca6aa7179b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ad4e68dae0d61b65ff6850795e38f5d9b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a6070dda7635f04e7b840c5d82ea2a3cb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>af181836f2ba735a706fac31cf759247e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IndexedIOInterfacePtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a80377db8a726f06a9d56a57b5af61f95</anchor>
      <arglist>(const std::string &amp;path, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>ac2e3be4f9293b274ff55c61159d3a15c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const T *x, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a084e313a01f075f19374bf5cd56e9f3c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, T *&amp;x, unsigned long arrayLength) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>aee213ba7c6eaf8af83a12ebb9297010e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const T &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a9fd56a6c176527d9d68ccad008eb0028</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, T &amp;x) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIOPath</type>
      <name>m_currentDirectory</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>aee1a2b2fd758356108f107a44e7a307e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIO::OpenMode</type>
      <name>m_mode</name>
      <anchorfile>classIECore_1_1FileSystemIndexedIO.html</anchorfile>
      <anchor>a21ecbaa9689cf854afb04744a133c077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FilteredMessageHandler</name>
    <filename>classIECore_1_1FilteredMessageHandler.html</filename>
    <base>IECore::MessageHandler</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1FilteredMessageHandler.html</anchorfile>
      <anchor>abbaeac62d4d24595d8f1f5b032289b3d</anchor>
      <arglist>(FilteredMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilteredMessageHandler</name>
      <anchorfile>classIECore_1_1FilteredMessageHandler.html</anchorfile>
      <anchor>a6fd17c49a1731cd82f2049487160c5b7</anchor>
      <arglist>(MessageHandlerPtr handler)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MessageHandlerPtr</type>
      <name>m_handler</name>
      <anchorfile>classIECore_1_1FilteredMessageHandler.html</anchorfile>
      <anchor>a57d47ce7d64de8c72a1e0412e03b16cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Font</name>
    <filename>classIECore_1_1Font.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a5d2425bfd71c248b35b8e7415596e59a</anchor>
      <arglist>(Font, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a3c0f7846d96a574a429c260c4646cde0</anchor>
      <arglist>(const std::string &amp;fontFile)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>fileName</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>ae9e501a6498542765cebd036b80572f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKerning</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a69cbc51f60d37985f2ac64f24eca255b</anchor>
      <arglist>(float kerning)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKerning</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>afe1cf8bdfa58875d44de39f5190659e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurveTolerance</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>aa673cfd46b048163c499002a964405b8</anchor>
      <arglist>(float tolerance)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCurveTolerance</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a2c96a702bdc2caa527d3b60f68f5f0f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResolution</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a6a8586e719f0e48d14485539cd900293</anchor>
      <arglist>(float pixelsPerEm)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getResolution</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a109d3fd2223843e7eaa4188acdb5e487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstMeshPrimitivePtr</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a1a8bd6ac0900a36f243d1ad293b011a2</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitivePtr</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>ad35060424e5d3a97995d57afe055d455</anchor>
      <arglist>(const std::string &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>GroupPtr</type>
      <name>meshGroup</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a67b83d3ffdf3c72a8d6108088f6a87a4</anchor>
      <arglist>(const std::string &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>Imath::V2f</type>
      <name>advance</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>ae55f6e9d8505d96f00e92287b2deffa3</anchor>
      <arglist>(char first, char second) const </arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a15694791ff58389bc2908c20a9681cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a7d37a5d82c4982df0f2dd8c455941128</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>Imath::Box2f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>a8e0456ee1bda2d8f1e30015bb8220791</anchor>
      <arglist>(const std::string &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>ConstImagePrimitivePtr</type>
      <name>image</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>accee2d77319f28598ce5e649b0222eee</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitivePtr</type>
      <name>image</name>
      <anchorfile>classIECore_1_1Font.html</anchorfile>
      <anchor>acc913234226dbe7dbd61a72ac152ab87</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FrameList</name>
    <filename>classIECore_1_1FrameList.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="typedef">
      <type>int64_t</type>
      <name>Frame</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>aed59caabd4e70795649277a6117ad7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>a079a660701ec63308405dbd32576af63</anchor>
      <arglist>(FrameList, RunTimeTyped)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>a599c421c6a9a8890efb3c568222e830b</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>aa0c41209a87a4f7461c50641f6c940c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>aa8d0e585fc081c693d89360853693aa8</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>aeb3d946ba77939458833733ee724b30b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>asClumpedList</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>a30dcd840b21d943a727e03f3636df000</anchor>
      <arglist>(std::vector&lt; std::vector&lt; Frame &gt; &gt; &amp;clumpedFrames, unsigned int clumpSize) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>ae8dc7761a5aca5aad0cd645e10985371</anchor>
      <arglist>(const FrameList &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>a874bbf6de9855ef61e6e9bdef64572c8</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FrameListPtr(*</type>
      <name>ParserFn</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>abbab4bb675c62d3113256953cb71e43f</anchor>
      <arglist>)(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerParser</name>
      <anchorfile>classIECore_1_1FrameList.html</anchorfile>
      <anchor>a10f58e4498871ad6543ea959d5dfef49</anchor>
      <arglist>(ParserFn fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FrameRange</name>
    <filename>classIECore_1_1FrameRange.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a46362c7c3bc41f52ff3352ab7f3ce4d7</anchor>
      <arglist>(FrameRange, FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameRange</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a699b937e86be4425db73c3c2c1440862</anchor>
      <arglist>(Frame start, Frame end, Frame step=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a15b3beed7035b85967be87f10747543c</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>acc284181c027f9b805a6e06d16bed30f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a16969843a3dbdc68c5c2316622030a07</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a2de76611bd25a44b329bb18332566037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>getStart</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>adf4ed1f70399cb3b429f3b7426c162df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>aaa57b3b1ebb3791608864df4b12ea029</anchor>
      <arglist>(Frame start)</arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>getEnd</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>ab42c803e0c2e11b59395fdd95835660f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a588d30afe8d8c005a8228fb2d4859d4e</anchor>
      <arglist>(Frame end)</arglist>
    </member>
    <member kind="function">
      <type>Frame</type>
      <name>getStep</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>afce9bc34fd489ac7cef7977e79bff7c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStep</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>ae408aca11131ee03ccc49702bfc9dad6</anchor>
      <arglist>(Frame step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>a41093e25d9cbbab58bb2fe354747d071</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Frame</type>
      <name>m_start</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>abe10aa8a88f525edf9f534f30c0ccf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Frame</type>
      <name>m_end</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>aed2a8468ddb9153b32512f0e881565d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Frame</type>
      <name>m_step</name>
      <anchorfile>classIECore_1_1FrameRange.html</anchorfile>
      <anchor>ad32729540877c1940a394ed5d4372e04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FromCoreConverter</name>
    <filename>classIECore_1_1FromCoreConverter.html</filename>
    <base>IECore::Converter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>a51342abb79c7c12d05b28092f6ddb609</anchor>
      <arglist>(FromCoreConverter, Converter)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameterPtr</type>
      <name>srcParameter</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>a2252f27798a0cd630d80f3a503baa54d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstObjectParameterPtr</type>
      <name>srcParameter</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>af78f92540e05414d28bf8ee3b7c3fbf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromCoreConverter</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>a87fc714c842684c3b98102c121a49339</anchor>
      <arglist>(const std::string &amp;description, TypeId supportedType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromCoreConverter</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>a51d9f8d126915e5e18d7e3308535ab64</anchor>
      <arglist>(const std::string &amp;description, const ObjectParameter::TypeIdSet &amp;supportedTypes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromCoreConverter</name>
      <anchorfile>classIECore_1_1FromCoreConverter.html</anchorfile>
      <anchor>a45b20fff2b2892bddefe5cb086a4ba98</anchor>
      <arglist>(const std::string &amp;description, const TypeId *supportedTypes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Grade</name>
    <filename>classIECore_1_1Grade.html</filename>
    <base>IECore::ColorTransformOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a3e044d7fecae6f7b6060866d895e3f3e</anchor>
      <arglist>(Grade, ColorTransformOp)</arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>blackPointParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a6747ea278a474216ade7af380e74381c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>blackPointParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a44b86bb9bb80cd0d31980de74fcb8fac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>whitePointParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>af865f7224e9f989c5bcea2dbffd4096c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>whitePointParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a13497b86fa11eab9bdaa4c7116bc9cf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>liftParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a66a873dd3a337c3fb6a96540e9625f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>liftParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a6ca77a84bf842def6a362c16cf3f2db2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>gainParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a2704b67a1ee4274a62c803f11a7e3f3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>gainParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>ae7aed99baf520357e58316f89984e186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>multiplyParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a7e9aef95ec5e3903cdb78ff681201460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>multiplyParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>aec22dd8fccc3a1cf593bb97a7a95568c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>offsetParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a6618586529d69c2c8abbf97e17a37894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>offsetParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>aef24e45d6d92e6b11233a36a77069971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>gammaParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>aa1f2f8bb5b838bbb732109f6dd7bd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>gammaParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a7b2fa68338c6c08dd8d304a1da525919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>blackClampParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>aa80ec5da313a928f7f69db3d9ca379d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>blackClampParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a31882894930afa04b3bf693f37a36b1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>whiteClampParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a3af2af6f4dcfb10ccc683490cc4e63bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>whiteClampParameter</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a2704962f45592631baf100771600afce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a5b6ca675f0e73c683f8b78b3b0878437</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1Grade.html</anchorfile>
      <anchor>a8f86a27adfc86062b9af90a0b9a70f6f</anchor>
      <arglist>(Imath::Color3f &amp;color) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Group</name>
    <filename>classIECore_1_1Group.html</filename>
    <base>IECore::VisibleRenderable</base>
    <member kind="typedef">
      <type>std::vector&lt; VisibleRenderablePtr &gt;</type>
      <name>ChildContainer</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a7be1e65c650945e389a4f3c92025ca0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; StateRenderablePtr &gt;</type>
      <name>StateContainer</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a6e8978c6d4fee4f00ce90755d11d5bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a00bbe9a3524ba8d0e3420ded19b8c454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a7ada6f5460e20b0f4079b8e9e00ee89a</anchor>
      <arglist>(Group, VisibleRenderable)</arglist>
    </member>
    <member kind="function">
      <type>TransformPtr</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a29fe87d00a77e9f54093801a4452ab0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransformPtr</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a9b96cb56830584ba7e452f59970adc14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a8db2f274879788dc0f60e1b24c153336</anchor>
      <arglist>(TransformPtr transform)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>transformMatrix</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>af0ab1bba89376f0b4108823ba223e035</anchor>
      <arglist>(float time=0) const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>globalTransformMatrix</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a95c168dc1e098e0ec80ca33658681122</anchor>
      <arglist>(float time=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>ac670b0a14909877d04933bc64e1c0d5a</anchor>
      <arglist>(StateRenderablePtr state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeState</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a7decc697a5ef06064ac9187791dc8088</anchor>
      <arglist>(StateRenderablePtr state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearState</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a9b0dc103b2e3f40751f2215e728639aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateContainer &amp;</type>
      <name>state</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a59dcfc9c12da5328593a507796e392c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a6f5eaa4247eb28cdb4db9b098e027220</anchor>
      <arglist>(VisibleRenderablePtr child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a8137ec0e6122e06a0817598e6f33d7c0</anchor>
      <arglist>(VisibleRenderablePtr child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearChildren</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a8e5b304e9932de630432fa08dbaab76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ChildContainer &amp;</type>
      <name>children</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a6148493279354ef615e64e10c0748777</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GroupPtr</type>
      <name>parent</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a8f5a16e889bf3d53cbacb5d144f06d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstGroupPtr</type>
      <name>parent</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a7a10807c70603141cae85737dd9d185e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>afa30410e0e8ae765f8f4df2a8b9111ed</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>aeaa45db3adc22abc5437c60975be7b78</anchor>
      <arglist>(Renderer *renderer, bool inAttributeBlock) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderState</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a26f448402100e8da24507b9375335c5d</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderChildren</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a70d801892285fba284239c3ff9fc9e42</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Group.html</anchorfile>
      <anchor>a33d2f869926e11bf50155f9507a85cf9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::HdrMergeOp</name>
    <filename>classIECore_1_1HdrMergeOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>ac3312a4e8afa63f8dd964fa2622543c7</anchor>
      <arglist>(HdrMergeOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>inputGroupParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a2b38dcea85d676817579561356c77d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>inputGroupParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a3a0fa27c1e0a1bf4d76091777352b8ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>exposureStepParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a6cbe5884b2b03f8a6cb17f32f4fa1191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>exposureStepParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>af8513f3f9790e42976031f2d58699f26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>exposureAdjustmentParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a4f0bf6ce7892a317f045ac3f9d9e22de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>exposureAdjustmentParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a94e6e1a2df03ac76f3d5d6555dbbe074</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box2fParameter *</type>
      <name>windowingParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a4eec258ff4f23ffe4c354a65402d925a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box2fParameter *</type>
      <name>windowingParameter</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>a5d1440684ca242c51bc93614577dd58b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1HdrMergeOp.html</anchorfile>
      <anchor>ad54f7b625b20d99f5d22d89b2285c7a5</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::HeaderGenerator</name>
    <filename>classIECore_1_1HeaderGenerator.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>DataHeaderFn</name>
      <anchorfile>classIECore_1_1HeaderGenerator.html</anchorfile>
      <anchor>a8e519f8f282a02710098fc4cbf14e425</anchor>
      <arglist>)(CompoundObjectPtr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompoundObjectPtr</type>
      <name>header</name>
      <anchorfile>classIECore_1_1HeaderGenerator.html</anchorfile>
      <anchor>a546b1ee24f7982b1102c2b5674e29ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>registerDataHeaderGenerator</name>
      <anchorfile>classIECore_1_1HeaderGenerator.html</anchorfile>
      <anchor>afaf43600dd2fa0e13edb31ecd26ebd6e</anchor>
      <arglist>(DataHeaderFn generator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::HierarchicalCache</name>
    <filename>classIECore_1_1HierarchicalCache.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>IndexedIO::EntryID</type>
      <name>ObjectHandle</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ae1c598a04f536ef7ce0506efbc3a6272</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedIO::EntryID</type>
      <name>HeaderHandle</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a9d829acaa6c6f74d4e228cbd4d84c8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexedIO::EntryID</type>
      <name>AttributeHandle</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a0c4d94af6820e06497097da8ed6a37f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a66252a95ef540f0f57ff776def3bd691</anchor>
      <arglist>(HierarchicalCache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalCache</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>af4b8bf13179d61860867d640d2b1b1b1</anchor>
      <arglist>(const std::string &amp;filename, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a37c37bada388a7f9035cfa6e3fa537b0</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr, ObjectPtr data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aa5e87c82b445c483275231bf499c7510</anchor>
      <arglist>(const HeaderHandle &amp;hdr, ObjectPtr data)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ac4998a69a283c027a48f8755b1781e5a</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ac4154af15444a7cd94e90edc3839ea4b</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aa27b718ea2a0f01d940bf4ba53d51a19</anchor>
      <arglist>(const HeaderHandle &amp;hdr)</arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ad6864ed970fec51813e6d3101a596710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objects</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>af28f4762627d0032ccc79f9ea6559af9</anchor>
      <arglist>(std::vector&lt; ObjectHandle &gt; &amp;objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>headers</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ace189f4a4e885f05d19465ed9bd28243</anchor>
      <arglist>(std::vector&lt; HeaderHandle &gt; &amp;hds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>adb5d8adfe52e44a0a86c66e949653823</anchor>
      <arglist>(const ObjectHandle &amp;obj, std::vector&lt; AttributeHandle &gt; &amp;attrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a00990a78838cda7303aeab93153258e8</anchor>
      <arglist>(const ObjectHandle &amp;obj, const std::string regex, std::vector&lt; AttributeHandle &gt; &amp;attrs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>acac90c1c6368d95325994469a7fbf144</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a65b8427f24ac3bf34ae4472f5e672935</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a419debd916082bb64df5c901e4ff2ebe</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a81235cdd67b315f4e4428daf571246f3</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeHeader</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>abcffdcb1aecba2d873b948b4a9f9777c</anchor>
      <arglist>(const HeaderHandle &amp;hdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a10615355ce2bb2096ffbd68427d683a7</anchor>
      <arglist>(const ObjectHandle &amp;obj, const Imath::M44f &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a4b1674cc8fd595a8a575e4a0ad35d202</anchor>
      <arglist>(const ObjectHandle &amp;obj, ConstVisibleRenderablePtr shape)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShape</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aa9abe2ceb2945fcfba9ab5c1eea41922</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransform</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>af901f4bc5f48142ab6046e5d75b6f15d</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>children</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a695bc53eed9f0752e51dc1664c22a758</anchor>
      <arglist>(const ObjectHandle &amp;obj, std::vector&lt; ObjectHandle &gt; &amp;children)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>transformMatrix</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ac3177d56e143c891db4dd98a5d96c5f2</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>VisibleRenderablePtr</type>
      <name>shape</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a60c959023d38b811c1f46439740b5899</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>globalTransformMatrix</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a4fe78e06cd8735132f217c51dce74ccf</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a3989e44b14bec7983b0c0b7f40dd73e6</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectHandle</type>
      <name>absoluteName</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a9f93ad8340bb18a2ff7914c75351b94f</anchor>
      <arglist>(const ObjectHandle &amp;relativeName, const ObjectHandle &amp;parent=rootName())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectHandle</type>
      <name>relativeName</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a2c40cc4f4f72800ac0b30a91ce55a587</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectHandle</type>
      <name>parentName</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a9c546ad9820acff4e85f8c0d4a0ae78d</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectHandle</type>
      <name>rootName</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a95bb0d4e8d73bff57d97237a61808252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Imath::M44f</type>
      <name>recursiveTransformMatrix</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ad8f9db44f834cb890c46ddb72c5f132d</anchor>
      <arglist>(const ObjectHandle &amp;obj, const Imath::M44f &amp;world)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recursiveObjects</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a5664ee862905c019237dea63b4b899c7</anchor>
      <arglist>(std::vector&lt; ObjectHandle &gt; &amp;objs, const ObjectHandle parent=rootName(), size_t totalSize=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexedIO::EntryID</type>
      <name>guaranteeObject</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a4e90983829cabe301979d93a7210dc7e</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a9b9d59793ce624a3002de0cab1725701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNode</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aeca35751f1e552a194e00f210b5550e2</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateBound</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a2dbd8ee4ea3fc2aad83bc81caf8f9adb</anchor>
      <arglist>(const ObjectHandle &amp;obj, Imath::Box3f box)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VisibleRenderablePtr</type>
      <name>loadShape</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a739cf876fa848f35c4b3bb95ebc563a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadBound</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ac308cc269e28b259fbf8ac313cacb006</anchor>
      <arglist>(Imath::Box3f &amp;b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadTransform</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aeef42311208a8a7ab847ba16b531021d</anchor>
      <arglist>(Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ObjectHandle</type>
      <name>canonicalName</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a15a1f5eeb2b8eb50056e7fcc1b4a3818</anchor>
      <arglist>(const ObjectHandle &amp;obj)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>objectPath</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>aad7cd1bfebecb89fdd2247d81f0b4cab</anchor>
      <arglist>(const ObjectHandle &amp;obj, IndexedIO::EntryID &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>attributesPath</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>ad50e0f2aa2b04b57f6555d40914e1c66</anchor>
      <arglist>(const ObjectHandle &amp;obj, IndexedIO::EntryID &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>attributePath</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a5deac36dc0f8c972e1c5fabd7a455570</anchor>
      <arglist>(const ObjectHandle &amp;obj, const AttributeHandle &amp;attr, IndexedIO::EntryID &amp;path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIOInterfacePtr</type>
      <name>m_io</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a2a36ccd71f5d365ec676179a46b37440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HierarchicalCacheDependencyPtr</type>
      <name>m_dependency</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a8ef9b219c3302ab88bc6979192e9c37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>HierarchicalCacheDependency</name>
      <anchorfile>classIECore_1_1HierarchicalCache.html</anchorfile>
      <anchor>a76d48ea074ece23fb95e3d63576e9029</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::HitMissTransform</name>
    <filename>classIECore_1_1HitMissTransform.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a9c7a2f1bae0e327d6327f91a983d4c58</anchor>
      <arglist>(HitMissTransform, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameterPtr</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>ab32cd0c793d561ac806765d063c47c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstFloatParameterPtr</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a25ee4de9749d9c36178f5f95364643eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundParameterPtr</type>
      <name>operationParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a440cfcaf87e56c24b3b4509f3376dc5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstCompoundParameterPtr</type>
      <name>operationParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>ae1c3b31d1758db56beda77fde8e5adb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>M33fVectorParameterPtr</type>
      <name>structuringElementsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a9b86a480e5aaf6ebb6a5d3da00efda1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstM33fVectorParameterPtr</type>
      <name>structuringElementsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a1cc3a0ffa3d05a416f1ec1d9c1bf00f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameterPtr</type>
      <name>rotateStructuringElementsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a48edd26caf132dd88b92011429b15ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstBoolParameterPtr</type>
      <name>rotateStructuringElementsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a923c18afd6ed43bd2747725eb26fe16c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameterPtr</type>
      <name>valueParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a6fb2f1949ea394605bdb1e6e2968174a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstFloatParameterPtr</type>
      <name>valueParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a72ead7c164e7820c8031f7f3315bc19b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameterPtr</type>
      <name>borderValueParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a0d272781bf717c0b7ee9a022f1d888fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstFloatParameterPtr</type>
      <name>borderValueParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a206de8a34fd81fb4b556b53b563c09ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameterPtr</type>
      <name>iterationsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>ad983c2d268b00e11d9acae71c618392f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstParameterPtr</type>
      <name>iterationsParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>ab280cea6de7ddf3f91623d2ff2058dda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameterPtr</type>
      <name>applyElementsAlternatelyParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a2581753f0ca75ac36c3dcaf197ef2f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstBoolParameterPtr</type>
      <name>applyElementsAlternatelyParameter</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a5c375aa99b694d08363ce97002439109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1HitMissTransform.html</anchorfile>
      <anchor>a6cf44d771df7bfd5710333a65fb3bbc7</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IFFFile</name>
    <filename>classIECore_1_1IFFFile.html</filename>
    <base>IECore::RefCounted</base>
    <class kind="class">IECore::IFFFile::Chunk</class>
    <class kind="class">IECore::IFFFile::Tag</class>
    <member kind="function">
      <type></type>
      <name>IFFFile</name>
      <anchorfile>classIECore_1_1IFFFile.html</anchorfile>
      <anchor>ad53303039bd3acb6ce193ead4cf58c3f</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>Chunk *</type>
      <name>root</name>
      <anchorfile>classIECore_1_1IFFFile.html</anchorfile>
      <anchor>aa02767e3d8b38bb622cd35e4d3ecbd6c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IFFFile::Chunk</name>
    <filename>classIECore_1_1IFFFile_1_1Chunk.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; Chunk &gt;::iterator</type>
      <name>ChunkIterator</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>aabce8b088340d0b437a958b9c72de67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tag</type>
      <name>type</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a74b185ee4add34cf6b4a3ffc0def8670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>dataSize</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>ab6da374cb0edae0b747576a4205f37dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGroup</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a8eb3dc85908a724e1a28b634f23cdd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Tag</type>
      <name>groupName</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a794c666dc049267386acce09798bfc2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChunkIterator</type>
      <name>childrenBegin</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a86b9a0f604cd2b82140ee2e383410673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChunkIterator</type>
      <name>childrenEnd</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a3e4d2506047051e94516d0beaf9eb39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>a27f91464cb63b5e8a032519c849b6244</anchor>
      <arglist>(T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>ab4a37983795c3ccd8ef0b9577a62bf91</anchor>
      <arglist>(std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>aa20e85473b2917263127324195911913</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>aba94c61dc917c9ad136a27a542610b20</anchor>
      <arglist>(std::vector&lt; Imath::Vec3&lt; T &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IFFFile</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Chunk.html</anchorfile>
      <anchor>acad76cf596f44c00e48fc7545a85ecec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IFFFile::Tag</name>
    <filename>classIECore_1_1IFFFile_1_1Tag.html</filename>
    <member kind="function">
      <type></type>
      <name>Tag</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>abfabef6d94f8ede49255ddfe9d52ad3d</anchor>
      <arglist>(const char *buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tag</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>a6e43e39be1cd139054d43256bb74c05e</anchor>
      <arglist>(std::string str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>af677ef8fa28c3169ff14f5bd17b14bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>a101d3ee8a83eb1187e2ed04a120eeb05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>alignmentByte</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>afb82e07cbd192911541de367b3da269d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGroup</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>a25927b95a1c330264acaab60c21c60bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TagSize</name>
      <anchorfile>classIECore_1_1IFFFile_1_1Tag.html</anchorfile>
      <anchor>aa576d3ba6f3d855d85508d58f66652be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IFFHairReader</name>
    <filename>classIECore_1_1IFFHairReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="enumeration">
      <name>RealType</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a465d4cb8f4abde0c5c5a436ebeedaa82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a4d7afbac0d40a0f92e91a545f95b5614</anchor>
      <arglist>(IFFHairReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IFFHairReader</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a77eb17c1ceaaf139ce468b9621d60a34</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>ConstIntVectorDataPtr</type>
      <name>frameTimes</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a526a54e0dcb7ad8e85e903aa28cd0d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>numHairs</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a718bfc360dc2474558d3d4ff1fa1203d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1IFFHairReader.html</anchorfile>
      <anchor>a6712c4494d5ee4ae8cdacc6373283c48</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageCompositeOp</name>
    <filename>classIECore_1_1ImageCompositeOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>ad17023ba9b1d03415d81e0677638616e</anchor>
      <arglist>(ImageCompositeOp, ImagePrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a0294d7a087b35935bf3c8902e35acbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>aea585999d1796af5dcecb78ae367f854</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a84567f96255e1c3e7920047fc719e9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>ad18a9881aaae913f30ba145ca2d7162f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageAParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a4140a6772cd3a214a51473f9060c1f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageAParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>aae360e64dd847a8f68aff6c9c377cf16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>operationParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a9063ba04f7f698c9ce75f72dc21d6813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>operationParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>aef550f27f2e3a368217a95b9b9ea92f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>inputModeParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>ad8e57224cdcca8fda5784f2d0b8b3c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>inputModeParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>aa737bcc51477ee272c053da819e364f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>float(*</type>
      <name>CompositeFn</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a79a61a7f097de50676d4815cfc7b0863</anchor>
      <arglist>)(float, float, float, float)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>composite</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a666c37e2206ab1730294928242f4938b</anchor>
      <arglist>(CompositeFn fn, DataWindowResult dwr, ImagePrimitive *imageB, const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a454b19161bf611fc9f764447fccef768</anchor>
      <arglist>(ImagePrimitive *imageB, const CompoundObject *operands)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVectorParameterPtr</type>
      <name>m_channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>adef782e58f76029f731fe8d7ff79c2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a4cfdd52cfa9a8c3f28f027e872e9844f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImagePrimitiveParameterPtr</type>
      <name>m_imageAParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a3976bc9b40a3a98229862c34cdfcf6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_operationParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>a52b245f46338a2e1d2e6772b4931734d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_inputModeParameter</name>
      <anchorfile>classIECore_1_1ImageCompositeOp.html</anchorfile>
      <anchor>aac8c1c40bfd9892ca7aa919e076c218e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageCropOp</name>
    <filename>classIECore_1_1ImageCropOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>ac77c76801b9c6ff4dbf1d3763aecbc13</anchor>
      <arglist>(ImageCropOp, ImagePrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>Box2iParameter *</type>
      <name>cropBoxParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>a408d94523099b2080d2026d1c428a41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box2iParameter *</type>
      <name>cropBoxParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>af39bc2589c17c4a29112c9663012894a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>matchDataWindowParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>a7cf8d7906833a55a3afc5808f3fccd4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>matchDataWindowParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>a157539097d1b50dcb3ff99cab7cd2810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>resetOriginParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>a598a52aa7843611d14659c79c03912d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>resetOriginParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>a52dc0c782f1489ceb65d0d4698d4c1ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>intersectParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>aeedb6ddbb331b21c74171baa52d9b29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>intersectParameter</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>aa7f61bfb4ae23ab028c2e2126247109e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1ImageCropOp.html</anchorfile>
      <anchor>acc88ebc102c9b650778e26b1547fa8a8</anchor>
      <arglist>(ImagePrimitive *image, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageDiffOp</name>
    <filename>classIECore_1_1ImageDiffOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>ad45d38cb5733a5e3134781ba36e3937d</anchor>
      <arglist>(ImageDiffOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageAParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a2df4c856faf2eae218f43cdc5f03a441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageAParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>af821c0d26ac96bb3889fb0d97b8345a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageBParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>ac1c37cda5d77d1d7ffd09793c9c03868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageBParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a83ac896f922764d1c6a23cba4cb431bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>maxErrorParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a3cd09f3cf48cf7e5639578fef13996b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>maxErrorParameter</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a7ef25f18d5c77732ec46420691f9fc65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>skipMissingChannels</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a9b0dcad67256e62b6e630f1fc377157f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>skipMissingChannels</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>ac487f9046adcc6a9d6bc0f16a6e86682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ImageDiffOp.html</anchorfile>
      <anchor>a204c103d49ed539b118cc0f6186e1b78</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageDisplayDriver</name>
    <filename>classIECore_1_1ImageDisplayDriver.html</filename>
    <base>IECore::DisplayDriver</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a1a57607ac78e20a59543b95968f3542f</anchor>
      <arglist>(ImageDisplayDriver, DisplayDriver)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageDisplayDriver</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a9123e5f58b50671367de515a6dd5a416</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, const std::vector&lt; std::string &gt; &amp;channelNames, ConstCompoundDataPtr parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>scanLineOrderOnly</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a57579a4ce76cb2e47c91978e7482b720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>imageData</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>aeaca3ef637675df7e9f04b1ac671e3fd</anchor>
      <arglist>(const Imath::Box2i &amp;box, const float *data, size_t dataSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>imageClose</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a970101a7de31814aaebb9c916e8282bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstImagePrimitivePtr</type>
      <name>image</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a7294fb09a5f9679bc7a176fb17c841cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstImagePrimitivePtr</type>
      <name>storedImage</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>ad5a3e8819491d5eaa590847b0b9e9d26</anchor>
      <arglist>(const std::string &amp;handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstImagePrimitivePtr</type>
      <name>removeStoredImage</name>
      <anchorfile>classIECore_1_1ImageDisplayDriver.html</anchorfile>
      <anchor>a711f123c6c40c4a9517aa210fe9e6e46</anchor>
      <arglist>(const std::string &amp;handle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImagePremultiplyOp</name>
    <filename>classIECore_1_1ImagePremultiplyOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImagePremultiplyOp.html</anchorfile>
      <anchor>a795d888c5e74cc2d91cbe2143452a4fa</anchor>
      <arglist>(ImagePremultiplyOp, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImagePremultiplyOp.html</anchorfile>
      <anchor>a07c0fadfcb5f61135d819cf8838407c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImagePremultiplyOp.html</anchorfile>
      <anchor>a4fb79d979e661887c59b018fe89f5834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1ImagePremultiplyOp.html</anchorfile>
      <anchor>aec7baf4a99c251a3df7fb3e7c34cebbf</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImagePremultiplyOp.html</anchorfile>
      <anchor>a7f71a7082cadd0ba874eb621118de3b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImagePrimitive</name>
    <filename>classIECore_1_1ImagePrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a2968fae9c88abe6fa651a44de4e84f1d</anchor>
      <arglist>(ImagePrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImagePrimitive</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a67aca895ba60a3224be387f7d17bce5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImagePrimitive</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a9c418a7f57955dd08ad4fa2bcb416a40</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>afef8c5f665afa6c91c997185da319af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Imath::Box2i &amp;</type>
      <name>getDataWindow</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a2a64c069deb18cc508286aa82287b290</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataWindow</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a0777f2eb2fbca7db7330fe9ab937649e</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow)</arglist>
    </member>
    <member kind="function">
      <type>const Imath::Box2i &amp;</type>
      <name>getDisplayWindow</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ac2b81fb7f824be96ebf57f2d42b77439</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayWindow</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a3c6c00610fd08e0fe1c765c30446326e</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a7b85fc968ad4629831953bce99997f57</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a26cddd56796314619c33da5bf3a1a5db</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>channelValid</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a9dc8eed9e1d1c2e0c9f80fd73c5a2aba</anchor>
      <arglist>(const PrimitiveVariable &amp;pv, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>channelValid</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a861b9d2e92a0674313c76abae09dc65c</anchor>
      <arglist>(const std::string &amp;name, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ae38ff225da6cc1a43b7e89701ebeba92</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>TypedData&lt; std::vector&lt; T &gt; &gt; *</type>
      <name>getChannel</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ac29e90789e94042109bef56f973830e0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const TypedData&lt; std::vector&lt; T &gt; &gt; *</type>
      <name>getChannel</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a9a1fade52dfabc34b5f95e70aff38d60</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>TypedData&lt; std::vector&lt; T &gt; &gt; *</type>
      <name>createChannel</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ae6aad3f84dd28df5f9e018794c3b02e3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createRGB</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ad3abcc55e8729f6baf2af9f980325aff</anchor>
      <arglist>(const Imath::Color3&lt; T &gt; &amp;fillColor, const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createGreyscale</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>ab5389067d8bc8be19ecd937afb85baf0</anchor>
      <arglist>(const T fillValue, const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow)</arglist>
    </member>
    <member kind="enumeration">
      <name>Space</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a3a4d8c650514bc141718cb929dbe27b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>objectToUVMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a0f669873f804b29d7a48b7d91515439f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>uvToObjectMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>acd5ce28e563bec1ad10b4970694882e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>objectToPixelMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>af754df90cb07e6ce5912c256a5726447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>pixelToObjectMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>aa80416d25580ca50d6bbc98bb7ac3d3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>pixelToUVMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>af8ae6818efb543a226ff4fcd0a02e9cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>uvToPixelMatrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a4491aaeb2beb0738e84bffcc8b77ff6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Imath::M33f</type>
      <name>matrix</name>
      <anchorfile>classIECore_1_1ImagePrimitive.html</anchorfile>
      <anchor>a5c4703bcbc8ae6db0717adae13341c5d</anchor>
      <arglist>(Space inputSpace, Space outputSpace) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImagePrimitiveEvaluator</name>
    <filename>classIECore_1_1ImagePrimitiveEvaluator.html</filename>
    <base>IECore::PrimitiveEvaluator</base>
    <member kind="typedef">
      <type>ImagePrimitive</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a628ba487d6845350a8bca92af1bcab6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>ac1b8128b33fd2c6af2c462c998141403</anchor>
      <arglist>(ImagePrimitiveEvaluator, PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a9f03b9000a0c86b2043d30de00ad29b3</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImagePrimitiveEvaluator</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a1823112868a1ab2e40d6609ca077b234</anchor>
      <arglist>(ConstImagePrimitivePtr image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a912741a53763140bf6d48a7bf5cb6fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrimitiveEvaluator::ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a038b74fe00ef73f3bd4a47ea3d3b7ecb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>aa64fb48020277e32dd48cc93e5f48813</anchor>
      <arglist>(PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a775dd27fede6aadd4a22ea7ec46d6012</anchor>
      <arglist>(const Imath::V3f &amp;p, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a612e7b1f068af25c7fd32096baae33fd</anchor>
      <arglist>(const Imath::V2f &amp;uv, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtPixel</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a67464a7d34d196f91e470e45e9ea76ab</anchor>
      <arglist>(const Imath::V2i &amp;pixel, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a4796ebe8642b819dba871d3c2b0751cf</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, PrimitiveEvaluator::Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a9a3634dfa50d424e07895fb1e37d2dea</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a76f50f476503df8290c795d046b5f59d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a6cecbf131d70031154af5b2d9e1405c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a9de1080de46098aef9717c886d95f086</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariableMap::const_iterator</type>
      <name>R</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a44330dd8146671f33442b96e57107356</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariableMap::const_iterator</type>
      <name>G</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>aa3c21a810d1737b636fcde64fc75d44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariableMap::const_iterator</type>
      <name>B</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a4f4d4c9f0cee02d632cf5bd779ae7bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariableMap::const_iterator</type>
      <name>A</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>af110be40dede5dfdc6017348d0d7265a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariableMap::const_iterator</type>
      <name>Y</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a9334ca284cca3a90cf70cf13d086a982</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>acb37bc1b856a9dc4fe767567cbc3c27e</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstImagePrimitivePtr</type>
      <name>m_image</name>
      <anchorfile>classIECore_1_1ImagePrimitiveEvaluator.html</anchorfile>
      <anchor>a97e871278ff2ee3b037f5561631eba0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageReader</name>
    <filename>classIECore_1_1ImageReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>af483e1aa2986eaa00195fbf94492c589</anchor>
      <arglist>(ImageReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageReader</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>ac3c02717eb047acebffc9c8f01042187</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>af76bb435c54852d9b9d8d8f067359086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Box2iParameter *</type>
      <name>dataWindowParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a8588683bc5b51ed61c238b3ef88bfbeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box2iParameter *</type>
      <name>dataWindowParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a3ea0d8448f912554a070d4b00aca7b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box2iParameter *</type>
      <name>displayWindowParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>ae47bb542b064e5d536a069f2728d2563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box2iParameter *</type>
      <name>displayWindowParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a312e7011d264139878ccb5dd0b2f3de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>aa03b98a690ed2f81083e914e90f2ac85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a45b6d4a87e9f077bd6303d40334bc1e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>colorspaceParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a36c301d513ef6eb8ad693c5556afcc72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>colorspaceParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>ac4dc18746d97517296b78540dac07c8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>rawChannelsParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a00beb959fd4b30328445a4b43544a177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>rawChannelsParameter</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a7bbf6e69243a8bbb8f2c742b5e671e67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a462576580646b7d16ac9fe280c2cf6a7</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>af50775052b56529708dc9c1762611895</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>ac6e8f593bd19dbe189f73c51ced072fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a078b85f098ae64791430db64cef8d98e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>DataPtr</type>
      <name>readChannel</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a4b0d4141640d86095e39e16f8bc4186f</anchor>
      <arglist>(const std::string &amp;name, bool raw=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>acf710671cb2885deed558724743dcab6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>channelsToRead</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a50086c37c87b45987995c88254a99f7a</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Imath::Box2i</type>
      <name>dataWindowToRead</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a20e751eff0963ddb2803617f2863ef1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a84442a0f3463bff50e42bc3916b11532</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual DataPtr</type>
      <name>readChannel</name>
      <anchorfile>classIECore_1_1ImageReader.html</anchorfile>
      <anchor>a9e5afcd67c3d1e7491ad36b01b54d0c8</anchor>
      <arglist>(const std::string &amp;name, const Imath::Box2i &amp;dataWindow, bool raw)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageThinner</name>
    <filename>classIECore_1_1ImageThinner.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageThinner.html</anchorfile>
      <anchor>aab8378e0c7ed90cf7d96e08cece61fb4</anchor>
      <arglist>(ImageThinner, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1ImageThinner.html</anchorfile>
      <anchor>a29eed855830d52b6898c09251029c449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1ImageThinner.html</anchorfile>
      <anchor>a797ad3b3945266b3811887b5b2afedd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1ImageThinner.html</anchorfile>
      <anchor>aa87065e7e4162f07eee0c2cb26eef8bb</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageUnpremultiplyOp</name>
    <filename>classIECore_1_1ImageUnpremultiplyOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ImageUnpremultiplyOp.html</anchorfile>
      <anchor>a04c3d7a912f3970d584bcf4e3f3fa712</anchor>
      <arglist>(ImageUnpremultiplyOp, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageUnpremultiplyOp.html</anchorfile>
      <anchor>a7fedac06e7814a74f9224f0e274d5fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageUnpremultiplyOp.html</anchorfile>
      <anchor>af7e51f609f13359b41f800b02606cc02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1ImageUnpremultiplyOp.html</anchorfile>
      <anchor>adb210efdf553be6e1a43638b0923e173</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_alphaChannelNameParameter</name>
      <anchorfile>classIECore_1_1ImageUnpremultiplyOp.html</anchorfile>
      <anchor>ae5fdcc01df1283c8f192782b17d33d1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImageWriter</name>
    <filename>classIECore_1_1ImageWriter.html</filename>
    <base>IECore::Writer</base>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>aa2edcd07c45a2ad4be2014fd47e36d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>channelNamesParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>a4dae40783a3ef7e2ecd78a7399fd0077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>colorspaceParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>ae61855cfe6ac75e6a17cdc6be8fe73a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>colorspaceParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>ace508e7ef8f47a173d9d6fda3c1a3a2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>rawChannelsParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>a961792ab11d284db663c4a38bc9c094c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>rawChannelsParameter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>ae2e50a91024051668c10f8302652ded1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageChannels</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>a776db2ae1470db5608ec4fa66f91614e</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>aa9d6f8d1234ea3811be0d483ed7c8804</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canWrite</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>aff208e3d515b2ba8e26f0876325653c5</anchor>
      <arglist>(ConstObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageWriter</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>a18b8eff54b9935eed1fc3d41c3caff97</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ImagePrimitive *</type>
      <name>getImage</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>a57ce9a756530d02f4e180904cf42cc52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>writeImage</name>
      <anchorfile>classIECore_1_1ImageWriter.html</anchorfile>
      <anchor>aa9ad5ceb82409964e7700b32e9415e83</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names, const ImagePrimitive *image, const Imath::Box2i &amp;dataWindow) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImathRandAdapter</name>
    <filename>classIECore_1_1ImathRandAdapter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ImathRandAdapter</name>
      <anchorfile>classIECore_1_1ImathRandAdapter.html</anchorfile>
      <anchor>ae4409061dd99fcfe9a3c6867651efbed</anchor>
      <arglist>(unsigned long int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1ImathRandAdapter.html</anchorfile>
      <anchor>abaf805b5d443ac79ee9ef4f65af1c5c8</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ImplicitSurfaceFunction</name>
    <filename>classIECore_1_1ImplicitSurfaceFunction.html</filename>
    <templarg>P</templarg>
    <templarg>V</templarg>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a177782dc4547e151ae1e1dad6c1cbfd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a207affeaf1225b98fd23303f00aab0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae9e25e2b2850ece33be4ea68191d78b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>af049a8ffb36ae7b7926e567660af5880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6017e713442081baf5e5c30b3329d793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a88af9d14be53eb2099f6e8fa7baf5839</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSurfaceFunction&lt; P, V &gt;</type>
      <name>Fn</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>ad810d341037481ecb36a20120827ca4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a14176c8bd12891763d4bb0e8b87b6840</anchor>
      <arglist>(Fn)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>a1769089fe8297a6d839a3091315519f9</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1ImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae30211dd626c8185e8f7a4da8a231203</anchor>
      <arglist>(const Point &amp;p)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIOFilter</name>
    <filename>classIECore_1_1IndexedIOFilter.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1IndexedIOFilter.html</anchorfile>
      <anchor>a6f5c0c5bbdc255f610e1ebfd008a6277</anchor>
      <arglist>(IndexedIOFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classIECore_1_1IndexedIOFilter.html</anchorfile>
      <anchor>a2a028a70894a153e5ce805e6ae778491</anchor>
      <arglist>(const IndexedIOFilterPtr &amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>apply</name>
      <anchorfile>classIECore_1_1IndexedIOFilter.html</anchorfile>
      <anchor>abfb5a19e27621ead66238ce976220eea</anchor>
      <arglist>(IndexedIO::EntryList &amp;l)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>filter</name>
      <anchorfile>classIECore_1_1IndexedIOFilter.html</anchorfile>
      <anchor>a550e1939e9c037fb5d51c96dbff521d8</anchor>
      <arglist>(const IndexedIO::Entry &amp;e) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIONullFilter</name>
    <filename>classIECore_1_1IndexedIONullFilter.html</filename>
    <base>IECore::IndexedIOFilter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1IndexedIONullFilter.html</anchorfile>
      <anchor>a7cffa40ac8c86b0dce19990c621efe30</anchor>
      <arglist>(IndexedIONullFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>filter</name>
      <anchorfile>classIECore_1_1IndexedIONullFilter.html</anchorfile>
      <anchor>ae7fd5b5bda6726f98c91c7d805943ef1</anchor>
      <arglist>(const IndexedIO::Entry &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIOEntryTypeFilter</name>
    <filename>classIECore_1_1IndexedIOEntryTypeFilter.html</filename>
    <base>IECore::IndexedIOFilter</base>
    <member kind="function">
      <type></type>
      <name>IndexedIOEntryTypeFilter</name>
      <anchorfile>classIECore_1_1IndexedIOEntryTypeFilter.html</anchorfile>
      <anchor>aa3bce39d48c3b43b0229bc8793703495</anchor>
      <arglist>(IndexedIO::EntryType typ)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1IndexedIOEntryTypeFilter.html</anchorfile>
      <anchor>a87459f25a95c55d1d5af81fcf4439bd1</anchor>
      <arglist>(IndexedIOEntryTypeFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>filter</name>
      <anchorfile>classIECore_1_1IndexedIOEntryTypeFilter.html</anchorfile>
      <anchor>abd49fa2d699a3e400818705803e3c1a5</anchor>
      <arglist>(const IndexedIO::Entry &amp;e) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexedIO::EntryType</type>
      <name>m_entryType</name>
      <anchorfile>classIECore_1_1IndexedIOEntryTypeFilter.html</anchorfile>
      <anchor>ae340310a5e88fe353531097e625831dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIORegexFilter</name>
    <filename>classIECore_1_1IndexedIORegexFilter.html</filename>
    <base>IECore::IndexedIOFilter</base>
    <member kind="function">
      <type></type>
      <name>IndexedIORegexFilter</name>
      <anchorfile>classIECore_1_1IndexedIORegexFilter.html</anchorfile>
      <anchor>ae6987ad49aba5f41c15c7072a3937e42</anchor>
      <arglist>(const std::string &amp;regex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1IndexedIORegexFilter.html</anchorfile>
      <anchor>a8963af9aa4cb4989b3d3894f429a3ab9</anchor>
      <arglist>(IndexedIORegexFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>filter</name>
      <anchorfile>classIECore_1_1IndexedIORegexFilter.html</anchorfile>
      <anchor>af5feafe97d8fcaf8af12e337ff694014</anchor>
      <arglist>(const IndexedIO::Entry &amp;e) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::regex</type>
      <name>m_regex</name>
      <anchorfile>classIECore_1_1IndexedIORegexFilter.html</anchorfile>
      <anchor>a58b9a860e81a60b1da010b102a0fb2c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIOInterface</name>
    <filename>classIECore_1_1IndexedIOInterface.html</filename>
    <base>IECore::RefCounted</base>
    <class kind="struct">IECore::IndexedIOInterface::Description</class>
    <member kind="typedef">
      <type>IndexedIOInterfacePtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a6768f866ce817b650fcd121bee182d1f</anchor>
      <arglist>)(const std::string &amp;, const IndexedIO::EntryID &amp;, IndexedIO::OpenMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aaaf3260522ee4bee95ff0652734642f8</anchor>
      <arglist>(IndexedIOInterface)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexedIO::OpenMode</type>
      <name>openMode</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a69581747602837b5ee8dfe4bff2e556f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexedIOInterfacePtr</type>
      <name>resetRoot</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a29fc40e5bc60e8c18a0b77f5acd46d2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>chdir</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a7b4db2f7355f0d60a143240cabbfda98</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mkdir</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a261d0bcbaa61b596fc77f7f36b6d15a3</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexedIO::EntryID</type>
      <name>pwd</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a1a2a8be652f6800207a1649ca4bfbb6b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexedIO::EntryList</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>afe0a94d262e1990f26cb0f46461b74d0</anchor>
      <arglist>(IndexedIOFilterPtr f=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexedIO::Entry</type>
      <name>ls</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a8fd0070c2cd6d81d88bd8ac7ec5e0fa7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>rm</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a6e827947489b970bf077e5fe1f38f30c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a14736ea59f6e7a8fc362837d12850fdb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ac7f8f31fa96e6189570dd3f1b79c67f9</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a0b3c01ddf154382b424f5003e48410ca</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a8503e62cab5750ba3077fa9e199f4371</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ae8e3335d5f6c92d423223d6d8b43eee9</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>abb5030737d651ac6ccc5d38420410ce0</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aea323847c68c43a876c0640b0e932a54</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a1c668d8116992eaefd03de76b890388f</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aa81e6480a79492ad689f970452abf250</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ab8671ddce7c13560a31820a996d160ea</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>acb782d9cc33744c00123b5d5a51eb1d8</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aef1b11df6778f5d1b1b8773205634545</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string *x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a6230b02c5666709f72b86db1c7e39863</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const float &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a68317a0a7374ef8aead3b0981de4b24d</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const double &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a6abec78fbf75d7ef88fb2418af67ef20</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const half &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aeed16d78214b1a1eb6156063a6c49952</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>aa596d6a2d11fe5172c9f7a19db730282</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const int64_t &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a29c18b8a0bb23302ca945db7647a95bd</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const uint64_t &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ae713e80ea7788b861f6be6b47635b964</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const std::string &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a500e9eb923a1318cd15c71c9e6549226</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned int &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a12901e1f454670ea35e327843cac03f1</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const char &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a0c2c5dfeb068e89dec6773d7e8d00740</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned char &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a2968dcf89d2182175423566808f89d8c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const short &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a0e3298819f85dd30c6952bc1e6a59fff</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, const unsigned short &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a4839afbe3dbf937c6d4e5d770bd26235</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ab7acfa1d0fa7f6dae834677e47aada42</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a765d35c71497e2b4b0ecaa8ca9efbc56</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a9012e8c6a955c3b4a603ba9ee955f2cc</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a22a014911e5d9c25a04dc230e1b70383</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a7b82bb7e91b22cab87611f38e5330f0c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a1292cf6c1f8197fd2ae72920bc39d4c2</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a4e05a4775b2772edba5bb9b4233b6a04</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a187636d62bacf78ed2b5c453da8fc123</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>af0280244ce8c6c9b385bf3f647a878da</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>adc5cbdff5cb88852b282f6cf34e8bae7</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a97383979f85aabc7a441583773ad8f39</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string *&amp;x, unsigned long arrayLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a5fc8e98c8e826327bc40b7dfa4554bdc</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, float &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a71d6c5032adbf844d92f9f19947bb10e</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, double &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>ad933e90ac84ec65f7a30fc67e9b976fb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, half &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a1fc99ef3c557c1d1bcd4d57530904f1b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a26acb03b9cdfba6724f31ba8bf487ebe</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, int64_t &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a549cc60e42984b70f5551ba5ba6f98cf</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, uint64_t &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>af3431bf6a6b110edbb9dc58cbf8b8067</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, std::string &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a02f18fe9eb098d772b0b612e5bdcec2a</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned int &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a776b4c0ffcafc43b0343c1adcde36307</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, char &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a9d0c8c957a948231c864ba38cc6b89d4</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned char &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a75538d4e316bdb4fa4d57e580de86adb</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, short &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a90f106948fd1feb0a7ee48ef7989d606</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name, unsigned short &amp;x)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IndexedIOInterfacePtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a89bc8a67c39bd809c3442df3201e292e</anchor>
      <arglist>(const std::string &amp;path, const IndexedIO::EntryID &amp;root, IndexedIO::OpenMode mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a36d5e33ffd80ffef6ff5d2bd9e251a1b</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>readable</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a379d6cbd01c6c9e4cded4ce6b57aa94b</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writable</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a69b46f50c46aca1ff27526e035c6de2c</anchor>
      <arglist>(const IndexedIO::EntryID &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateOpenMode</name>
      <anchorfile>classIECore_1_1IndexedIOInterface.html</anchorfile>
      <anchor>a7ce6bdcded233023b446bd49078f9787</anchor>
      <arglist>(IndexedIO::OpenMode &amp;mode)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::IndexedIOInterface::Description</name>
    <filename>structIECore_1_1IndexedIOInterface_1_1Description.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>structIECore_1_1IndexedIOInterface_1_1Description.html</anchorfile>
      <anchor>a6d67caee4efbc5c30fb566af1e90a745</anchor>
      <arglist>(const std::string &amp;extension)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIOPath</name>
    <filename>classIECore_1_1IndexedIOPath.html</filename>
    <member kind="function">
      <type></type>
      <name>IndexedIOPath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a76334e1660d539e8e0193fe3c66f1a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedIOPath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a4dc7b2e43bd40d68641128e88d7b42af</anchor>
      <arglist>(const std::string &amp;root, const std::string &amp;path=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a4ec70469b5044f35a030db314b8ed78c</anchor>
      <arglist>(const IndexedIOPath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>rootPath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>ad04020b7b7738b55a22adac1eb8a480d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>relativePath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a8638f010b0a1d8b5eab6117950678830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>fullPath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a675b88e07b7e300599dfb06782c9bd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a44bfb9346178a55cd9fc7a86b0a00dca</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOPath</type>
      <name>appended</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>aad1905dcbb240003b13e6845aa007526</anchor>
      <arglist>(const std::string &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>head</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>ad6690423dce2b29270aee0392703bf6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tail</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a82ed2bd99806b185b5f3ef737e67a2d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRootDirectory</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a0f27b2b44e9cea3a96114d6944280e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>validFilename</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a3238df32d77ceb96071a0107ee576e29</anchor>
      <arglist>(const std::string &amp;n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>g_separator</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a8472dba97810e5f12283da476ae551df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a47c667b08500826fb89c84739fb11a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildPath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a3dc62078ef5116c052f56abcf9949414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildRelativePath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>ae0b34dff1d16a6eac8bbeec514fe490c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_root</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a54fac637bb280bf07e9bdff47a590105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVector</type>
      <name>m_relativePathParts</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a050763a0580f2dcc9e5bc7d26775c3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_relativePathValid</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a2328dab6c7cf69c4f6e25a1910ea1b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_relativePath</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>acd5cdc993fd1404f6c1172a5c6e0d5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_pathValid</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>aeda9f0566645df60559d6f3764569be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_path</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a979a37a57d413a9f4a131b6eaf0f2bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_relativePathSize</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a61914416f93a9540a4ceef32b5b03e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_rootSize</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>aa9be4876373345268da92019be51b8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_isAbsolute</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a4f2569b35d9c574a3733052aa0efeba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_headValid</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a5f236cd5602099eb33722d430584ac2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_head</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a89a9937793db4a8c20121760d8791811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_tailValid</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>aa74ea0a96d0f8591cac75272899689f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_tail</name>
      <anchorfile>classIECore_1_1IndexedIOPath.html</anchorfile>
      <anchor>a8b543ab4f92ffca61325192848a07c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Interned</name>
    <filename>classIECore_1_1Interned.html</filename>
    <templarg>T</templarg>
    <templarg>Hash</templarg>
    <member kind="function">
      <type></type>
      <name>Interned</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>af358fec200e4895d70a7fda061c312e8</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interned</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>af60ced56bbf491d4246324edc779346e</anchor>
      <arglist>(const Interned&lt; T, Hash &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interned</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>a62df0f2361bfa8d4d66b50622167d710</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interned</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>a0ff367d22bdbf38f764f39acb4c31af3</anchor>
      <arglist>(const S &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>adbc699eee609727880399839e14c05d7</anchor>
      <arglist>(const Interned&lt; T, Hash &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>abcf7f15dbb1db3f1c5bf2c396e5bcb15</anchor>
      <arglist>(const Interned&lt; T, Hash &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>a9e23c3914e87e946682d5223011729e9</anchor>
      <arglist>(const Interned&lt; T, Hash &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>a3564af33394b4d4766ee7f603ce2e532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>aa2a66766114d8bcf7aef1f7100b379a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>size</name>
      <anchorfile>classIECore_1_1Interned.html</anchorfile>
      <anchor>a1fb141f2283b46b537e347b788a5047d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::InterpolatedCache</name>
    <filename>classIECore_1_1InterpolatedCache.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>IECore::AttributeCache::ObjectHandle</type>
      <name>ObjectHandle</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a504e76ecbf7fc4d13d5174fff69c900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IECore::AttributeCache::HeaderHandle</type>
      <name>HeaderHandle</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a6abf4d4f5e26a5b2c96a91a64d76ef25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IECore::AttributeCache::AttributeHandle</type>
      <name>AttributeHandle</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>ae24fb549b61147ac2107d6877bf81094</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a8b3b8f8ab48ab57efe4628ba00631469</anchor>
      <arglist>(InterpolatedCache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatedCache</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a83b4380eb6ef3e3895c30af629ebf703</anchor>
      <arglist>(const std::string &amp;pathTemplate=&quot;&quot;, Interpolation interpolation=None, const OversamplesCalculator &amp;o=OversamplesCalculator(), size_t maxOpenFiles=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPathTemplate</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a6d34769c3ea9287adf446f884c09cd20</anchor>
      <arglist>(const std::string &amp;pathTemplate)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPathTemplate</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a41a321520952bc68fdff11de4ff2283a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxOpenFiles</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a61679f66907cdc07052c972f40da1b0c</anchor>
      <arglist>(size_t maxOpenFiles)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxOpenFiles</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>aa398fe752136c75b219b58c3192ddf5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolation</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a534eb16efaba944c02fdd136dd74fd38</anchor>
      <arglist>(Interpolation interpolation)</arglist>
    </member>
    <member kind="function">
      <type>Interpolation</type>
      <name>getInterpolation</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>ae5c0b94e40d161a6c93f25848744e0f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOversamplesCalculator</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>aeb42aed122406c248b63e1a1dfda9c6d</anchor>
      <arglist>(const OversamplesCalculator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const OversamplesCalculator &amp;</type>
      <name>getOversamplesCalculator</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a2673f980982ef7f41772ba549ee94e4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>add244fda00cfba4e5f5781205fa3dec7</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj, const AttributeHandle &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>ad9799300502c275bd7c857c44de6c485</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj) const </arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a374aa4393bda7394152d71322e7de48a</anchor>
      <arglist>(float frame, const HeaderHandle &amp;hdr) const </arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a49791b8975fcadc5f4756572f2bbff1f</anchor>
      <arglist>(float frame) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objects</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a4b2995928f6cc6c2f3444361ac3cc33e</anchor>
      <arglist>(float frame, std::vector&lt; ObjectHandle &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>headers</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a7fa184a0e521cc5b3b34f3b7776f1b6f</anchor>
      <arglist>(float frame, std::vector&lt; HeaderHandle &gt; &amp;hds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>aa50b320f51318e613df3a881c742e95c</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj, std::vector&lt; AttributeHandle &gt; &amp;attrs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attributes</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a8bcfef652d2e9e7461e419e1cb020ad5</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj, const std::string regex, std::vector&lt; AttributeHandle &gt; &amp;attrs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>a0149f77507b0e49ad472ea88ab431d32</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classIECore_1_1InterpolatedCache.html</anchorfile>
      <anchor>abf6918c60bbdf6e52a1575186b50e4b5</anchor>
      <arglist>(float frame, const ObjectHandle &amp;obj, const AttributeHandle &amp;attr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IntrusivePtr</name>
    <filename>classIECore_1_1IntrusivePtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a5d4a4bf8f3be8321a10c1ff8d708a948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrusivePtr</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a84325e37a47346ecf583dcf05f045ba5</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrusivePtr</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a146b62d07bc5e8a43baa811402fb7312</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntrusivePtr</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a34f621c4818e97ac3edea9b3151b596c</anchor>
      <arglist>(IntrusivePtr const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a0408f9472fc155932a29f50a7e73e176</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a19220327c109478e862404aaa156fefe</anchor>
      <arglist>(IntrusivePtr const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntrusivePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a6d7051fc95c506c2dcea51fa38bf1506</anchor>
      <arglist>(T *rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a661a28e964e7b3490fd1dd63a9dd8188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>aba53b17f1c5682316cf88d8751c58ef8</anchor>
      <arglist>(T *rhs)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a222eb04d7454b6aef2be02e24f71081e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a77971e220b81d1e921ec351ae768446a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a4da01d762939421a94c4f0b36d324a68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a2de3a7753029bb8d2387d367c5cde93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T const *</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a7d7e3f7ff1103cde61a5737cf2c4a07c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>aff1cfc0900c2e1932f8ef05df3502401</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>abcc06acfdc33b0b964cc1d14b0a60802</anchor>
      <arglist>(IntrusivePtr&lt; U &gt; const &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>aa51dc4b7e3a5d9d3f15a7ed89076284b</anchor>
      <arglist>(U *b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a7b4d4132d1cbe9eae4c95cd7f3dae25b</anchor>
      <arglist>(U *b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a25300ad7c1151075e6aec001d0b28362</anchor>
      <arglist>(IntrusivePtr const &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classIECore_1_1IntrusivePtr.html</anchorfile>
      <anchor>a7d32378e0a71d017034843ffa28a2e68</anchor>
      <arglist>(IntrusivePtr &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::InverseDistanceWeightedInterpolation</name>
    <filename>classIECore_1_1InverseDistanceWeightedInterpolation.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::iterator_traits&lt; PointIterator &gt;::value_type</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a06ee6684ddd7039c3bdb2e2a16b384e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; Point &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a577426007c5bc4756249fc06b5d0a193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; PointIterator &gt;</type>
      <name>Tree</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>aeb87408b3290faf78895a9c00fbff554</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; typename Tree::Neighbour &gt;</type>
      <name>NeighbourVector</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a840b773199bc88b1bd596ef16072f5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; ValueIterator &gt;::value_type</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a875aec0d520be475a0b5a5a07c7bf509</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseDistanceWeightedInterpolation</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>afad9208d4fa593225a0ccbb7cfb9130a</anchor>
      <arglist>(PointIterator firstPoint, PointIterator lastPoint, ValueIterator firstValue, ValueIterator lastValue, unsigned int numNeighbours, int maxLeafSize=4)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a194de93023fdb7be34bdde2037a04565</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1InverseDistanceWeightedInterpolation.html</anchorfile>
      <anchor>a87e870f73bf56f13a02cc86b1d9733ba</anchor>
      <arglist>(const Point &amp;p, NeighbourVector &amp;neighbours) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::JPEGImageReader</name>
    <filename>classIECore_1_1JPEGImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>abe63eafc7b03591022a9635fb2086e60</anchor>
      <arglist>(JPEGImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JPEGImageReader</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>adb22c5d075a9b1a86165c4f4fc1799ff</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>a0951d967cdf8104d9891655cb2460b3d</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>a439b30f3eb5880fba6f51c104c26d406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>ac2da3f252e642df4123fbd000121d57e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>a7a76cd456e9a4f2143663947fa5682f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>a8d82ae1e9b9ca87f015046d7e23ca814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1JPEGImageReader.html</anchorfile>
      <anchor>af0b75a47a06f4f51fbf5f340db97ace9</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::JPEGImageWriter</name>
    <filename>classIECore_1_1JPEGImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>JPEGImageWriter</name>
      <anchorfile>classIECore_1_1JPEGImageWriter.html</anchorfile>
      <anchor>a9aacc6055978370f6d5a27886cf210c3</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1JPEGImageWriter.html</anchorfile>
      <anchor>a299b1c7ff386408ebe53a5c162de15ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>qualityParameter</name>
      <anchorfile>classIECore_1_1JPEGImageWriter.html</anchorfile>
      <anchor>a54dcb9773877cb03a08b452da46cba19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>qualityParameter</name>
      <anchorfile>classIECore_1_1JPEGImageWriter.html</anchorfile>
      <anchor>a5503eaa95b101073dd814338da4bea46</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::KDTree</name>
    <filename>classIECore_1_1KDTree.html</filename>
    <templarg>PointIterator</templarg>
    <class kind="class">IECore::KDTree::Neighbour</class>
    <class kind="class">IECore::KDTree::Node</class>
    <member kind="typedef">
      <type>PointIterator</type>
      <name>Iterator</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a6063bbd1ce5f8db49d84f6639c02708f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; PointIterator &gt;::value_type</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a26b6be17b9c64fa5fb9d88ed76b31084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; Point &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a7c19ddfab1cd96feaf8b7fded7b4ed69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Node &gt;</type>
      <name>NodeVector</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>ae901b4e33355a34f80f0392540089023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeVector::size_type</type>
      <name>NodeIndex</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a87bcc0e61e181f994d2a16d14814f5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a6ea67b738ec45bbbb7bb04ff4d5dc3a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a30386a93e0b3a839338ad361c2c88119</anchor>
      <arglist>(PointIterator first, PointIterator last, int maxLeafSize=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a762c92d5ee04b0fd34730aa09d570aa5</anchor>
      <arglist>(PointIterator first, PointIterator last, int maxLeafSize=4)</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>nearestNeighbour</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a306cdd8cddc075f56cd1d1929ba9c6cd</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>nearestNeighbour</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a8f6f5132c575e08b526c38dd0b4cbd47</anchor>
      <arglist>(const Point &amp;p, BaseType &amp;distSquared) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nearestNeighbours</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a64fa750bf4652160b894b891c2758adc</anchor>
      <arglist>(const Point &amp;p, BaseType r, std::vector&lt; PointIterator &gt; &amp;nearNeighbours) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nearestNNeighbours</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>aaf07f29e8a560e65be5a0449f07f0570</anchor>
      <arglist>(const Point &amp;p, unsigned int numNeighbours, std::vector&lt; Neighbour &gt; &amp;nearNeighbours) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enclosedPoints</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a3d86d6c90e0526731164ce620ae37186</anchor>
      <arglist>(const Box &amp;bound, OutputIterator it) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>numNodes</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>adfb6e4aeb913904e2d78115e3f3a6663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>node</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a3d7cf68dbed44503956ca9bd2007f29c</anchor>
      <arglist>(NodeIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>rootIndex</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a4a4ef0b19518789da95ffdf4e6dd1549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>lowChildIndex</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>ab119c4633732ba4fbd36a779e76b4467</anchor>
      <arglist>(NodeIndex parentIndex) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>highChildIndex</name>
      <anchorfile>classIECore_1_1KDTree.html</anchorfile>
      <anchor>a50b21a787ea4f9ced98b5caff329cf2f</anchor>
      <arglist>(NodeIndex parentIndex) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::KDTree::Neighbour</name>
    <filename>classIECore_1_1KDTree_1_1Neighbour.html</filename>
    <member kind="function">
      <type></type>
      <name>Neighbour</name>
      <anchorfile>classIECore_1_1KDTree_1_1Neighbour.html</anchorfile>
      <anchor>ade9018c861b143a353066fc9fff4e392</anchor>
      <arglist>(Iterator p, BaseType d2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIECore_1_1KDTree_1_1Neighbour.html</anchorfile>
      <anchor>a3c3f9d7d3ce9f2fb4a31ef4197db0b8f</anchor>
      <arglist>(const Neighbour &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Iterator</type>
      <name>point</name>
      <anchorfile>classIECore_1_1KDTree_1_1Neighbour.html</anchorfile>
      <anchor>a7b6310ee2671418b0cd037503cba9038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseType</type>
      <name>distSquared</name>
      <anchorfile>classIECore_1_1KDTree_1_1Neighbour.html</anchorfile>
      <anchor>afd77e31edcd7b6eba8681e1c27a66f78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::KDTree::Node</name>
    <filename>classIECore_1_1KDTree_1_1Node.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>a6543560d238ae7eebf19179b3498a402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointIterator *</type>
      <name>permFirst</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>ab47c1c2ca2a6ffc5cdb66e1ac153abd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointIterator *</type>
      <name>permLast</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>a95cbb833f4d8a51505b87c15e7a9ade8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBranch</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>ad5750bec6e212e45c6f259c0d5dc3ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>cutAxis</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>a557f22a158aa9bf4378f599565588c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>cutValue</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>aa81e02fd4a5af7605fce7a7de412dc14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>KDTree&lt; PointIterator &gt;</name>
      <anchorfile>classIECore_1_1KDTree_1_1Node.html</anchorfile>
      <anchor>a9cfb19b379d79866e118bcde1cb4be85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LevelFilteredMessageHandler</name>
    <filename>classIECore_1_1LevelFilteredMessageHandler.html</filename>
    <base>IECore::FilteredMessageHandler</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a30d80f14e4b0ae0e27ed952cfea83a61</anchor>
      <arglist>(LevelFilteredMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelFilteredMessageHandler</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>adeeef36799a0795213527f7b8cbff890</anchor>
      <arglist>(MessageHandlerPtr handler, MessageHandler::Level level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a7de469157408f2314970cb5614b25b35</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>MessageHandler::Level</type>
      <name>getLevel</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a9b229e2e478dd18fc0646827b9fb9e69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a2ec2888540c314f704386910be659893</anchor>
      <arglist>(MessageHandler::Level level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageHandler::Level</type>
      <name>defaultLevel</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a7d69bd96af9753e122ec9b180c95e0b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MessageHandler::Level</type>
      <name>m_level</name>
      <anchorfile>classIECore_1_1LevelFilteredMessageHandler.html</anchorfile>
      <anchor>a80aa6d33fced8d43f82f8163256219a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LevenbergMarquardt</name>
    <filename>classIECore_1_1LevenbergMarquardt.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Traits</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>abaa0c96c8d769573a955b1bae8d54c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ErrorFn</type>
      <name>ErrorFunctionType</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ac33dfcc2e064cce25106889723777375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits&lt; T &gt;</type>
      <name>TraitsType</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>acf5b4bb5e802a7126a00d43512757586</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>abeb05237d3f54878fe5d2548c6d8a815</anchor>
      <arglist>(T ftol=Traits&lt; T &gt;::tolerance(), T xtol=Traits&lt; T &gt;::tolerance(), T gtol=Traits&lt; T &gt;::tolerance(), T epsilon=Traits&lt; T &gt;::machinePrecision(), T stepBound=T(100))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a567abc98a6c8d3d8d7b54554a462246c</anchor>
      <arglist>(T &amp;ftol, T &amp;xtol, T &amp;gtol, T &amp;epsilon, T &amp;stepBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCalls</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a631495092783ac84c1657113739680e1</anchor>
      <arglist>(unsigned maxCalls)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getMaxCalls</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a1e4571226a7c2d06980e89edbf3b3908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>solve</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a45966704dbd8ce39f6563aecc6b54b14</anchor>
      <arglist>(typename TypedData&lt; std::vector&lt; T &gt; &gt;::Ptr parameters, ErrorFn &amp;fn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_ftol</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ada8610d83b4272e49dcc40fc871dce2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_xtol</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a08611e6866472193eef128588f6ac559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_gtol</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a6531701c8d35950c428f32490af67cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_epsilon</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>afc57af997ca93bcaad363ffa44431622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_stepBound</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a397d92a5fe5f8b52a843cf3125076012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_maxCalls</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a80baf4b5107ec38335a3d024bea0be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_numCalls</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a27402754e927e40a2b3fc4b06e2ef9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_m</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a99ef6a6de1d4029ddcb3fe2ad125d266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_n</name>
      <anchorfile>classIECore_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a99e42f36d7ea0c774eb30b46d314ef29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Light</name>
    <filename>classIECore_1_1Light.html</filename>
    <base>IECore::StateRenderable</base>
    <member kind="function">
      <type></type>
      <name>Light</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>ad24e30e8f6afd739fa06e7ec1caf2e54</anchor>
      <arglist>(const std::string &amp;name=&quot;distantlight&quot;, const std::string &amp;handle=&quot;&quot;, const CompoundDataMap &amp;parameters=CompoundDataMap())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>abcb85f7ca17606f833fdc1b71e7d8da3</anchor>
      <arglist>(Light, StateRenderable)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a168dcd496f17d779b29b035176c0059a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a10b733b78a3f50a050b1bb41b05eaa84</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getHandle</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a3049e7feabac68f1b7a755dd4f643cf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandle</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a4d72c450b6aea786f076f1cbd3c93c42</anchor>
      <arglist>(const std::string &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a82c5bab33d72df694825671115572797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>aad66f16f4f5c5420dc38b5080e5d215e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundDataPtr</type>
      <name>parametersData</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>a0a6bf2636a74216698c1f59def449524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Light.html</anchorfile>
      <anchor>ab224c243a5d139a2fa9187f89238d726</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LimitSmoothSkinningInfluencesOp</name>
    <filename>classIECore_1_1LimitSmoothSkinningInfluencesOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LimitSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>abc8625e444c3298ba569504f566c25d6</anchor>
      <arglist>(LimitSmoothSkinningInfluencesOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1LimitSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>a500c2fe9dd4c37cabb0da11ece0d4cc6</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LinearToCineonDataConversion</name>
    <filename>classIECore_1_1LinearToCineonDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>CineonToLinearDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>a331fc7e5175b7f6181ed5d43a7b894bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>a887c5b5452dbc0a0fc3e7fad5646683a</anchor>
      <arglist>(sizeof(T) &gt;=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>a3e56ae5984410c0d11314051c42d1f22</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearToCineonDataConversion</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>abb57950905e94f71129ca1166461b0e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearToCineonDataConversion</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>a671ba97617c2e5fe50d0c3f4a6c903ca</anchor>
      <arglist>(float filmGamma, int refWhiteVal, int refBlackVal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>ad1d545b7fa9367b8f2353f20f90ad92d</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1LinearToCineonDataConversion.html</anchorfile>
      <anchor>a89749626709f8114723fc60d24c53865</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LinearToCineonOp</name>
    <filename>classIECore_1_1LinearToCineonOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a03664a2b0358e28ce49ca92b8718071e</anchor>
      <arglist>(LinearToCineonOp, ChannelOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>filmGammaParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>ae194f6fa6e97dbb6fdc441d5d737e8fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>filmGammaParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a7b0c39a1e1c775d6b52d061b7e0247e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>refWhiteValParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a9bb5f0c0457b5a854dad6d987aad594c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>refWhiteValParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a366c292941e43b94190725615ac4ffd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>refBlackValParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a1690936953342b5effdee7e97ce4481b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>refBlackValParameter</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>afbff0675ac3a348e9de3971e441097c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a4899403cd4711ae275c6f4aed2a3181b</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_filmGamma</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>ab2dec9e9e7be23060f5e92c3d9c70c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_refWhiteVal</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a40daefdaeb7085eb1b875d0271e25bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_refBlackVal</name>
      <anchorfile>classIECore_1_1LinearToCineonOp.html</anchorfile>
      <anchor>a35d98dcb65ff4290a8a3ff89e7675fd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::LinearToPanalogDataConversion</name>
    <filename>structIECore_1_1LinearToPanalogDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>PanalogToLinearDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a0264cfb510be781f496807d0e4ef7189</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a6c66b505bc85ed116c11f728be101f18</anchor>
      <arglist>(sizeof(T) &gt;=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a3c94ed50152ae9c71136a89392635275</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearToPanalogDataConversion</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a62e3554cb508fb99b0593dd2a7263220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearToPanalogDataConversion</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>af387a1ba45c2cca622e20a1c7ebdaea9</anchor>
      <arglist>(float c1, float c2, float c3, float c4)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a554b31af300daab06a8de233dcf78ff4</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1LinearToPanalogDataConversion.html</anchorfile>
      <anchor>a839e917970aa9c43077baca90e5a6e44</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LinearToPanalogOp</name>
    <filename>classIECore_1_1LinearToPanalogOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LinearToPanalogOp.html</anchorfile>
      <anchor>a53556632580588e3ce69cf3d26d589a7</anchor>
      <arglist>(LinearToPanalogOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1LinearToPanalogOp.html</anchorfile>
      <anchor>a2986b1767e8e6cf9282650d4fe7a3ad2</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::LinearToRec709DataConversion</name>
    <filename>structIECore_1_1LinearToRec709DataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>Rec709ToLinearDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1LinearToRec709DataConversion.html</anchorfile>
      <anchor>a65286b698c9c328fecb9519846148cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToRec709DataConversion.html</anchorfile>
      <anchor>ad6df0bdf796250deba30b2f50d407230</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToRec709DataConversion.html</anchorfile>
      <anchor>a6305a0b6666af254d719acf777efe739</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1LinearToRec709DataConversion.html</anchorfile>
      <anchor>aa4d7015f16cad9f6414aee557fe42ba4</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1LinearToRec709DataConversion.html</anchorfile>
      <anchor>a17a622e44afb304c240ce410cd7ae78b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LinearToRec709Op</name>
    <filename>classIECore_1_1LinearToRec709Op.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LinearToRec709Op.html</anchorfile>
      <anchor>aa876907afcb3929ec3472978a8138b1c</anchor>
      <arglist>(LinearToRec709Op, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1LinearToRec709Op.html</anchorfile>
      <anchor>a4f2d0de5ebe24f6275a93c7e797339ae</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::LinearToSRGBDataConversion</name>
    <filename>structIECore_1_1LinearToSRGBDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>SRGBToLinearDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1LinearToSRGBDataConversion.html</anchorfile>
      <anchor>a2debde9d26d63b5bbec8a93e58853f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToSRGBDataConversion.html</anchorfile>
      <anchor>a5e5d7fd7f3376fb4b37d69470ccb487f</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1LinearToSRGBDataConversion.html</anchorfile>
      <anchor>a973d6214a0a8e45856c40927c987a8a1</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1LinearToSRGBDataConversion.html</anchorfile>
      <anchor>aba80536b9264e902727ae36a50157f12</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1LinearToSRGBDataConversion.html</anchorfile>
      <anchor>abf5702461cda6f39fe167776461c9a5b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LinearToSRGBOp</name>
    <filename>classIECore_1_1LinearToSRGBOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LinearToSRGBOp.html</anchorfile>
      <anchor>a35c7fd7d204560f6b1711b347c7bcf45</anchor>
      <arglist>(LinearToSRGBOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1LinearToSRGBOp.html</anchorfile>
      <anchor>a4745b6a575f5f5001f580cd0101652ce</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LineSegment</name>
    <filename>classIECore_1_1LineSegment.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a5b9c534059ffbc0b587b5eb63b7e82fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a177099fd51b96cc2ff3ede6aaff68e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineSegment</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ae70ff9860a935f44d9b0c0ba69c17db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineSegment</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a78ef510637d6317fc8399ba73adece5e</anchor>
      <arglist>(const T &amp;P0, const T &amp;P1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a00cc25ea2c5640a10cdb81e001d6235f</anchor>
      <arglist>(const S &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a7ff2884380ed4abeff5b32b1d6820fa7</anchor>
      <arglist>(const S &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const LineSegment &amp;</type>
      <name>operator*=</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a06bdba390b2ded34ae5963da47d07d27</anchor>
      <arglist>(const S &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>LineSegment</type>
      <name>operator*</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a4a0e0c4b11c8851653e2c112bc91c07d</anchor>
      <arglist>(const S &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ab2ddbd55670150ee702aa553b995d3f5</anchor>
      <arglist>(BaseType t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>direction</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a04b68b813e99dfb853ca9c5a7cfb6faf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>normalizedDirection</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a326fa0e0329e6e678b889aabc7092057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>length</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a427624de987d17b223b3ca51f6f88878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>length2</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a073767ca9ed22ebe52a4185f7988b970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>closestPointTo</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a5f8c5585dca68e3917e719acf1ebf34e</anchor>
      <arglist>(const T &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>closestPointTo</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ada656400dcbb9420827e19cf78512680</anchor>
      <arglist>(const T &amp;point, BaseType &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>closestPoints</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a61472589fb1fa513a97b3fa30df94646</anchor>
      <arglist>(const LineSegment &amp;line, T &amp;otherPoint) const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>distanceTo</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a63c4bef8174640b6f0ac72bc2fbabbf2</anchor>
      <arglist>(const T &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>distance2To</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>af2583fd85e3d8a684f824746025bb713</anchor>
      <arglist>(const T &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>distanceTo</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>acc40accb4e7be9788dda87a7cc92c63c</anchor>
      <arglist>(const LineSegment &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>BaseType</type>
      <name>distance2To</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ae4091e693fa2468e29982fa280d51f02</anchor>
      <arglist>(const LineSegment &amp;line) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersect</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a08980e5776877e547611f3c4c11c74c8</anchor>
      <arglist>(const Imath::Plane3&lt; S &gt; &amp;plane, T &amp;intersection) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectT</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a9bf118d819ac11d4eece1e22eae574ec</anchor>
      <arglist>(const Imath::Plane3&lt; S &gt; &amp;plane, BaseType &amp;t) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ae6db062c7a9dccb7c7ef4a0d040b25d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>p0</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>a31bf2297cdb34b299df70981b25b8569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>p1</name>
      <anchorfile>classIECore_1_1LineSegment.html</anchorfile>
      <anchor>ac098a38376a1dd070399b607b5c36ec4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Lookup</name>
    <filename>classIECore_1_1Lookup.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>XType</name>
      <anchorfile>classIECore_1_1Lookup.html</anchorfile>
      <anchor>a66de59f29f7f78410965ced6a6e71896</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>YType</name>
      <anchorfile>classIECore_1_1Lookup.html</anchorfile>
      <anchor>a8d12b8de599bdd11f29a4e4a2a1e9563</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lookup</name>
      <anchorfile>classIECore_1_1Lookup.html</anchorfile>
      <anchor>a90145d19f853b050dcfe3b0b34e5ee27</anchor>
      <arglist>(const Function &amp;function, XType xMin, XType xMax, unsigned numSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classIECore_1_1Lookup.html</anchorfile>
      <anchor>aecb6a64f5f2283ae1556195c53865e67</anchor>
      <arglist>(const Function &amp;function, XType xMin, XType xMax, unsigned numSamples)</arglist>
    </member>
    <member kind="function">
      <type>Y</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1Lookup.html</anchorfile>
      <anchor>a33b930db9bcaf7f84ad0ae4629089951</anchor>
      <arglist>(X x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LRUCache</name>
    <filename>classIECore_1_1LRUCache.html</filename>
    <templarg>Key</templarg>
    <templarg>Ptr</templarg>
    <member kind="typedef">
      <type>Key</type>
      <name>KeyType</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>ae558b0fbacb3be93c103bac0309ab0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ptr</type>
      <name>PtrType</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>ab02c3ad52da57721a15359eb1a431f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>Cost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>ab756d6d28b2ad275ca9baa070647fb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; Ptr(const Key &amp;key, Cost &amp;cost)&gt;</type>
      <name>GetterFunction</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a0b7726db02b686fcd164957c7d24b7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LRUCache</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>af2fcbc2faf56c4d667a2e0df67d6ee1b</anchor>
      <arglist>(GetterFunction getter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LRUCache</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a9acb5e19a61e1954dcadcf09ea8faa7e</anchor>
      <arglist>(GetterFunction getter, Cost maxCost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a36429c4a672a7b40303eba871f6a4be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>erase</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a589ce9bb237b73eb89b30f9961f0bd60</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>af0ceba2a06676652009d8cf3614621c3</anchor>
      <arglist>(Cost maxCost)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>getMaxCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a6defe6a793db396fe43d67eb1e6bfd54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>currentCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a4cef23143aac3491108d781792736355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ptr</type>
      <name>get</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>aa2fa07bfabbd9c3b7825305cfda193b5</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>ad4a33c3522fc34b91b2a2cdc23ceeac3</anchor>
      <arglist>(const Key &amp;key, const Ptr &amp;data, Cost cost)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cached</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>aecc582422249930926bc38261ccee37e</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Key &gt;</type>
      <name>List</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>aaafbb075e0ccea851ab4a68e959d8881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Key &gt;::iterator</type>
      <name>ListIterator</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a8f4dae93d7fafafdb6d0200a931b9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>tbb::recursive_mutex</type>
      <name>Mutex</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a6ef82bdce434eb1b4778079085608783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, CacheEntry &gt;</type>
      <name>Cache</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a724ddc085cec5ad862347e28db37466a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, CacheEntry &gt;::const_iterator</type>
      <name>ConstCacheIterator</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>ad98d98a400378b4d8d1a1d543cbcc95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>limitCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a634a818c0b695a34ca3d700f6386d53d</anchor>
      <arglist>(Cost cost)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetterFunction</type>
      <name>m_getter</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a464543392c8d1320f2093fa19a1619bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mutex</type>
      <name>m_mutex</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a34db593058c0da4411a487ca58ac29d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cost</type>
      <name>m_maxCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a96f75bc95c0123f0f9541f1d2ccf213c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cost</type>
      <name>m_currentCost</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>af2cc58ffaed6aff053889ae12d700ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List</type>
      <name>m_list</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>abb98e41bcb116fab0fd8c9c4da2cfe47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cache</type>
      <name>m_cache</name>
      <anchorfile>classIECore_1_1LRUCache.html</anchorfile>
      <anchor>a459e13a8e26000c0f3f8d9ed2d41c825</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LuminanceOp</name>
    <filename>classIECore_1_1LuminanceOp.html</filename>
    <base>IECore::PrimitiveOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a659d4383e335349f9c5cee76c1cebe07</anchor>
      <arglist>(LuminanceOp, PrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>colorPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>ad8a20a2ae90ee7391a522df1f5732637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>colorPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>ae8b17b342589f3fb4623064b8c07ddbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>redPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>adb9d34c527d0b8af64b448430d76b33e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>redPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a073b5a2c68e729f1bc9f8d29e4070af8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>greenPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>af71ec7dbe35f7be7e73e5d4fe388e02e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>greenPrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a889a28d462e9f02387c4361bcb784a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>bluePrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a24d56b2f67223a782efe59be3e18a5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>bluePrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>aca9207dd2ea9775a78258fd05a037985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color3fParameter *</type>
      <name>weightsParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>aa6464d8de6761f2c8c1cfe252a359df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color3fParameter *</type>
      <name>weightsParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a7211d9b50e525fdcd509a1c65bae9808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>luminancePrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>aac383ee990177f875ba991760ec216e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>luminancePrimVarParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a5ec8189496a2504a08ee32db924949a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>removeColorPrimVarsParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a4f1194ad0070dfd4ec6525607c981df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>removeColorPrimVarsParameter</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a8d62f16021dcafa1bad5d9d2f9dc9204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyPrimitive</name>
      <anchorfile>classIECore_1_1LuminanceOp.html</anchorfile>
      <anchor>a404d65a07d6cceec114e56f8de477bfb</anchor>
      <arglist>(Primitive *primitive, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MappedRandomPointDistributionOp</name>
    <filename>classIECore_1_1MappedRandomPointDistributionOp.html</filename>
    <base>IECore::UniformRandomPointDistributionOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>a4a9451bb355f0c1848b97da4d41c5822</anchor>
      <arglist>(MappedRandomPointDistributionOp, UniformRandomPointDistributionOp)</arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>adcb544aafaf0b8530703409fb4ac53d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>a26a25f890860952fc194de951a7309bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>a29d64884dfdee64fba5f69f22f4857dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>a01b5c0e46f79fedf785700559f197981</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual float</type>
      <name>density</name>
      <anchorfile>classIECore_1_1MappedRandomPointDistributionOp.html</anchorfile>
      <anchor>a5ca3cc4d029bda98b33c3ce51c29eb66</anchor>
      <arglist>(const MeshPrimitive *mesh, const Imath::V3f &amp;point, const Imath::V2f &amp;uv) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MarchingCubes</name>
    <filename>classIECore_1_1MarchingCubes.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>ImplicitFn</type>
      <name>ImplicitFnType</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a44fddee32f2eced880048541525b0f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshBuilder</type>
      <name>MeshBuilderType</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aaa90fb53a403ca83521734abcae8ccdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFn::Point</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ace35fb46e1b09a7db5f14d2cb856b08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFn::PointBaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>af57478956f9e0ce2b75a79a58ea8b21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFn::ValueBaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a9bc1e8c4c9ba386f3045e80f7006c04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Vec3&lt; PointBaseType &gt;</type>
      <name>Vector</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a3e568eb018b81656fd1996c59e50f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Box&lt; Vector &gt;</type>
      <name>BoxType</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>acca6a1ddf4aba0729eec21794d29d25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ac30fd452ddf1eef812858aee708b3d15</anchor>
      <arglist>(MarchingCubes&lt; ImplicitFn, MeshBuilder &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarchingCubes</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ad41d0242cf8de69d84e8f2e567e12e32</anchor>
      <arglist>(typename ImplicitFn::Ptr fn, typename MeshBuilder::Ptr builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>march</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a5fe8a3701f6520a5bdd02877875b5319</anchor>
      <arglist>(const BoxType &amp;bound, const Imath::V3i &amp;res, ValueBaseType iso=(ValueBaseType) 0.0)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TypedData&lt; std::vector&lt; Imath::Vec3&lt; PointBaseType &gt; &gt; &gt;</type>
      <name>V3xVectorData</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aa13eb0c0efb2100e7716780978ff3877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TypedData&lt; std::vector&lt; Imath::Vec3&lt; PointBaseType &gt; &gt; &gt;::Ptr</type>
      <name>V3xVectorDataPtr</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a9fdad3a3a2105c6a1284c2607cc56980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Point</type>
      <name>gridToWorld</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ada3c3bdf7ba1e8fde369507e16088d2a</anchor>
      <arglist>(const PointBaseType i, const PointBaseType j, const PointBaseType k) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ValueBaseType</type>
      <name>getIsoValue</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>acd0c4eb649147e12cb2e766c80823fe2</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processCube</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ac3f72997314c866a7e41e6e124444ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>testFace</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a771b4c58b5dca5572f31b1c857e9cd16</anchor>
      <arglist>(signed char face)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>testInterior</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ad6c10f866f6bbc15a2be14d51ea393ac</anchor>
      <arglist>(signed char s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeIntersectionPoints</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a2a5107d344fce6248f46e887b96b8709</anchor>
      <arglist>(ValueBaseType iso)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a55e629aa2bfffa68ec34d2acb532c901</anchor>
      <arglist>(const char *trig, char n, int v12=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>addVertexX</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a82cbc7a112ba56e4d52c74a634712c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>addVertexY</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a27b69b8cd6c51f2ad23066f3295c5e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>addVertexZ</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a35bbd4c5af194ec1b1aba0b94e28a763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>addVertexC</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a8b6b902bf5a8f1701f4fec61a9a42be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>getGradient</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ace325e30378099a93404b7553fee7424</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ValueBaseType</type>
      <name>getGradientX</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aec7f7b73b774f0ae5100d7e9fcc4d93b</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ValueBaseType</type>
      <name>getGradientY</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a678acbf1da3a635d1a46656434eee2bd</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ValueBaseType</type>
      <name>getGradientZ</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a0e223d952b16a3a65725f271aeb1858d</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getVertX</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ad53aa0663928a1225cbee020ab94cbc4</anchor>
      <arglist>(const int i, const int j, const int k) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getVertY</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a7da0f525e96f87ea0b0dd453cad5fe79</anchor>
      <arglist>(const int i, const int j, const int k) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getVertZ</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>adfe992f63b31c226ac46118aebc71833</anchor>
      <arglist>(const int i, const int j, const int k) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertX</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a0fe5fec1b6fb26073d48b00f04588afc</anchor>
      <arglist>(const int val, const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertY</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ac416834f10fbae3412411836b38a9e70</anchor>
      <arglist>(const int val, const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertZ</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aa636c45b8715843c55d5ff263e6a685f</anchor>
      <arglist>(const int val, const int i, const int j, const int k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoxType</type>
      <name>m_bound</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a0ac013e8bfc9c4d3033ceba88204a4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::V3iVectorDataPtr</type>
      <name>m_verts</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>af431034977b38f7c1ee9345ba37fe318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imath::V3i</type>
      <name>m_currentGridPos</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>adb22e9457acc1890bf4843106761742c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueBaseType</type>
      <name>m_currentCubeValues</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aff6d2e26d147afaf99559d44eeaf8e4d</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>m_lutEntry</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>aa73fd71687712e092c196b84da3e0da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>m_currentCase</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a583ef1c114d14ec48e5f738cce726e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>m_currentConfig</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ae56529808ec10e9eaf0651aaedb2e2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>m_currentSubConfig</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ad3e915fc78a9236e521b70b9ee50c545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImplicitFn::Ptr</type>
      <name>m_fn</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a6723c7c87f4aa81379998f8c2449b9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeshBuilder::Ptr</type>
      <name>m_builder</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a8e3b5523c3765eb502a79304c27593fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imath::V3i</type>
      <name>m_resolution</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a48db0e2b1e83bfd18d223afd67cf452e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_numVerts</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ab9c46dbaca3700dea97c542b0dfef234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3xVectorDataPtr</type>
      <name>m_P</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>ac78914dc1ebe7f956e1ae25a6cef5732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3xVectorDataPtr</type>
      <name>m_N</name>
      <anchorfile>classIECore_1_1MarchingCubes.html</anchorfile>
      <anchor>a980862f55fdd86a99c4d758959cbc9b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MarschnerBCSDF</name>
    <filename>classIECore_1_1MarschnerBCSDF.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>VectorTraits&lt; T &gt;::BaseType</type>
      <name>V</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a4a6b4916f5c5d1ac97587adac5fa2e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Vec3&lt; V &gt;</type>
      <name>V3</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>ac83b536fe7a82787ec0360dcc52487d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Vec2&lt; V &gt;</type>
      <name>V2</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>acf7bdddfc98889404412ed19ca39de98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarschnerBCSDF</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a3dd193462fd7ba18830808ad9ae4d4b2</anchor>
      <arglist>(V refraction, const T &amp;absorption, V eccentricity, V shiftR, V shiftTT, V shiftTRT, V widthR, V widthTT, V widthTRT, V glint, V causticWidth, V causticFade, V causticLimit)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a6de1b7fbb99f29b28aa6bc6c989430eb</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a598b31d773f7567a121ed87e98cd3cb3</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light, T &amp;R, T &amp;TT, T &amp;TRT) const </arglist>
    </member>
    <member kind="function">
      <type>V2</type>
      <name>computeLocalVector</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a324288cc186e1c97978c4c20b616f689</anchor>
      <arglist>(const Imath::M44f hairSystem, const V3 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>V2</type>
      <name>computeLocalVector</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>abd22b4094e8466d4e472d9ac58cb5f9f</anchor>
      <arglist>(const V3 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>MR</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>aff4ad89e8f9744aca159106fe9dc0af2</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>MTT</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>aa4e8f3d87d2b6e1b66396ea029a30977</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>MTRT</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a950c7ea72cd15102ca564b419eca60da</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>NR</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a8e34b2a3313000527e8ffed0d756854e</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>NTT</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>a123f357528e7c6d5c85e23481bb7878d</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>NTRT</name>
      <anchorfile>classIECore_1_1MarschnerBCSDF.html</anchorfile>
      <anchor>aa6e38f381f4317c63580b9fe3b05fede</anchor>
      <arglist>(const V2 &amp;eye, const V2 &amp;light) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MarschnerLookupTableOp</name>
    <filename>classIECore_1_1MarschnerLookupTableOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>a0e05778dc9d9f26b29d4c6bb59bb1aa3</anchor>
      <arglist>(MarschnerLookupTableOp, MarschnerLookupTableOpTypeId, Op)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarschnerLookupTableOp</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>a58ba8d222d8ccb01c6c918042f36064d</anchor>
      <arglist>(const bool absorptionAsColor)</arglist>
    </member>
    <member kind="function">
      <type>MarschnerParameter *</type>
      <name>modelParameter</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>a7830237846fd32283403a234d06a52c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MarschnerParameter *</type>
      <name>modelParameter</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>a6294cc0f18d245caf7766d5600083ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>ad9b14a0b7bd6f3ebd0468e5d1f0f2755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>ab30a099d820ed9e425e6d76410d4e477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1MarschnerLookupTableOp.html</anchorfile>
      <anchor>a9f6d77822f9579809a820e53d074a1ce</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MarschnerParameter</name>
    <filename>classIECore_1_1MarschnerParameter.html</filename>
    <base>IECore::CompoundParameter</base>
    <member kind="function">
      <type></type>
      <name>MarschnerParameter</name>
      <anchorfile>classIECore_1_1MarschnerParameter.html</anchorfile>
      <anchor>aea03f59d621d0bed5c8384cd6e6b2d82</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;, const std::string &amp;description=&quot;&quot;, bool absorptionAsColor=true, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>MarschnerBCSDFC3f</type>
      <name>createBCSDF</name>
      <anchorfile>classIECore_1_1MarschnerParameter.html</anchorfile>
      <anchor>a8e2a16e73913d06753194990deffd6ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MatrixMultiplyOp</name>
    <filename>classIECore_1_1MatrixMultiplyOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="enumeration">
      <name>Mode</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>a8a3f70fda655d54a718f30325d412a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>a179de0c76590219984e8bf92344c3998</anchor>
      <arglist>(MatrixMultiplyOp, ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>matrixParameter</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>a86d7c9060dcace314143da91dbe0629e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>matrixParameter</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>ae46d0129e2066dc1091e33d3548677ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>modeParameter</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>af9f2b36ce5bc7f8bbef76e3cad3aaa0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>modeParameter</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>a52f16b3660325d9552a9cda07e1db056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1MatrixMultiplyOp.html</anchorfile>
      <anchor>aa51b6aae8ab19cd2a58af39b18fdecd2</anchor>
      <arglist>(Object *toModify, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::MatConvert</name>
    <filename>structIECore_1_1MatConvert.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1MatConvert.html</anchorfile>
      <anchor>a14c7b4ac6e1587c03d941a1519a0270b</anchor>
      <arglist>(const T &amp;m) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::MatrixTraits</name>
    <filename>structIECore_1_1MatrixTraits.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>float</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1MatrixTraits.html</anchorfile>
      <anchor>a9448908d7b2a8efde4da80808719b956</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1MatrixTraits.html</anchorfile>
      <anchor>a0c34dfddf93bc62e7c7486794cfb81de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType</type>
      <name>get</name>
      <anchorfile>structIECore_1_1MatrixTraits.html</anchorfile>
      <anchor>ae14400bb7776d83ce7c0a81e294b9f7f</anchor>
      <arglist>(const T &amp;v, unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1MatrixTraits.html</anchorfile>
      <anchor>afe977580360e6d8ece971c5b405d0a7f</anchor>
      <arglist>(T &amp;v, unsigned int i, unsigned int j, BaseType x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::MatrixTraits&lt; Imath::M33f &gt;</name>
    <filename>structIECore_1_1MatrixTraits_3_01Imath_1_1M33f_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1MatrixTraits_3_01Imath_1_1M33f_01_4.html</anchorfile>
      <anchor>a7eed829b0a2e5436938498a2215f1da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1MatrixTraits_3_01Imath_1_1M33f_01_4.html</anchorfile>
      <anchor>aa91236dcf5910dcba17efc19b22c9e43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType</type>
      <name>get</name>
      <anchorfile>structIECore_1_1MatrixTraits_3_01Imath_1_1M33f_01_4.html</anchorfile>
      <anchor>a8da52cdb696e2f1c109c05c0bdc6b946</anchor>
      <arglist>(const Imath::M33f &amp;v, unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1MatrixTraits_3_01Imath_1_1M33f_01_4.html</anchorfile>
      <anchor>a0571711499e2da321ca98ed310a641a5</anchor>
      <arglist>(Imath::M33f &amp;v, unsigned int i, unsigned int j, BaseType x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::MeanSquaredError</name>
    <filename>structIECore_1_1MeanSquaredError.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1MeanSquaredError.html</anchorfile>
      <anchor>a1f6787b694e561a9fe9f9157bcce4def</anchor>
      <arglist>(const T &amp;a, const T &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MedianCutSampler</name>
    <filename>classIECore_1_1MedianCutSampler.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>afff6b0545e3a70e1de67e19dd8d16e95</anchor>
      <arglist>(MedianCutSampler, Op)</arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a70f6a056c080bbfd95b78607f7b3234a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a05bfb3285c3b581b525f33e3b9d144c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>af46b5ef6e2c03d02fec54b859b6a66c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>aaaf00a044a06661fff7602158cf05de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>subdivisionDepthParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a1ac222b56a5f19974235a4bb767b03bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>subdivisionDepthParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a7c8f40fa9d1f5d538da70b6edd56b434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>projectionParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a3422821326dddd3c74f21608620a4897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>projectionParameter</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>a7ed57a48195e043c23a1351dea104ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1MedianCutSampler.html</anchorfile>
      <anchor>af0b6279e410cf75930d663d1a211dc33</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MemoryStream</name>
    <filename>classIECore_1_1MemoryStream.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryStream</name>
      <anchorfile>classIECore_1_1MemoryStream.html</anchorfile>
      <anchor>ad9f96f4d83198003f3568087db7b8766</anchor>
      <arglist>(char *buf, std::streamsize sz, bool ownsBuf=false)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>read</name>
      <anchorfile>classIECore_1_1MemoryStream.html</anchorfile>
      <anchor>a534452ec14443022bd07d83a7146ff82</anchor>
      <arglist>(char *s, std::streamsize n)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>write</name>
      <anchorfile>classIECore_1_1MemoryStream.html</anchorfile>
      <anchor>a88f6e98721deacac1e69ae9b0a8dd390</anchor>
      <arglist>(const char *s, std::streamsize n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classIECore_1_1MemoryStream.html</anchorfile>
      <anchor>af4f81c2876b62d1e737f4aa49cce8d87</anchor>
      <arglist>(char *&amp;data, std::streamsize &amp;sz) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshDistortionsOp</name>
    <filename>classIECore_1_1MeshDistortionsOp.html</filename>
    <member kind="function">
      <type>StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a73a0d2639d100520ef3842bc57c44a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>abb5105fd21cee5d2480e584663177d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>pRefPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a541ba9c7fee9ccee8c3f8557b104c789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>pRefPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>afa202a8cf980bfcca3ddd7a4835c5968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a1dc08afb8e7e60c8b1842f092d906117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>adf750ad5e7c261c753d626ae5a572d33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a9a720ed4c4bdc967c2550d79a32c311f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a1fc79d939e3a7bf65cb3f0ed977cb022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>distortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a7883b5d395836870c3fdfdcce3c5f22f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>distortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a04428c7dae5415453729d935e20bb04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uDistortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a6b712c83b20131912cf4921cfefa980b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uDistortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a261bf161c022c50219d8c31fd6c7d6dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vDistortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a55dcfab3a59d1b93d40458d7e7b915a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vDistortionPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>a1e8549f30cad3437abe0e1c7da9a5fcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>abf39fa68e438143fba5e4daaf0f40329</anchor>
      <arglist>(MeshDistortionsOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshDistortionsOp.html</anchorfile>
      <anchor>ae793b6f52ee9b1f66a64273ab0901331</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshMergeOp</name>
    <filename>classIECore_1_1MeshMergeOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshMergeOp.html</anchorfile>
      <anchor>a0b49d95f91254a56be2f9b78db3dc623</anchor>
      <arglist>(MeshMergeOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1MeshMergeOp.html</anchorfile>
      <anchor>a0191b02ea87c1a1c162549fe11c40a91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1MeshMergeOp.html</anchorfile>
      <anchor>a9b0ce32003da57ce6547ad4e5f9b3b2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshMergeOp.html</anchorfile>
      <anchor>af2d6d44b23f60978c439c5d5e6c11bef</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshNormalsOp</name>
    <filename>classIECore_1_1MeshNormalsOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>a91940be16227601c6e9f38cc9030eda9</anchor>
      <arglist>(MeshNormalsOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>a8e5379763c7d8c1020c397350f31a6ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>aaaaca68aecd74e59d46d5a5b78bdd189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>nPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>a40a11bea3c287b3e6bdfdea91088f339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>nPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>a07be4bdb4d44b172bcbed9c7ace8eef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshNormalsOp.html</anchorfile>
      <anchor>a899465c00806ce77d15e23f8d043cd59</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitive</name>
    <filename>classIECore_1_1MeshPrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a7dc5d03b8b31a5c489997ebb304afe15</anchor>
      <arglist>(MeshPrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPrimitive</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a8ccc4c2eb82ac2a9987fe7f3621e8c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPrimitive</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a9a6e0205d1cc34de8e1ab0bf4fba296c</anchor>
      <arglist>(ConstIntVectorDataPtr verticesPerFace, ConstIntVectorDataPtr vertexIds, const std::string &amp;interpolation=&quot;linear&quot;, V3fVectorDataPtr p=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a637fc4c9d28f6f672b84c9e157101f9e</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>ac560a3994d20ddec60de5c3049eb034a</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numFaces</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a38be6f892bd8fc848a864de6f99a39dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>verticesPerFace</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a5971d674df8413b570f400d69059e681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>vertexIds</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a3b0e1c805af60daa239847dec0234a68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>interpolation</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>afb413d9463d23a63122aba626e4eee48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTopology</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a1fa7ee182bdfb37b1904190d6c13aaa2</anchor>
      <arglist>(ConstIntVectorDataPtr verticesPerFace, ConstIntVectorDataPtr vertexIds, const std::string &amp;interpolation=&quot;linear&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterpolation</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a06291954e1505313d760283837ca5393</anchor>
      <arglist>(const std::string &amp;interpolation)</arglist>
    </member>
    <member kind="function">
      <type>PolygonIterator</type>
      <name>faceBegin</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a77f196b022f140626c0812bb3ac351f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PolygonIterator</type>
      <name>faceEnd</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a383c9b576f08c64282116307746c6326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPrimitivePtr</type>
      <name>createBox</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a98ad97e6f86fe300767607fe0f78208f</anchor>
      <arglist>(const Imath::Box3f &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeshPrimitivePtr</type>
      <name>createPlane</name>
      <anchorfile>classIECore_1_1MeshPrimitive.html</anchorfile>
      <anchor>a1808889506bac605120a99d1aba983a1</anchor>
      <arglist>(const Imath::Box2f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitiveBuilder</name>
    <filename>classIECore_1_1MeshPrimitiveBuilder.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a36bbad55241317f58e652a74ff0b7048</anchor>
      <arglist>(MeshPrimitiveBuilder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a58ebed18fbf5fc6331b31e8bdc86ee56</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;p, const Imath::Vec3&lt; T &gt; &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a88c013c322295425d22f493cfc049539</anchor>
      <arglist>(int v0, int v1, int v2)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitivePtr</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a2289df387dfbc5c057ac6dd24d370642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fVectorDataPtr</type>
      <name>m_P</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>af777fed596bfd7b47b5567176293a35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fVectorDataPtr</type>
      <name>m_N</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a5a0992b9e99236dc7492be028b08fc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVectorDataPtr</type>
      <name>m_verticesPerFace</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>a7f3c1dfa15d00e66124072cb2e4c68c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVectorDataPtr</type>
      <name>m_vertexIds</name>
      <anchorfile>classIECore_1_1MeshPrimitiveBuilder.html</anchorfile>
      <anchor>abf397596167209344dd17a03a86b4a00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitiveEvaluator</name>
    <filename>classIECore_1_1MeshPrimitiveEvaluator.html</filename>
    <base>IECore::PrimitiveEvaluator</base>
    <member kind="typedef">
      <type>MeshPrimitive</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>aafc46105e42cdc30d49bb5329777dae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a7502da56659509e998a128138b91e274</anchor>
      <arglist>(MeshPrimitiveEvaluator, PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ae129177af0941155b3035dda0ce8f18c</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPrimitiveEvaluator</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a740b854cc0f2421540d0dfdee6132f0b</anchor>
      <arglist>(ConstMeshPrimitivePtr mesh)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a2edbb5062862fa04c3755c479a25c35a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitive::ConstPtr</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>adcb302fe9e62623ff2d7847cef7c4f16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrimitiveEvaluator::ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ae296852249dda1d3a59f4d6e3d215ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a1b817f405dec69e0ec5e83dfbe79636c</anchor>
      <arglist>(PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a9a51643c9f9b1850d3b45048d1bf77e4</anchor>
      <arglist>(const Imath::V3f &amp;p, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ab21315381340b5df857560fdd4534db0</anchor>
      <arglist>(const Imath::V2f &amp;uv, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>aa80f7ec85f5b90458c0c085a2672d9d0</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, PrimitiveEvaluator::Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ab61d9e815afbfd6173f886b73da21c67</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barycentricPosition</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a2126cd50e41f8ccad6d7f431c9e85d29</anchor>
      <arglist>(unsigned int triangleIndex, const Imath::V3f &amp;barycentricCoordinates, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>signedDistance</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ad2bc81e76059fd3b3b544a082121b0dc</anchor>
      <arglist>(const Imath::V3f &amp;p, float &amp;distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ab16d2627b1b6afd2b64ca33dc2375df6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a5f57f7c8a5cd4f89c93362e8d32ef198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a034b78cf36c511e57e88301210799349</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Imath::Box2f</type>
      <name>uvBound</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a20121f7f0cb2ed270237856861c86ef4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a36acc7c433248b6304695ccee6bf5cc1</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>tbb::mutex</type>
      <name>NormalsMutex</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a2b565bbd19f418c250378f92f5b69df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>int</type>
      <name>VertexIndex</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a53fa0a29e7e9558b5da7da3d9cfdd22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>int</type>
      <name>TriangleIndex</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a09b320945b26e0e9e59b45587e2308b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; VertexIndex, VertexIndex &gt;</type>
      <name>Edge</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a9dcd9aadf28c23dc5c00f2df81db9a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Edge, Imath::V3f &gt;</type>
      <name>EdgeAverageNormals</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a13ab000c17166726f3a2453f01285dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>pointAtUVWalk</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a4095b2f3c81471939b47a46324ed5234</anchor>
      <arglist>(UVBoundTree::NodeIndex nodeIndex, const Imath::V2f &amp;targetUV, Result *result) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>closestPointWalk</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>abe744d1045bd12a44af7ef11410dc145</anchor>
      <arglist>(TriangleBoundTree::NodeIndex nodeIndex, const Imath::V3f &amp;p, float &amp;closestDistanceSqrd, Result *result) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>intersectionPointWalk</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a89ccd20a59027d78ea1043ac8ab82348</anchor>
      <arglist>(TriangleBoundTree::NodeIndex nodeIndex, const Imath::Line3f &amp;ray, float &amp;maxDistSqrd, Result *result, bool &amp;hit) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>intersectionPointsWalk</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a30ecd1c54e5af144f4d2d82985f1b59d</anchor>
      <arglist>(TriangleBoundTree::NodeIndex nodeIndex, const Imath::Line3f &amp;ray, float maxDistSqrd, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateMassProperties</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>adad95c5996049bc4b6f5945d080b61e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateAverageNormals</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a2e7b81e4022753484876d7e944006ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>triangleUVs</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a2634e4cc059d2903d94255993695ce68</anchor>
      <arglist>(size_t triangleIndex, const Imath::V3i &amp;vertexIds, Imath::V2f uv[3]) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMeshPrimitivePtr</type>
      <name>m_mesh</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a85825efcef7de204a4e25663aa596480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstV3fVectorDataPtr</type>
      <name>m_verts</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a1f34af0aced71480a67f02ec4878c7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; int &gt; *</type>
      <name>m_meshVertexIds</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>acc7e56e4f36b13969e256d9c543b21d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangleBoundVector</type>
      <name>m_triangles</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ad44332e97935da4051681be6f224087a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangleBoundTree *</type>
      <name>m_tree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a1dcf045e75c1f8415089b37ec6875df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UVBoundVector</type>
      <name>m_uvTriangles</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a7ec9389048b379434cd13031ce9cde2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UVBoundTree *</type>
      <name>m_uvTree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>aa70b76e16675f5bdce18baf32ed6279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PrimitiveVariable</type>
      <name>m_u</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a961ef7c9436db58521c95a2c83568a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PrimitiveVariable</type>
      <name>m_v</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a0c939393ffd64abb9400c12548fc438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_haveMassProperties</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ac36462a0f5c8925060c7457a3a162f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>m_volume</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>af3525a86962b967b6bed90861dfc054e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imath::V3f</type>
      <name>m_centerOfGravity</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a44582bfc3d53331b6762c5ed70b2957c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imath::M33f</type>
      <name>m_inertia</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a8c99567d8d3feb7f304b121c616cac15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_haveSurfaceArea</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a72e91c95250d803da26b1e823b4217be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>m_surfaceArea</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a4bef7c9aa69bf860cc571860250f32ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NormalsMutex</type>
      <name>m_normalsMutex</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ae3d95872fdc18f37dc42e3cd802db3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_haveAverageNormals</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a775803ed2952460e9d3f7a74100a8cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeAverageNormals</type>
      <name>m_edgeAverageNormals</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a1683b96a75dd71c770f2a1974d59824c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V3fVectorDataPtr</type>
      <name>m_vertexAngleWeightedNormals</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a7ec390e154ce2a1df3e3dfc664b8d273</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Box3f</type>
      <name>TriangleBound</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ace374a50143ea477ce83f2711207f429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; TriangleBound &gt;</type>
      <name>TriangleBoundVector</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a8af6612d3c9ad22f395d2bfb02c89a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; TriangleBoundVector::iterator &gt;</type>
      <name>TriangleBoundTree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a21f6e6b6030d8f48ea3833c04230ee74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imath::Box2f</type>
      <name>UVBound</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ae44a8712b4d3c127b7eb9fc376b0928a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; UVBound &gt;</type>
      <name>UVBoundVector</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a6ca1e862c8448c2bd4ade5db2920e844</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundedKDTree&lt; UVBoundVector::iterator &gt;</type>
      <name>UVBoundTree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a0f2761cacd580aeef93b3c732207755b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const TriangleBoundVector *</type>
      <name>triangleBounds</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a74742a741dd7be7fb1b976663c32c4df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TriangleBoundTree *</type>
      <name>triangleBoundTree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a644878fcb9a959d8536dc07aa33e92d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UVBoundVector *</type>
      <name>uvBounds</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>ad394a4dcb4861fc6535151756240edd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UVBoundTree *</type>
      <name>uvBoundTree</name>
      <anchorfile>classIECore_1_1MeshPrimitiveEvaluator.html</anchorfile>
      <anchor>a3fa420ff5fc7b2db9894d332f5b4dc78</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitiveImplicitSurfaceFunction</name>
    <filename>classIECore_1_1MeshPrimitiveImplicitSurfaceFunction.html</filename>
    <base>IECore::PrimitiveImplicitSurfaceFunction</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6702bc996bcc4202d973332a4703675f</anchor>
      <arglist>(MeshPrimitiveImplicitSurfaceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPrimitiveImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a41eeb1426b6660dc26bd0f48b7b1877e</anchor>
      <arglist>(MeshPrimitivePtr mesh)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>ada7138e7c62cd0e113711b714188c419</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a09fd3cf602deef7f20fddf695f85de92</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitiveImplicitSurfaceOp</name>
    <filename>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</filename>
    <base>TypedPrimitiveOp&lt; MeshPrimitive &gt;</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>ac6a33f501144a5218ed27b2fa504b565</anchor>
      <arglist>(MeshPrimitiveImplicitSurfaceOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a8919ec9434facb4f922ad271fda66f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a931853cb5ae0da0cde6af32b25e86e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a6f310ce79fec65df5e8f213f9223c00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>ad35c5605f8b905f96288d3c8067ffd32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>abfc7270f220cea4f03de40a02b25e5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a86d1462620e3114f15bd19cf574b2ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>automaticBoundParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a88ab322d3411a1f052f8b06b4abed3fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>automaticBoundParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a66f62ee87ae0c271f732d6ede3b6ebd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>gridMethodParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a9607589c5b2849133c41db2faac3158f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>gridMethodParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a963563c4aad1a0a27686d92bd9142fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V3fParameter *</type>
      <name>divisionSizeParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a41cd8dad23231c3c47f14b280565185e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3fParameter *</type>
      <name>divisionSizeParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a487ceba92320cb21137adbc4c4f77666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>boundExtendParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>ab21008de71b4b7ec039da3f21f999004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>boundExtendParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>ac759184cd72e427c859e0bc182377900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshPrimitiveImplicitSurfaceOp.html</anchorfile>
      <anchor>a78cf370f95477baad66693530d825c67</anchor>
      <arglist>(MeshPrimitive *typedPrimitive, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshPrimitiveShrinkWrapOp</name>
    <filename>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</filename>
    <base>TypedPrimitiveOp&lt; MeshPrimitive &gt;</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a8aa8eb731ac8a1f2a31d9728cf21f304</anchor>
      <arglist>(MeshPrimitiveShrinkWrapOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>targetMeshParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a3be81fbca8a789e782fceac974b1fc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>targetMeshParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>abe625c4732d2dde819276006ef05e6cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>directionParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a0556eb1189d4d5c89590e1779e1c2fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>directionParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>affbc27d6932e42a9bf3a41e4943d73f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>methodParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>ad0ebee994a738d056afb308d69135212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>methodParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a3067e52341c8f50e8f94251452760b87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>directionMeshParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a8ff1a62ad0cf188e607b8a6ccdd7ed4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>directionMeshParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>ae62cc9b7916eb9ae400b7e7c35a2a731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>triangulationToleranceParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>a05bb4ba32148ee9c5a5e6be6f8ce3cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>triangulationToleranceParameter</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>acae795d183700a882ed44eaeec585f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshPrimitiveShrinkWrapOp.html</anchorfile>
      <anchor>ad936af1f4d64a25b7955cc409b85ede2</anchor>
      <arglist>(MeshPrimitive *typedPrimitive, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshTangentsOp</name>
    <filename>classIECore_1_1MeshTangentsOp.html</filename>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>orthogonalizeTangentsParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a44bf9f8c7989f84da6b9994f0fc7737e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>orthogonalizeTangentsParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a5bc20d86ecda1f6fa668b988ac5ab9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a2e0f18593d04629c4a61fd8b4d8f6a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>pPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>acab9ce2cbba737bbdcd804a24aa10d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a3e085ec8bb5e37bcb6f60a8627051deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a175ba66e59beb0b61003eb71ffa174b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>abc1583c39820fde677541f512959fd3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a0383551383976825e84939c820ea7367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uvIndicesPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>aeb160d0bb8d2baea35eb0160d1f1dd14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uvIndicesPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a4681d72f3d5627c8e6e1701e2f26ccbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>uTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>ae052d227612b1a6b11f10d67b5f75c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>uTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a5e9b1bf38ab584fc4c9c7a47c43f1b8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>vTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a131e51838d75691fe5178c263afb8675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>vTangentPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a7d83784cc428571016427ad329eb295a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>a4e82b2c9d4810312c40d1cb9b66134ff</anchor>
      <arglist>(MeshTangentsOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshTangentsOp.html</anchorfile>
      <anchor>aca9c3baa71cdc39c0011755353ac1b3d</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MeshVertexReorderOp</name>
    <filename>classIECore_1_1MeshVertexReorderOp.html</filename>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MeshVertexReorderOp.html</anchorfile>
      <anchor>a8bd3a8c6133e2bdb310739e3603fa08d</anchor>
      <arglist>(MeshVertexReorderOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>V3iParameter *</type>
      <name>startingVerticesParameter</name>
      <anchorfile>classIECore_1_1MeshVertexReorderOp.html</anchorfile>
      <anchor>a4bdb4e042f697c712dc6353c131a31d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3iParameter *</type>
      <name>startingVerticesParameter</name>
      <anchorfile>classIECore_1_1MeshVertexReorderOp.html</anchorfile>
      <anchor>a51d89fcfa28a5ec708f88488556049e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1MeshVertexReorderOp.html</anchorfile>
      <anchor>a58704a74233c36d4e4d13abe3e870a62</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MessageHandler</name>
    <filename>classIECore_1_1MessageHandler.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>aaaba8f84d7ee5acacb0e7d86eb1743e0</anchor>
      <arglist>(MessageHandler)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>aaf4f88c4184a29fceed871e63df124f8</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>output</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a883eac77e52693814067824d63144cbb</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>output</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a3c2f9f0056f71460621e2f072fcfa6c9</anchor>
      <arglist>(Level level, const std::string &amp;context, const boost::format &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pushHandler</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>ac08bfeb19cdcdceec6317343b9782423</anchor>
      <arglist>(MessageHandlerPtr handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageHandlerPtr</type>
      <name>popHandler</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a4d50f429403547c152d37a06a878d4d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageHandler *</type>
      <name>currentHandler</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a0819252b03c793477809e4a9d4bc5952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>levelAsString</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a01cc69869c0fe73aee28df939f85ce40</anchor>
      <arglist>(Level level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>stringAsLevel</name>
      <anchorfile>classIECore_1_1MessageHandler.html</anchorfile>
      <anchor>a2a5956b708114fed00716cf4b1678665</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MixSmoothSkinningWeightsOp</name>
    <filename>classIECore_1_1MixSmoothSkinningWeightsOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1MixSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>a93e31b92e6ba95633fb30056552e737e</anchor>
      <arglist>(MixSmoothSkinningWeightsOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1MixSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>a030170b58b8d2edd23a01262b7ee04b3</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ModifyOp</name>
    <filename>classIECore_1_1ModifyOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>adb11b7635670953d86d66b4e1467a3d3</anchor>
      <arglist>(ModifyOp, Op)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModifyOp</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>aad2cd02e5aa4a0960cd6ce7958fd2a10</anchor>
      <arglist>(const std::string &amp;description, ParameterPtr resultParameter, ParameterPtr inputParameter)</arglist>
    </member>
    <member kind="function">
      <type>Parameter *</type>
      <name>inputParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>ae8ea0ae86935b85224aef161fa0957ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter *</type>
      <name>inputParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>aff41ad3c4d30c2c43278dccfea6f4128</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>copyParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>a700cfe860fa14aef3a1e2aea0db867f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>copyParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>a251a4d093d29ced9400a021f1ffd42aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>enableParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>a913f8bb52d8e1611fc30c3553cc87283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>enableParameter</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>a91931c9debc281c430bf2c6b29b96d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>a09c1cedb74525eec946999a78a9dfa42</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1ModifyOp.html</anchorfile>
      <anchor>adb48c2b01e89520d919147846094e408</anchor>
      <arglist>(Object *object, const CompoundObject *operands)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MotionBlock</name>
    <filename>classIECore_1_1MotionBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionBlock</name>
      <anchorfile>classIECore_1_1MotionBlock.html</anchorfile>
      <anchor>a0d5946be527826f4f3626eb9fc212b94</anchor>
      <arglist>(RendererPtr renderer, const std::set&lt; float &gt; &amp;times, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MotionBlock</name>
      <anchorfile>classIECore_1_1MotionBlock.html</anchorfile>
      <anchor>a1e575d32dd7f5bafcf0b74a852448926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1MotionBlock.html</anchorfile>
      <anchor>ae088072ed752a603c8c0b90842e46bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECore_1_1MotionBlock.html</anchorfile>
      <anchor>aeabfb18ac2b8e6d3d770c0cbfa28fc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECore_1_1MotionBlock.html</anchorfile>
      <anchor>a279b7bfba04503ec0ffc2da5b41e0324</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MotionPrimitive</name>
    <filename>classIECore_1_1MotionPrimitive.html</filename>
    <base>IECore::VisibleRenderable</base>
    <member kind="typedef">
      <type>std::map&lt; float, PrimitivePtr &gt;</type>
      <name>SnapshotMap</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>a98fc18c4e02ebaf8f05d64210733c29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>abb7c7152cbe7e36db50a535e6c23ef75</anchor>
      <arglist>(MotionPrimitive, VisibleRenderable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>aaf723f087948c2c4e187e29499aae39c</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>afe056277ed2ca556ed53ad3a28a68b0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SnapshotMap &amp;</type>
      <name>snapshots</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>a98e0987e5730cb91f6769b97fdd29591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SnapshotMap &amp;</type>
      <name>snapshots</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>a5c4e6834a2e536ca0d7fcfb89215aff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSnapshot</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>a825b86e92aac87cebbf2ea8e889f5786</anchor>
      <arglist>(float time, PrimitivePtr primitive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSnapshot</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>ae2ac5e4f04d91c0c8ed6f2db605bfa0f</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSnapshot</name>
      <anchorfile>classIECore_1_1MotionPrimitive.html</anchorfile>
      <anchor>af323284fdc24c5826aa086a33a2140e3</anchor>
      <arglist>(PrimitivePtr primitive)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MurmurHash</name>
    <filename>classIECore_1_1MurmurHash.html</filename>
    <member kind="function">
      <type></type>
      <name>MurmurHash</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a210355dfb5f211ddb3e87600abd60382</anchor>
      <arglist>(const MurmurHash &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a7f0e249e31c997f61197ba545342acea</anchor>
      <arglist>(char data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a80790afd829acaa25b961c156bb639a7</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a96163d6a0bafcea8789ba7f1d113220a</anchor>
      <arglist>(short data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ab9f00c3593ea19b4e1dc10bbf725e164</anchor>
      <arglist>(unsigned short data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a4acc1a12d240e232822a20ae4ba5ba24</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad46cb2c82237a7ddf6cce80ff2bc414c</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a8658b59b578570f425665ca01ef54832</anchor>
      <arglist>(int64_t data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a3da1f4a243488e5cc262119a06d4afad</anchor>
      <arglist>(uint64_t data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ac490726f40c9d0e051e551e1035c5165</anchor>
      <arglist>(half data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a3cb43f05161ac6cfa02ec3f365fdb139</anchor>
      <arglist>(float data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a99a0f163db92313757d906400eb1abe0</anchor>
      <arglist>(double data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a7e42005ea297b3cac10cd7b3f97fa963</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a0a9db0fc7b006cc088fc7782d2e8933b</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a50d2ebe29a655b5efefffea4070c41b6</anchor>
      <arglist>(const Imath::V2i &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aeab35f97219e54ecaa91e263ee7e7681</anchor>
      <arglist>(const Imath::V2f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a86c9aa65a6e818398c8adc25f22b0f7b</anchor>
      <arglist>(const Imath::V2d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a28c57d3cbf0822f4f7f41226acf3765a</anchor>
      <arglist>(const Imath::V3i &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>add6d6e844c38e5ba448e6d294fa75e3e</anchor>
      <arglist>(const Imath::V3f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a33b9f437e093e5f2e7e6782ded7d7a8e</anchor>
      <arglist>(const Imath::V3d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>af669be1ee505b9545d1f845d6a5d4b2f</anchor>
      <arglist>(const Imath::Color3f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a41595a4cb2853fa62e2d0d2e2cdd037c</anchor>
      <arglist>(const Imath::Color3&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>af811d2d417f1ce1b8e59f285556f5941</anchor>
      <arglist>(const Imath::Color4f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a49aed493c09078fb32b1db1eae9ea800</anchor>
      <arglist>(const Imath::Color4&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a51cb63c43ad6567dcb2d483f48c99972</anchor>
      <arglist>(const Imath::M33f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a80b551fe9a36c3fd1c10fab627d573d7</anchor>
      <arglist>(const Imath::M33d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ae84f63c83c20ebac195e3ac8bfa513dd</anchor>
      <arglist>(const Imath::M44f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a934acc33ec636f9bb8ca3595556524e6</anchor>
      <arglist>(const Imath::M44d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a54560be370a8d44f0556c27d74c06500</anchor>
      <arglist>(const Imath::Box2i &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a1fc7c98fa6ed7afc81f3f5769adbe656</anchor>
      <arglist>(const Imath::Box2f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a3367b420d97b45c6201f53abf3f6c0d7</anchor>
      <arglist>(const Imath::Box2d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a43f50ade6f3810b093ead3a84d706a4c</anchor>
      <arglist>(const Imath::Box3i &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad6ccd6e3e7bf44abce0cf67f15b3dc7d</anchor>
      <arglist>(const Imath::Box3f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a94c705096d0465cd92b8e9fea170cf83</anchor>
      <arglist>(const Imath::Box3d &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a9d4452190003a590eaa74b6d04e96932</anchor>
      <arglist>(const Imath::Quatf &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aec1bf165cfcec8d4ab525c9ea73d28d5</anchor>
      <arglist>(const Imath::Quatd &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad09157b9074fc9aac4cc4a8f65c267cc</anchor>
      <arglist>(const char *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a62b2d4978bd8afd33685e9151f931436</anchor>
      <arglist>(const unsigned char *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ae784539b5be507932ca84b1752e2a1ec</anchor>
      <arglist>(const short *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a70b2d968f34d619cac5c881a8ac956a7</anchor>
      <arglist>(const unsigned short *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ab4c8b143d3e07c26374496e4fad2bf6a</anchor>
      <arglist>(const int *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a845adf73f0d53402a7820803e0cc56b5</anchor>
      <arglist>(const unsigned int *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a12b6dd170e279d5fb26bce18a0d7e5a2</anchor>
      <arglist>(const int64_t *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a410d71a7965e9c605311f19b2dd67504</anchor>
      <arglist>(const uint64_t *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>afa00532bae74f5aff5b131afebc4b30f</anchor>
      <arglist>(const half *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a8834a1ee71d85fc27ec201b703049df1</anchor>
      <arglist>(const float *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ae2efba813fc35c5b0f6b67918e929afd</anchor>
      <arglist>(const double *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a98830854f42ada7f7399c757cf9192de</anchor>
      <arglist>(const std::string *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>af08269383a349f1b00eb824838afb028</anchor>
      <arglist>(const Imath::V2i *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aa775665ff84b726e3991030b039ff274</anchor>
      <arglist>(const Imath::V2f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>af8c88915ef01a237da25bb86be6b13d7</anchor>
      <arglist>(const Imath::V2d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ae6266ea4d9a96fe5600c4cd0a519473f</anchor>
      <arglist>(const Imath::V3i *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a2846cf49c1afa1a55a04d4521ffcf9e7</anchor>
      <arglist>(const Imath::V3f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad3d12879a73a98811829db13719e99d6</anchor>
      <arglist>(const Imath::V3d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a223d20db98e22c93bb7296650161de41</anchor>
      <arglist>(const Imath::Color3f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>acb80f28d113bfc23b9c917a95f9d4786</anchor>
      <arglist>(const Imath::Color3&lt; double &gt; *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad176c8e1f5501a32ad71f884bc3e13ba</anchor>
      <arglist>(const Imath::Color4f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ad2004793cb19eba16568c59fd401382e</anchor>
      <arglist>(const Imath::Color4&lt; double &gt; *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a38cc106387b421eb378bfbd459cd59d8</anchor>
      <arglist>(const Imath::M33f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a35296931dec245691d22d6a71bf62441</anchor>
      <arglist>(const Imath::M33d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ab4459fbf7111203731bc613ab3e020e9</anchor>
      <arglist>(const Imath::M44f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a960b455a2f58086b10924e2c508fb8f8</anchor>
      <arglist>(const Imath::M44d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>ae6a1a725f320a811478ac9ed44b5e030</anchor>
      <arglist>(const Imath::Box2i *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a3ef6fad60eb7ebaa7d41fb6187abf5cf</anchor>
      <arglist>(const Imath::Box2f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a8ef19d69a0a29047faeb59893d0670cb</anchor>
      <arglist>(const Imath::Box2d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aecd0c73a3b9eeb7c0d5f525f6bdd8f36</anchor>
      <arglist>(const Imath::Box3i *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a1e429b97625b91726d7c664072389944</anchor>
      <arglist>(const Imath::Box3f *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a92420a4ae15f1b05c3422a5cde76398a</anchor>
      <arglist>(const Imath::Box3d *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a67ba5ba2dc7d93bbba33465f4720f00c</anchor>
      <arglist>(const Imath::Quatf *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>MurmurHash &amp;</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aba8960ef46eb4b1b608b0c0db25e166f</anchor>
      <arglist>(const Imath::Quatd *data, size_t numElements)</arglist>
    </member>
    <member kind="function">
      <type>const MurmurHash &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a8fcc04509c4ac3be61a123acb25aadaa</anchor>
      <arglist>(const MurmurHash &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>af5befb2df8e63a14547b047f1681d862</anchor>
      <arglist>(const MurmurHash &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a420a80ca8d750b78f2f816594893715b</anchor>
      <arglist>(const MurmurHash &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>aced5e77ec70a77c2a2757443128eb0b1</anchor>
      <arglist>(const MurmurHash &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classIECore_1_1MurmurHash.html</anchorfile>
      <anchor>a9d95ee0c9594bf6e056877303684c1cd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NormalizeSmoothSkinningWeightsOp</name>
    <filename>classIECore_1_1NormalizeSmoothSkinningWeightsOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1NormalizeSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>a73e440835b5eb879c139d957a4c76c4a</anchor>
      <arglist>(NormalizeSmoothSkinningWeightsOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1NormalizeSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>a34d89b53602e39c807e2ff49acaae6f6</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NParticleReader</name>
    <filename>classIECore_1_1NParticleReader.html</filename>
    <base>IECore::ParticleReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a073428134ef67238c22a97db78786a59</anchor>
      <arglist>(NParticleReader, ParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NParticleReader</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a2336edb5a616780448c2744e744cb264</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>numParticles</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a415f17f9bee0014286554f6e7ca03fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeNames</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>ae8349787be9869ee29595798731b8811</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataPtr</type>
      <name>readAttribute</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a6320c245e35a6beb5f804b39288dba70</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>frameTimes</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a36eb383037a66c52e5560bf1b1932171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1NParticleReader.html</anchorfile>
      <anchor>a78324ccb7c2803de9f299dd100c87fd2</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NullMessageHandler</name>
    <filename>classIECore_1_1NullMessageHandler.html</filename>
    <base>IECore::MessageHandler</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1NullMessageHandler.html</anchorfile>
      <anchor>a94c98fe9a8fa5de68bd55759d62b0a6c</anchor>
      <arglist>(NullMessageHandler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1NullMessageHandler.html</anchorfile>
      <anchor>a34dd9912aa12f9433b085203706e2d0d</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NullObject</name>
    <filename>classIECore_1_1NullObject.html</filename>
    <base>IECore::Object</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1NullObject.html</anchorfile>
      <anchor>aceaac20a9e922050e1fd4093d3163d77</anchor>
      <arglist>(NullObject, Object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NullObjectPtr</type>
      <name>defaultNullObject</name>
      <anchorfile>classIECore_1_1NullObject.html</anchorfile>
      <anchor>afff359c0edff59a344430bf84888699a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NumericParameter</name>
    <filename>classIECore_1_1NumericParameter.html</filename>
    <templarg></templarg>
    <base>IECore::Parameter</base>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a57ed10bc6ba11bb503d441016d989550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; T &gt;</type>
      <name>ObjectType</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a0b1305a0904f4f0e8ae84a7ffd8319e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, T &gt;</type>
      <name>Preset</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a22927910bb274b32de1921d723394a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Preset &gt;</type>
      <name>PresetsContainer</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a806ec1cf4730ad750e8656c0a5500a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a181f14e49bc621b8aa7fb45cf362db50</anchor>
      <arglist>(ObjectType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericParameter</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>ae7c73c24d44a24b5909ab5189f32c99a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, T defaultValue=T(), T minValue=Imath::limits&lt; T &gt;::min(), T maxValue=Imath::limits&lt; T &gt;::max(), const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericParameter</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>abc8cf1ceb8e87828a1de8672e727e5af</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, T defaultValue, const PresetsContainer &amp;presets, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>aeeaa3776c3d7d9c4ade2e66311e5c3ce</anchor>
      <arglist>(NumericParameter&lt; T &gt;, Parameter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMinValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>ac3751d4ba86c7206fe66ec5bd55719a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a9d73a6be5039af580cd0594cf8281722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMaxValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a4f3df78419e694baef246f5e5007d322</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a10ca95959b4363b3d02204d1b13b93cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>numericDefaultValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>ac180dc32d28ecc98fb6454d5358f7e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getNumericValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a31338307cf8f196c5b30db95e688958e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumericValue</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a48fac73bb81afff823d767916fb20c76</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1NumericParameter.html</anchorfile>
      <anchor>a55c98987f0196a07c4556bf620ce7021</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NURBSPrimitive</name>
    <filename>classIECore_1_1NURBSPrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>ac1efa0c58cd1595784def0fa1990b4bc</anchor>
      <arglist>(NURBSPrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NURBSPrimitive</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>abec462ae61e571e5ea57f412871d2570</anchor>
      <arglist>(int uOrder, ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, ConstFloatVectorDataPtr vKnot, float vMin, float vMax, ConstV3fVectorDataPtr p=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a93a1e3e8751700db8354a2a38a07fce0</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a9107f092fa452f8cbc2cf268ecea5586</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uOrder</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>ad8e028b95b581f14a9d2567a81cdf73b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FloatVectorData *</type>
      <name>uKnot</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>af6dfdc9dd51ee297d38b8e51a568b79c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>uMin</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>ac2a6ae27d5e7d55260b0052d3710527b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>uMax</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a4ba536a4d69fda4ef33623e964a34d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uVertices</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a8a3623b59c2981761c1b5a51939c1572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uSegments</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a0c1916fc3d10c310e3d90e1ad275b2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vOrder</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>ae8c8377e5e5b9eb76358eae35f2a0c1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FloatVectorData *</type>
      <name>vKnot</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a14057869a2f904586685f0a818ed0911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>vMin</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a913643ec3b8b209e7262acac638ffc9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>vMax</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a4379ba07597ef849eb6b06619953ec5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vVertices</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a63181449139f2afe41dd8a9c5300553d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vSegments</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a7c72fc88c76689123b97d2f5eb896085</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTopology</name>
      <anchorfile>classIECore_1_1NURBSPrimitive.html</anchorfile>
      <anchor>a54acb3c156cc58ee938a047fa8ad46c8</anchor>
      <arglist>(int uOrder, ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, ConstFloatVectorDataPtr vKnot, float vMin, float vMax)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object</name>
    <filename>classIECore_1_1Object.html</filename>
    <base>IECore::RunTimeTyped</base>
    <class kind="class">IECore::Object::AbstractTypeDescription</class>
    <class kind="class">IECore::Object::CopyContext</class>
    <class kind="class">IECore::Object::LoadContext</class>
    <class kind="class">IECore::Object::MemoryAccumulator</class>
    <class kind="class">IECore::Object::SaveContext</class>
    <class kind="class">IECore::Object::TypeDescription</class>
    <member kind="typedef">
      <type>ObjectPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a3a20a70523255cd15bd590febdbf232d</anchor>
      <arglist>)(void *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a36a208917254e1d2a3400197c5ead7c8</anchor>
      <arglist>(Object, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a7058d48a8950ae269c2bb1a1aa3a572c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>aed4cbf2dd99c12360209d8f0718a46d7</anchor>
      <arglist>(const Object *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a3263c27cd23544d3ee7c341e3e9f5265</anchor>
      <arglist>(IndexedIOInterfacePtr ioInterface, const IndexedIO::EntryID &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>ac5691667d5906ef7d97c0ab1136489b6</anchor>
      <arglist>(const Object *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNotEqualTo</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a6ed85fadcdab994d9d8bd36e92afa177</anchor>
      <arglist>(const Object *other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a8b086fedd790fc762d9120a33cb016c6</anchor>
      <arglist>(const Object &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a21d471bce4e46a5db1cc7892d44a52c8</anchor>
      <arglist>(const Object &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>memoryUsage</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>ac6e89b273cf3382c994b8d60115c8127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MurmurHash</type>
      <name>hash</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a28c0da9e4591e48de36ca439ce2a6a2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hash</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a10e1640a0d6e42aae91d9453a7e7a749</anchor>
      <arglist>(MurmurHash &amp;h) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerType</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a55886d9f20f707a4a2ac6ab92b935a58</anchor>
      <arglist>(TypeId typeId, const std::string &amp;typeName, CreatorFn creator, void *data=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isType</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>ae79a8f1020677cab16b83e3fa84ee677</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isType</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a95b7106b83c2e3b25d789f54a4f5fbbe</anchor>
      <arglist>(const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbstractType</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a2305005ed20eda5a7922cf6290cfa193</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbstractType</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a32b7b832d2fe4f1f2cae4d11ae3be4fa</anchor>
      <arglist>(const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a7292f57ede3762f6fb64365242801a3c</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>ada37c085cf2a19eea2744f52ef74bc5f</anchor>
      <arglist>(const std::string &amp;typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectPtr</type>
      <name>load</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>ad63937970487a90681d6a41e77e4657b</anchor>
      <arglist>(IndexedIOInterfacePtr ioInterface, const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a5b827d672454436e354e67c77cb48b13</anchor>
      <arglist>(const Object *other, CopyContext *context)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a46a67526af37b83ac470ac8fa0f0d513</anchor>
      <arglist>(LoadContext)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>save</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a9b46077c8db3d50975e124131e52c32f</anchor>
      <arglist>(SaveContext *context) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a3f4b7b9cbe56579d9c90bfb9539470ef</anchor>
      <arglist>(LoadContextPtr context)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>memoryUsage</name>
      <anchorfile>classIECore_1_1Object.html</anchorfile>
      <anchor>a31a7101725bbf84b2a39099ad9c5a7a2</anchor>
      <arglist>(MemoryAccumulator &amp;accumulator) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object::AbstractTypeDescription</name>
    <filename>classIECore_1_1Object_1_1AbstractTypeDescription.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>IECore::Object::CopyContext</name>
    <filename>classIECore_1_1Object_1_1CopyContext.html</filename>
    <member kind="function">
      <type>IntrusivePtr&lt; T &gt;</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1Object_1_1CopyContext.html</anchorfile>
      <anchor>a0e8159fbdb4c4cf388e74023dd87f064</anchor>
      <arglist>(const T *toCopy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object::LoadContext</name>
    <filename>classIECore_1_1Object_1_1LoadContext.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>LoadContext</name>
      <anchorfile>classIECore_1_1Object_1_1LoadContext.html</anchorfile>
      <anchor>a20d9144e783caa46cbf026634954c1f6</anchor>
      <arglist>(IndexedIOInterfacePtr ioInterface)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>container</name>
      <anchorfile>classIECore_1_1Object_1_1LoadContext.html</anchorfile>
      <anchor>aed12c74e521ff225684ba62aafe0a725</anchor>
      <arglist>(const std::string &amp;typeName, unsigned int &amp;ioVersion)</arglist>
    </member>
    <member kind="function">
      <type>T::Ptr</type>
      <name>load</name>
      <anchorfile>classIECore_1_1Object_1_1LoadContext.html</anchorfile>
      <anchor>aa95807ced5c1d47e9f83e49358485e07</anchor>
      <arglist>(IndexedIOInterfacePtr container, const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>rawContainer</name>
      <anchorfile>classIECore_1_1Object_1_1LoadContext.html</anchorfile>
      <anchor>a8ccbebaf36af5657950a825588576df5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object::MemoryAccumulator</name>
    <filename>classIECore_1_1Object_1_1MemoryAccumulator.html</filename>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classIECore_1_1Object_1_1MemoryAccumulator.html</anchorfile>
      <anchor>a61a1a0ab11c980d70cf5d6ff3dc83deb</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classIECore_1_1Object_1_1MemoryAccumulator.html</anchorfile>
      <anchor>a8e05a7ad39fd63e666909035ae930f2d</anchor>
      <arglist>(const Object *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classIECore_1_1Object_1_1MemoryAccumulator.html</anchorfile>
      <anchor>aeba8bfb893703daeb7442261e27144c5</anchor>
      <arglist>(const void *ptr, size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total</name>
      <anchorfile>classIECore_1_1Object_1_1MemoryAccumulator.html</anchorfile>
      <anchor>a27472cc7718ecfeafd922eb26a27f5f2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object::SaveContext</name>
    <filename>classIECore_1_1Object_1_1SaveContext.html</filename>
    <member kind="function">
      <type></type>
      <name>SaveContext</name>
      <anchorfile>classIECore_1_1Object_1_1SaveContext.html</anchorfile>
      <anchor>adad770c24499d63e8b2de6883905968d</anchor>
      <arglist>(IndexedIOInterfacePtr ioInterface)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>container</name>
      <anchorfile>classIECore_1_1Object_1_1SaveContext.html</anchorfile>
      <anchor>aaf4967ad275eac2f308b8f61408f584b</anchor>
      <arglist>(const std::string &amp;typeName, unsigned int ioVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classIECore_1_1Object_1_1SaveContext.html</anchorfile>
      <anchor>a4ab64c1725b2ffd0905be2acf699001b</anchor>
      <arglist>(const Object *toSave, IndexedIOInterfacePtr o, const IndexedIO::EntryID &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IndexedIOInterfacePtr</type>
      <name>rawContainer</name>
      <anchorfile>classIECore_1_1Object_1_1SaveContext.html</anchorfile>
      <anchor>a81286e778c902ae6ec16bb660995583e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Object::TypeDescription</name>
    <filename>classIECore_1_1Object_1_1TypeDescription.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeDescription</name>
      <anchorfile>classIECore_1_1Object_1_1TypeDescription.html</anchorfile>
      <anchor>af61f9946ee58237ed07081aed46c1c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeDescription</name>
      <anchorfile>classIECore_1_1Object_1_1TypeDescription.html</anchorfile>
      <anchor>a7b5e92f7503c3131bbd5abdba6bb8fed</anchor>
      <arglist>(TypeId alternateTypeId, const std::string &amp;alternateTypeName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ObjectParameter</name>
    <filename>classIECore_1_1ObjectParameter.html</filename>
    <base>IECore::Parameter</base>
    <member kind="typedef">
      <type>std::set&lt; TypeId &gt;</type>
      <name>TypeIdSet</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>ae2b8f6c4f3fc22d8998b5cb3e277d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectParameter</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>a1ac8438e1de678eb0885327d067dcfa9</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectPtr defaultValue, TypeId type, const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectParameter</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>ad84d61277ab53492428b7328826b48a2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectPtr defaultValue, const TypeIdSet &amp;types, const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectParameter</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>a21ae7f4b8b553db3fc728b8d2ca50560</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectPtr defaultValue, const TypeId *types, const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>a8c79d6b6eec368ff7df7e7880737bc65</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>const TypeIdSet &amp;</type>
      <name>validTypes</name>
      <anchorfile>classIECore_1_1ObjectParameter.html</anchorfile>
      <anchor>a112a855506d263f213bbbca139661a42</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ObjectReader</name>
    <filename>classIECore_1_1ObjectReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>a8c55873e72a5c2e4c19861ddb41dd056</anchor>
      <arglist>(ObjectReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectReader</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>a447773bdbf87fb507ffb417c77621e15</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>a69d405a354b19ea6bf08705defb8094e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>add13b3abb8324aa5f95f280051409c64</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>ae089313b037620df2a558c6cd5a4a45a</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static IndexedIOInterfacePtr</type>
      <name>open</name>
      <anchorfile>classIECore_1_1ObjectReader.html</anchorfile>
      <anchor>ab6c45b9f587931c9667ccac517c23657</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ObjectVector</name>
    <filename>classIECore_1_1ObjectVector.html</filename>
    <base>IECore::Object</base>
    <member kind="typedef">
      <type>std::vector&lt; ObjectPtr &gt;</type>
      <name>MemberContainer</name>
      <anchorfile>classIECore_1_1ObjectVector.html</anchorfile>
      <anchor>af115d538b941b05c7b5c600227e67480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1ObjectVector.html</anchorfile>
      <anchor>a2524573fc3d1add519738368322c24fc</anchor>
      <arglist>(ObjectVector, Object)</arglist>
    </member>
    <member kind="function">
      <type>MemberContainer &amp;</type>
      <name>members</name>
      <anchorfile>classIECore_1_1ObjectVector.html</anchorfile>
      <anchor>a9a0491d004e2ecb48976b348ecdb8e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MemberContainer &amp;</type>
      <name>members</name>
      <anchorfile>classIECore_1_1ObjectVector.html</anchorfile>
      <anchor>ac38a7398185d57d6190e4e846c8052d5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ObjectWriter</name>
    <filename>classIECore_1_1ObjectWriter.html</filename>
    <base>IECore::Writer</base>
    <member kind="function">
      <type></type>
      <name>ObjectWriter</name>
      <anchorfile>classIECore_1_1ObjectWriter.html</anchorfile>
      <anchor>abc75f70b7386209e379ff1e984613817</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canWrite</name>
      <anchorfile>classIECore_1_1ObjectWriter.html</anchorfile>
      <anchor>aaa4be43bd6f3567c70c338a9cb3293a1</anchor>
      <arglist>(ConstObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWrite</name>
      <anchorfile>classIECore_1_1ObjectWriter.html</anchorfile>
      <anchor>a2d431c2464462c49f7027bb8f3402d01</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectParameterPtr</type>
      <name>m_headerParameter</name>
      <anchorfile>classIECore_1_1ObjectWriter.html</anchorfile>
      <anchor>a1e72de3dc74bedde706de5d54e7e0880</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::OBJReader</name>
    <filename>classIECore_1_1OBJReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1OBJReader.html</anchorfile>
      <anchor>a78f6f15cc9c4abead354bf12f7925571</anchor>
      <arglist>(OBJReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OBJReader</name>
      <anchorfile>classIECore_1_1OBJReader.html</anchorfile>
      <anchor>a0c0a345de2e219056721ef96e84cf029</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1OBJReader.html</anchorfile>
      <anchor>afbec591253be28365594b42cbdae854e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1OBJReader.html</anchorfile>
      <anchor>af1d1785e884853b094be8fa099f8ba1c</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Op</name>
    <filename>classIECore_1_1Op.html</filename>
    <base>IECore::Parameterised</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>a004f188045393e0312f58cc7b5ca7415</anchor>
      <arglist>(Op, Parameterised)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Op</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>a84f0487e365b9b03f467b4ec49e78c72</anchor>
      <arglist>(const std::string &amp;description, ParameterPtr resultParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Op</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>a72420fd824055c866241b1c7d816834c</anchor>
      <arglist>(const std::string &amp;description, CompoundParameterPtr compoundParameter, ParameterPtr resultParameter)</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>operate</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>a7717aa4ef327625079a44b7c59020117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parameter *</type>
      <name>resultParameter</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>af7773d09f58543dfdd4f7ce88a8362d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1Op.html</anchorfile>
      <anchor>adcb346068dc479f9e8cebeb321b08be9</anchor>
      <arglist>(const CompoundObject *operands)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::OStreamMessageHandler</name>
    <filename>classIECore_1_1OStreamMessageHandler.html</filename>
    <base>IECore::MessageHandler</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a5b684902452a4092b3592c747ac435de</anchor>
      <arglist>(OStreamMessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OStreamMessageHandler</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a1d2fd91f033064794181b214eed0f677</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OStreamMessageHandler</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a1974ad32306d76c4ce9f57a804a7a9d5</anchor>
      <arglist>(std::ostream *stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a8222f32076f999f1165c2ffcda063a16</anchor>
      <arglist>(Level level, const std::string &amp;context, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OStreamMessageHandlerPtr</type>
      <name>cErrHandler</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a1500d64e328944a59ea63f4ab08eb7d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OStreamMessageHandlerPtr</type>
      <name>cOutHandler</name>
      <anchorfile>classIECore_1_1OStreamMessageHandler.html</anchorfile>
      <anchor>a35f61e529d7dda4c06c38606b72e3f64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::OversamplesCalculator</name>
    <filename>classIECore_1_1OversamplesCalculator.html</filename>
    <member kind="function">
      <type></type>
      <name>OversamplesCalculator</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>ac3260e0f7d7d4580b425805a12caaba5</anchor>
      <arglist>(float frameRate=24.0, unsigned samplesPerFrame=1, unsigned ticksPerSecond=6000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameRate</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a915f80cffba10fa2d401dbc7ec0f70ec</anchor>
      <arglist>(float frameRate)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFrameRate</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>ae5a9301082e3377a3a7c510c265cea45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplesPerFrame</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>acbbeaf5155f0f3384bef764fb308ccdc</anchor>
      <arglist>(unsigned samplesPerFrame)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSamplesPerFrame</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a201f619b8ae6f6eb793d4d724d04f244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTicksPerSecond</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a734fde51743c4292667735fc8a2fd043</anchor>
      <arglist>(unsigned ticksPerSecond)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getTicksPerSecond</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a72143b93f19fcf50122200c07cb745de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>framesToTicks</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a3c3679d5d3f162d76defecb772faa979</anchor>
      <arglist>(float f) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>ticksToFrames</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a01e9df5397b27a19b2fbc5f8ae2ac5f3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nearestTick</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a32c0b1ce2e0aadf3d140fe1c51ccaf0b</anchor>
      <arglist>(int tick) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>tickInterval</name>
      <anchorfile>classIECore_1_1OversamplesCalculator.html</anchorfile>
      <anchor>a1791fd93f059bd2c0a7359ca67175084</anchor>
      <arglist>(float frame, int &amp;tickLow, int &amp;tickHigh) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PanalogToLinearDataConversion</name>
    <filename>classIECore_1_1PanalogToLinearDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>LinearToPanalogDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>a7cb8ffe4c4561e575c5a7f6791190bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>ac661f305ac0a4ca0f865bef8ba262050</anchor>
      <arglist>(sizeof(F) &gt;=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>aa1d14d44c21e87494c6eea7fb53a79fc</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PanalogToLinearDataConversion</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>a2951c581f42a77b2cfa85d8af3efb142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PanalogToLinearDataConversion</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>a197030b331279982cf10dcd081aeb8e0</anchor>
      <arglist>(float c1, float c2, float c3, float c4)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>a9f4fcfba5f4d0d273e0e9e1966ad23a7</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1PanalogToLinearDataConversion.html</anchorfile>
      <anchor>af5aa492916903f4aebdd1dd5226bbf85</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PanalogToLinearOp</name>
    <filename>classIECore_1_1PanalogToLinearOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PanalogToLinearOp.html</anchorfile>
      <anchor>ac080c755adfce23eacdbb334b8b75f4f</anchor>
      <arglist>(PanalogToLinearOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1PanalogToLinearOp.html</anchorfile>
      <anchor>a8d2fc4a1de34aee498351d1196d3ed0c</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Parameter</name>
    <filename>classIECore_1_1Parameter.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="typedef">
      <type>std::pair&lt; std::string, ObjectPtr &gt;</type>
      <name>Preset</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a04ead3ff9f92c0453d19f58416043f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Preset &gt;</type>
      <name>PresetsContainer</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a1683d39ac6c636ac214f60a434747764</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a1108c59e5ba7a10e6d0b0e80b24d2ca6</anchor>
      <arglist>(Parameter, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameter</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a322a0dfce7aba1c83bde148d8151e7de</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectPtr defaultValue, const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>ac52b0a3d6da3e1ac33eb678ff955220c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InternedString &amp;</type>
      <name>internedName</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a0bd857bbfdf28014068827df4feb1804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a0b8b3bdb3b1f270ec9f3dab0791c4d44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Object *</type>
      <name>defaultValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a2537aab934ce200f790a256149b001ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const PresetsContainer &amp;</type>
      <name>presets</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a49ec6bc7108421d2bffdc7635f2fc331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>presetsOnly</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a57b99491610c4ea19def247b1b71844d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundObject *</type>
      <name>userData</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a4b70e364c6f5d198e2e09eab18e857f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundObject *</type>
      <name>userData</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>aae533b039d81894742486ea98c23007b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a690f348337b6e6a3f1e5f2968cbd6916</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a0c13a1def5990c07d968e1bf8fc2ae55</anchor>
      <arglist>(std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>aadbb00d915c257d32fc7096992944a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a9366344fbff2b8f79b62306ece63f425</anchor>
      <arglist>(const Object *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a7403f1a9127c74d87be6e8171d50a8db</anchor>
      <arglist>(ObjectPtr value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidatedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>aea210053337fdadb0d22b9b5d5fe5d29</anchor>
      <arglist>(ObjectPtr value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>ae7eea072f49de706c33c8303ba035d45</anchor>
      <arglist>(const std::string &amp;presetName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Object *</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>aecfcd88d6ad16e6797097798ecda4526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Object *</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a3d7420e30fd17daae3530fd72bdf90cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Object *</type>
      <name>getValidatedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a6af59d579671762bb077d052ce3f9f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Object *</type>
      <name>getValidatedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a3ffd38782bffa185e9426ab2de7d20e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getTypedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a3c98ebf7411d696b9d9ac014740392a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getTypedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a1bc55ca42b33e48ef2b3f5d0e44e587a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getTypedValidatedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a52cdcd97765ab52556daaef7223ccdf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getTypedValidatedValue</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>a27065a876e8c6741fdae8f8dae68abc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCurrentPresetName</name>
      <anchorfile>classIECore_1_1Parameter.html</anchorfile>
      <anchor>ad6c66d997630326625a6696779cf7a4e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Parameterised</name>
    <filename>classIECore_1_1Parameterised.html</filename>
    <base>IECore::RunTimeTyped</base>
    <base>IECore::ParameterisedInterface</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a83522fb5175f946e2614a7dcd06f69ab</anchor>
      <arglist>(Parameterised, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameterised</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a7b9df431277eb7db5ca639cd7ce444a9</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameterised</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a120da428f8303eb86768136241c22cef</anchor>
      <arglist>(const std::string &amp;description, CompoundParameterPtr compoundParameter)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a2e3f970b50e9debd2751457e691f8336</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>ae773218ddcad02a5c80d2963404219cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstCompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>ae6e41283bd78e25f040dfa81e5333da4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundObjectPtr</type>
      <name>userData</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a93b095f8b267d6b1696831f7232a82a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstCompoundObjectPtr</type>
      <name>userData</name>
      <anchorfile>classIECore_1_1Parameterised.html</anchorfile>
      <anchor>a4a86ba59d4e6a65819ae2c63d48c1a28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParameterisedInterface</name>
    <filename>classIECore_1_1ParameterisedInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual CompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1ParameterisedInterface.html</anchorfile>
      <anchor>a29eee7ac9d6d52e07cec87dd89a4887f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstCompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1ParameterisedInterface.html</anchorfile>
      <anchor>ac7b1124d51ba55bb52b48aa66b20f7d5</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParameterisedProcedural</name>
    <filename>classIECore_1_1ParameterisedProcedural.html</filename>
    <base>IECore::VisibleRenderable</base>
    <base>IECore::ParameterisedInterface</base>
    <member kind="function">
      <type></type>
      <name>ParameterisedProcedural</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a74921f5bae6dcecf4f3c21d5da96d05e</anchor>
      <arglist>(const std::string &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a53f2269da795192655a29175ce3c8840</anchor>
      <arglist>(ParameterisedProcedural, VisibleRenderable)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>aa70fa6e2e2c70422e13c0541cef0ca7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a82422a855dfb5e11c1c689bdbc6e6f4b</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>ad135cefdf8314f65d7e65eabd2cbf853</anchor>
      <arglist>(Renderer *renderer, bool inAttributeBlock, bool withState, bool withGeometry, bool immediateGeometry) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a65db2c55e5bda1cdbfff874499aba460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a4c491533c6ccd0ccd5a6311f675cfd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstCompoundParameterPtr</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a433bae5570c3bd562208a8c7e08e5b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doRenderState</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a495413de24cc54ad4b6b0a6591d1a6d7</anchor>
      <arglist>(RendererPtr renderer, ConstCompoundObjectPtr args) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Imath::Box3f</type>
      <name>doBound</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a7ff652ea22acb849c1a377dbcdb70642</anchor>
      <arglist>(ConstCompoundObjectPtr args) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doRender</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>a0f768510da55c2683dc1b965e908db1f</anchor>
      <arglist>(RendererPtr renderer, ConstCompoundObjectPtr args) const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Forwarder</name>
      <anchorfile>classIECore_1_1ParameterisedProcedural.html</anchorfile>
      <anchor>ae5fa6fa1c042ed9cce29f36ce22c2eb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParticleMeshOp</name>
    <filename>classIECore_1_1ParticleMeshOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a5bc9e926f99beaa042ca8788c270170a</anchor>
      <arglist>(ParticleMeshOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>FileNameParameter *</type>
      <name>fileNameParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a629966a42f092a510bb9ca285c76ded1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FileNameParameter *</type>
      <name>fileNameParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ac2ee01b7faadc9f14fffdcda413ae83b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>positionAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a4668c42bfaa481901cf1007c8bf28c2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>positionAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a0167fa8f0e6696dd5fbf779b2d3361d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>useRadiusAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>aa03ce617b4d9795be90a62a054daa352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>useRadiusAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a9855fbab9005aa772de9df56c9e9d3d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>radiusAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a88708c8e51829271ce7af05832763679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>radiusAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a155b3fc6f9ca9d57b2981f7e218d6b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a05a6a80fc59f0d4250dec725b14f8e08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ac3dfc22b49160aafbb1af72c0e8b249b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>radiusScaleParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a71ec57c331e30e69da0c908233c487f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>radiusScaleParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a669ca5e4b5647de29198f140f346dc19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>useStrengthAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a083f7e544a4f2e850de0d5676b8083f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>useStrengthAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a3aa7d4ead2e055a19729f575a230276d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>strengthAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ae87c9e1e2aba5b44ee89ce9ffb55b548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>strengthAttributeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a44306ab94d66358ad7fd98092dfccc26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>strengthParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a58efcce707383de14a1284ad3f91d43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>strengthParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a0b6601df9903c31a5eb17b2ab166afbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>strengthScaleParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a0d6a9f6c12907e0518e4d93b5f30abde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>strengthScaleParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a862c1dcd4670a4646b40255ceef3fc76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>aa89ed419232f77702605c50434e21087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>adbf3e487169c9dca0ca0573fb7095b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ad5737d897bc1a4be729f4c323ef193de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>affe997472f87740bcbeb44bc2a41caf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ab445d847a81e8cfce2aba1ed6fc8830c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a5abbfc3d88ea70c9928bc52a12c34e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>automaticBoundParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>afb5e1dfa593ec49f370be8ac2f19dd6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>automaticBoundParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>acdc768bad0a43225d3d2d0b8142a01bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>gridMethodParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a277035951220f3220b073eb4926f0ecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>gridMethodParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a835ce7e7795df074141ac0e2782d0bcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V3fParameter *</type>
      <name>divisionSizeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>afde9cc89f954b0c11c8d38bbd9223c3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3fParameter *</type>
      <name>divisionSizeParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a6c2c8408c7112e037a77e820b7e2b1c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>boundExtendParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>addc8305a58b13f6a09826d54ca49ea0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>boundExtendParameter</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>ace3364ebccdad4dbd15afbd8fdaed7be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ParticleMeshOp.html</anchorfile>
      <anchor>a92a03e6382f92e6aaf1c540419f88b4f</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParticleReader</name>
    <filename>classIECore_1_1ParticleReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="enumeration">
      <name>RealType</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a6d10a699db009c115e35fafcac302707</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a05f27a3649d32feadf5941e9db7366a3</anchor>
      <arglist>(ParticleReader, Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleReader</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>ad834a6bdd69f95d3883916f8c839f574</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>percentageParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a3cc5aea27bb8564caf7fc6c3e069d8ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>percentageParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>aad12cd24ec69dd7f160d64ae1fd8d1c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>percentageSeedParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a646011be8a3df09ed5b227c93e0861a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>percentageSeedParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>ab2905d3827307078ef2fb7be8975ba17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>attributesParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a02424f59f161d2b071a894bfcd8a6e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>attributesParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>abacd2c4d3b163dd6f8ed1136f4215418</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>realTypeParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>af289e533db58b536b518a01d325dc105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>realTypeParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a13213d8559abc716c8589cc5129f628f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>numParticles</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a91b6284248349427d3fadd5886bd5d80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attributeNames</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a0b4f2501bd6f10cce2ab4083c38465a0</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataPtr</type>
      <name>readAttribute</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a962940af40a7acb60f341acfb8155d34</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a0d089d6d1a1f032e1c8f45ab313ec467</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>particlePercentage</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>aec0c33a01f973411ddc493b837e4e8d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>particlePercentageSeed</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a7d784697f09bd3cf17e6bf1c069b8b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>particleAttributes</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a9fbcec75b35888e2f1bb5095e66ed736</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RealType</type>
      <name>realType</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>aa36f0fb457cb72acb0d5368e69f1163f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T::Ptr</type>
      <name>filterAttr</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>af1352f20d0e0fde12b987331e0ac421b</anchor>
      <arglist>(const F *attr, float percentage, const Data *idAttr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_percentageParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>ab9f95068f2e86dff92f1a1dd447c33d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_percentageSeedParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a70ebc2ec5bbf1098e370f7d7fa3bed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVectorParameterPtr</type>
      <name>m_attributesParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>af6b7e8e40e25cdd710eebd8d544cf02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_realTypeParameter</name>
      <anchorfile>classIECore_1_1ParticleReader.html</anchorfile>
      <anchor>a04a8ef6b14afcecb243e04d6600d18d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParticleWriter</name>
    <filename>classIECore_1_1ParticleWriter.html</filename>
    <base>IECore::Writer</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canWrite</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>a3d43c3ff86810623c83177ac4599fb24</anchor>
      <arglist>(ConstObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleWriter</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>a003a12733b3d85fd265a1545f0c062bb</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const PointsPrimitive *</type>
      <name>particleObject</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>a221f5f1422d2cd3cecba046ac8227aef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>particleAttributes</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>af8472c24a915e98667fb3055d09444c7</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>particleCount</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>a4e6b37be205dca90bc10e097aa4f8084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVectorParameterPtr</type>
      <name>m_attributesParameter</name>
      <anchorfile>classIECore_1_1ParticleWriter.html</anchorfile>
      <anchor>ae57d5354ce95295e0f9111fd3ae44710</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PatchMeshPrimitive</name>
    <filename>classIECore_1_1PatchMeshPrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>PatchMeshPrimitive</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a90715bb30df50b25e0c2d09a61db9169</anchor>
      <arglist>(unsigned int uPoints, unsigned int vPoints, const CubicBasisf &amp;uBasis=CubicBasisf::linear(), const CubicBasisf &amp;vBasis=CubicBasisf::linear(), bool uPeriodic=false, bool vPeriodic=false, ConstV3fVectorDataPtr p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a225a959cde0831c0461323b3d3bd3246</anchor>
      <arglist>(PatchMeshPrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>uPoints</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>ae4a79e0f86a0e2c1044695fd082b8051</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vPoints</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>aad63ae2c25d8b6fbf8375afb59547ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>uPatches</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>af8168d355cd0543239992b2ba462a8ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vPatches</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a2b7a782689daa17f1faf1f17111cf563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CubicBasisf &amp;</type>
      <name>uBasis</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a85db809fdac7f75d47648b02b29d619a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CubicBasisf &amp;</type>
      <name>vBasis</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a36b56594c857a6fef723b83046d3cd43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uPeriodic</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>afe33b3049c9cf652ec7636f8a04db7b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vPeriodic</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>ac3d67a3212ebe05a67336d49b602e5ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a2f82fee63f40893e49385dda9b1d13f9</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a10f5f84e55b0001ebce0e4ec42f287dd</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_uLinear</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a7b12b7c559b7b7741d4f536d3eb6b666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_vLinear</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>ad35d3144a8260f0b3da50ba5c166f8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_uPoints</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a6dd8f26b8539864cd3efae148c3bcc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_vPoints</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a734ffb37c83b503f26dcd1761ce1ad89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CubicBasisf</type>
      <name>m_uBasis</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a4d23cfa0ffa869e67933ab882095ab1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CubicBasisf</type>
      <name>m_vBasis</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a6bf7e2dc79d51865a776220f3c6d20f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_uPeriodic</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>aa349b9bad3405fc54b020eb1a49e0e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_vPeriodic</name>
      <anchorfile>classIECore_1_1PatchMeshPrimitive.html</anchorfile>
      <anchor>a857650f0d48a55900162f05a6f3f28c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PathParameter</name>
    <filename>classIECore_1_1PathParameter.html</filename>
    <base>IECore::TypedParameter</base>
    <member kind="function">
      <type></type>
      <name>PathParameter</name>
      <anchorfile>classIECore_1_1PathParameter.html</anchorfile>
      <anchor>acd0ba39327b00dbbc4ac986b3d9317ab</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::string &amp;defaultValue=&quot;&quot;, bool allowEmptyString=true, CheckType check=PathParameter::DontCare, const StringParameter::PresetsContainer &amp;presets=StringParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowEmptyString</name>
      <anchorfile>classIECore_1_1PathParameter.html</anchorfile>
      <anchor>a10e81fdce076fd2d29126bdd811ecedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mustExist</name>
      <anchorfile>classIECore_1_1PathParameter.html</anchorfile>
      <anchor>a32f983b1d08ec4ab4383866e7804b089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mustNotExist</name>
      <anchorfile>classIECore_1_1PathParameter.html</anchorfile>
      <anchor>a89d0c8dcd152f8eeac12341bf789a84f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1PathParameter.html</anchorfile>
      <anchor>a501f80b6efb2196310295a67d7652493</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PathVectorParameter</name>
    <filename>classIECore_1_1PathVectorParameter.html</filename>
    <base>IECore::TypedParameter</base>
    <member kind="function">
      <type></type>
      <name>PathVectorParameter</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>a2e8d4e0e832c73a4719787ef347f9c55</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::vector&lt; std::string &gt; &amp;defaultValue, bool allowEmptyList=true, CheckType check=PathVectorParameter::DontCare, const StringVectorParameter::PresetsContainer &amp;presets=StringVectorParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathVectorParameter</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>a5d28270b492a0b79bb67a2a6fdd29ce4</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectTypePtr defaultValue, bool allowEmptyList=true, CheckType check=PathVectorParameter::DontCare, const StringVectorParameter::ObjectPresetsContainer &amp;presets=StringVectorParameter::ObjectPresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowEmptyList</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>a7793a9ccfde495be134a2430a7a5fd3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mustExist</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>adf88a05d6745f1ab005612664a2b2f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mustNotExist</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>a04fcdaa82e12e51b6d9b413132da8eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1PathVectorParameter.html</anchorfile>
      <anchor>a9d5017b99183e2d5dd6e1e776223a75a</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PDCParticleReader</name>
    <filename>classIECore_1_1PDCParticleReader.html</filename>
    <base>IECore::ParticleReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>af6cbf8c07fcc3a4115508c8c52f71cb9</anchor>
      <arglist>(PDCParticleReader, ParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDCParticleReader</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>a2759d32ea1b53cd36288f8a7f57f33b9</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>numParticles</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>a0f67690256536617d745567f3c781325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeNames</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>aa0513d188a2bf0a50838ebe40e8f812a</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataPtr</type>
      <name>readAttribute</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>a06be04c1e7942adbee0870950f74d81b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1PDCParticleReader.html</anchorfile>
      <anchor>a16ac071dfb868fd093507810fe6bea11</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PDCParticleWriter</name>
    <filename>classIECore_1_1PDCParticleWriter.html</filename>
    <base>IECore::ParticleWriter</base>
    <member kind="function">
      <type></type>
      <name>PDCParticleWriter</name>
      <anchorfile>classIECore_1_1PDCParticleWriter.html</anchorfile>
      <anchor>aa3bf56b29c489bab497919ee2d8c8ffb</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::SmoothStepFalloff</name>
    <filename>structIECore_1_1SmoothStepFalloff.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1SmoothStepFalloff.html</anchorfile>
      <anchor>ab3b40304d248d28064a852065c069a76</anchor>
      <arglist>(T t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::SmootherStepFalloff</name>
    <filename>structIECore_1_1SmootherStepFalloff.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1SmootherStepFalloff.html</anchorfile>
      <anchor>a60d0338baba59ca287ecae66b0766d60</anchor>
      <arglist>(T t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PerlinNoise</name>
    <filename>classIECore_1_1PerlinNoise.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>PerlinNoise&lt; P, V, F &gt; *</type>
      <name>Ptr</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a1e6212b53adadfcd6c8fd506e1e163af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a3182da8e5947d988ca260b2d0e101dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a2317df92fa7cebec76f80da6f3dbcf1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a732a4e58634d6fc1b60364c8689a3e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a52e8d8d07fd838e7e34ebc29c5523312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a0a8623fe286ddebebfa04bb12176e7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>aa73f16cd31ab109b65ac6d0c4a5a3cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PerlinNoise</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>aa19c6518ca912f986686a4f6b168ec86</anchor>
      <arglist>(unsigned long int seed=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PerlinNoise</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a42b08be5ac6c53354c8ab2811635571c</anchor>
      <arglist>(const PerlinNoise &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGradients</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>aefb4b43243a8f64f3a2d6f13511f2625</anchor>
      <arglist>(unsigned long int seed)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>noise</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>ac78ab70afa00a9d271f942666d22acf5</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>noise</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a4252f5585289ac34d1cf1d7cf90fac9a</anchor>
      <arglist>(const Point &amp;p, PointBaseType filterWidth) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a284853dd99d427c831505d51746f9826</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PerlinNoise.html</anchorfile>
      <anchor>a5961bc7c01632a8bac1d8c005295aeb1</anchor>
      <arglist>(const Point &amp;p, PointBaseType filterWidth) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PlaneImplicitSurfaceFunction</name>
    <filename>classIECore_1_1PlaneImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae943a834cc9f27aa206c4308a046c459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>aa4c961c8206923fb2e2283d6ddeb3026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>adea0025eefd701da26f70a0fd1d859aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>aa97ed2dcbf9accb6f3daad7ecd945378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a3c5489e2000188adb5f7c6957aaca0cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a2af6006a4935716f9bad6e11dc9218f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a705cb8550ea71f8096d2a14cf51e13fc</anchor>
      <arglist>(PlaneImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlaneImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>af74d4c1fa0ca1b35f4d8e09bf21f7b11</anchor>
      <arglist>(const Point &amp;normal, PointBaseType distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlaneImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a994f5fced89ae4ba8eebb4b9ac706ad4</anchor>
      <arglist>(const Point &amp;normal, const Point &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a009aef37d39adc1d1502f76bafb1f98d</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a213d7628a4d7b3f101222448d73f2343</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>m_normal</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>af9fc2d872841f5f5d25e51e0a1210a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointBaseType</type>
      <name>m_distance</name>
      <anchorfile>classIECore_1_1PlaneImplicitSurfaceFunction.html</anchorfile>
      <anchor>a054a28f0ebb257215c6c0825a3c618c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PNGImageReader</name>
    <filename>classIECore_1_1PNGImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>a3c262549c3c13fc340be7f6f8b5cede7</anchor>
      <arglist>(PNGImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PNGImageReader</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>a5b4a758f66a4058df8a4d596be8d858d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>a4102a155b33def3251af35179f2b3ba7</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>ab964c4dc3b1f9c0a7131fcce22ea0ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>ac71e6d1253923cad2bc1178de59d9ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>ac736b4ba8bb1009afad627a587f61c7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>addfb7c016d236166098573079e5ca60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1PNGImageReader.html</anchorfile>
      <anchor>adac5bcdc14322636dfbf3ce47f8b8e64</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointBoundsOp</name>
    <filename>classIECore_1_1PointBoundsOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>a8e97d3411f24b3fa078ee3d585246a61</anchor>
      <arglist>(PointBoundsOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>ac7418944c08808e81c6be18ff322573c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>aff3bc2ee0ad11318f3e7d36fd079c245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>velocityParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>aca05491310c12ec3f27b2b162f87ade8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>velocityParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>afff67a07dff19ad92806906b72456325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>velocityMultiplierParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>a39e96c534c0b95941e2bc6cb39c6842e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>velocityMultiplierParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>aaf77c409d18951640a9b815b8d9e0fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>ac0ac7589149f7c6a5bd1b3f7aa3ceb31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>a89a31997fd893db76c6ab4d4a9d768e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>radiusMultiplierParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>ab2c4b8288f6885fa7a772b308b567515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>radiusMultiplierParameter</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>a0f928a5fcd925cba08a7438dccf4056d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointBoundsOp.html</anchorfile>
      <anchor>a557c71ec0974c355cd704f3dfa6410f8</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointDensitiesOp</name>
    <filename>classIECore_1_1PointDensitiesOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>a2428e7347ef087217c2cd6823d7572e0</anchor>
      <arglist>(PointDensitiesOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>afbf4d89859dbb6fcfb73e74a800c95c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>aac5d92a8752ca52de91609641215e1c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>numNeighboursParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>a9de4e096d29876c6003797b9a4310bfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>numNeighboursParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>ab9720528c1e53fe6b0937b03777fd8a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoubleParameter *</type>
      <name>multiplierParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>a699f4b0a11410defa9f1c3ff56955306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DoubleParameter *</type>
      <name>multiplierParameter</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>a6fa96bd268af9e70c6af3fc6d85cba53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointDensitiesOp.html</anchorfile>
      <anchor>a1a7b0495c4fbb98bf644b43836dbdbbb</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointDistribution</name>
    <filename>classIECore_1_1PointDistribution.html</filename>
    <member kind="function">
      <type></type>
      <name>PointDistribution</name>
      <anchorfile>classIECore_1_1PointDistribution.html</anchorfile>
      <anchor>a7e4b53a805ecb8223b1471dc6da42800</anchor>
      <arglist>(const std::string &amp;tileSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PointDistribution.html</anchorfile>
      <anchor>aabcb74f7378387891332836775d773b7</anchor>
      <arglist>(const Imath::Box2f &amp;bounds, float density, DensityFunction &amp;densitySampler, PointFunction &amp;pointEmitter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PointDistribution.html</anchorfile>
      <anchor>a86c0a68e67b9531831ba5fceb5112fee</anchor>
      <arglist>(const Imath::Box2f &amp;bounds, float density, PointFunction &amp;pointEmitter) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PointDistribution &amp;</type>
      <name>defaultInstance</name>
      <anchorfile>classIECore_1_1PointDistribution.html</anchorfile>
      <anchor>acc26ac37530b43cac2affa26db4721d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointDistributionOp</name>
    <filename>classIECore_1_1PointDistributionOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>a8f207a9a31375001c21f7a803058759f</anchor>
      <arglist>(PointDistributionOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>a8f29bcef62ffa3d2e0f6ad2732d994fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>aa80357c75dc966abcc7f7cf9010772d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>densityParameter</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>a2a55f9f6b8ecbe8d7549cf40cd63e1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>densityParameter</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>a43d982ad78fe5863eb402ec2b3c38894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processMesh</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>a6553a4bd350d23208c00bacad7cf6485</anchor>
      <arglist>(const IECore::MeshPrimitive *mesh)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointDistributionOp.html</anchorfile>
      <anchor>ad17eabe9df8743b33bb6aeb3ec3f0c13</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointMeshOp</name>
    <filename>classIECore_1_1PointMeshOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>ae34771aa7ece064cfa7d4c7bee573966</anchor>
      <arglist>(PointMeshOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>a40fba7924bedb38d3eff05a0c49f5d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>af6c3bd968dba2771daf12f5ef047462b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoubleVectorParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>a37242b132519d82c574a2911b86505c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DoubleVectorParameter *</type>
      <name>radiusParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>af071169fe5a4385cf3e1de1a785fb261</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoubleVectorParameter *</type>
      <name>strengthParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>ab5f22a6fa4a2235f7e8afb4cf29b4620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DoubleVectorParameter *</type>
      <name>strengthParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>ad0e3daed64d210d29cdc869343f7679f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>a74ea614238a0bf5844a4460a8ae9aed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>thresholdParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>abb744894a88393d46df9e9e018628fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>a1eb19ac2da18bac1cd0a6f299ed0b61e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V3iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>aed035496848ca3e37c1a2e5bbac92121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>a5706b3023e7a5fbf7775c6319377ca92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box3fParameter *</type>
      <name>boundParameter</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>ab3e7b961af37a579e24d9e67a1ad07b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointMeshOp.html</anchorfile>
      <anchor>ae80aae74227fa26f5a550bd2e903dfa0</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointNormalsOp</name>
    <filename>classIECore_1_1PointNormalsOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a3860fd8aebc0fdb82de09b2d6af6bf22</anchor>
      <arglist>(PointNormalsOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a80344b82778d1ce0a76d48ca144bd9ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>pointParameter</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a5497d8a424101ecee67946cc8619a723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>numNeighboursParameter</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a354e85b0056bbe7ef1b985431ff62834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>numNeighboursParameter</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a4193d8207e9d1357a0db82552f6b0b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointNormalsOp.html</anchorfile>
      <anchor>a30907bea4abd8aebb9eba137b886ff5f</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointRepulsionOp</name>
    <filename>classIECore_1_1PointRepulsionOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a7c74800f27bad0d61eac8c78376ad520</anchor>
      <arglist>(PointRepulsionOp, ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ad355766e3a26ef478800291d78840079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a78f3df748296a36c704cb90c1cdc27a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>afaf3b981aefe8cdbefeceaa5d1a51a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ImagePrimitiveParameter *</type>
      <name>imageParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a3803830bec03f75aa3df878cb50b379d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a5cf090c109e19e17e6b0e9d08c41af18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>channelNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>acf92e9e8cef7b8836e863f09b9b70826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>numIterationsParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>aa2a393abaebfa615118bfee539cb7900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>numIterationsParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ae465cdc2a7b82915aae02bdef36c88c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>magnitudeParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ae6bfe4b81178cc57bf911cbaa7a45280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>magnitudeParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a6f48e99359d971455b1ef24c0a87c340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>weightsNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a548545f3dfdc9e0f2a05ba7e87856a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>weightsNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ae8b6930cc2096c6763a493cd3f6f4e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNearestPointsAndDensities</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a49e8a3a7b4652c6796d2bf0ea599057c</anchor>
      <arglist>(ImagePrimitiveEvaluator *, const PrimitiveVariable &amp;density, MeshPrimitiveEvaluator *, const PrimitiveVariable &amp;s, const PrimitiveVariable &amp;t, std::vector&lt; Imath::V3f &gt; &amp;points, std::vector&lt; float &gt; &amp;densities)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateForces</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a1fd369a701a5edeebd7479c99851d0d0</anchor>
      <arglist>(std::vector&lt; Imath::V3f &gt; &amp;points, std::vector&lt; float &gt; &amp;radii, std::vector&lt; Imath::Box3f &gt; &amp;bounds, std::vector&lt; Imath::V3f &gt; &amp;forces, Imath::Rand48 &amp;generator, std::vector&lt; float &gt; &amp;densities, float densityInv)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ae8e3e35d4f7c79382d2d2c2780ba7f09</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MeshPrimitiveParameterPtr</type>
      <name>m_meshParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ab706849e38efc157c924d82eccd8ffbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImagePrimitiveParameterPtr</type>
      <name>m_imageParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a1192b5c8862009630019cbfba38e4dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_channelNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>ad90c1f88865721009f8e26f998a2e3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntParameterPtr</type>
      <name>m_numIterationsParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a48077c7fa4a3dbc222c94f5ce73f88b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_magnitudeParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>abeb727d973bbcfa2146c74da733d6e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringParameterPtr</type>
      <name>m_weightsNameParameter</name>
      <anchorfile>classIECore_1_1PointRepulsionOp.html</anchorfile>
      <anchor>a744deb09920a887b9bae6a0dc898403d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointSmoothSkinningOp</name>
    <filename>classIECore_1_1PointSmoothSkinningOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>ac0e971a0cdb9a8137d4130d9c5f9ad14</anchor>
      <arglist>(PointSmoothSkinningOp, ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>positionVarParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a5207eabf9a230e68d5466eeb0ab9f905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>positionVarParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a08035d3243ef4d3bea8ba9f0e71ed196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>normalVarParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>af1a17f54fccde172ee8463f3bcea5fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>normalVarParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>adcb71329231ba51e04205906cf3d549c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmoothSkinningDataParameter *</type>
      <name>smoothSkinningDataParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a294829a090cb9404f3a95510548e9afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmoothSkinningDataParameter *</type>
      <name>smoothSkinningDataParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>aed25ee9e6ee7f6332a4100acf92abace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>M44fVectorParameter *</type>
      <name>deformationPoseParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a62295e29967feca8182cf874ab475e75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const M44fVectorParameter *</type>
      <name>deformationPoseParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a9d95bd900ac13f3a5cd0c23accf81bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>deformNormalsParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>af48da6e4a595ec9fa94effdaf9c219f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>deformNormalsParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>aa7c0f8d93670a8c25671499c8c6c8a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>blendParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a8b6c1e4e13c53ce43dbe4e61f95c741e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>blendParameter</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>a23943f1b41763416e8204b7fb2e5ccfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1PointSmoothSkinningOp.html</anchorfile>
      <anchor>af80d8af530b6186c473f92c583124dc3</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointsMotionOp</name>
    <filename>classIECore_1_1PointsMotionOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>a0bdc9a1be638c941526694004d5a4148</anchor>
      <arglist>(PointsMotionOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>FloatVectorParameter *</type>
      <name>snapshotTimesParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>af3975068fd48444357dd3e7706088862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatVectorParameter *</type>
      <name>snapshotTimesParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>ae5d09c4fd54df2a179ee44ebe74b1012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectVectorParameter *</type>
      <name>pointsPrimitiveVectorParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>a93404bec79241cf4456f172ace94167c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVectorParameter *</type>
      <name>pointsPrimitiveVectorParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>a9024fc0e35458ecfd636e0aa28ea86f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>idPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>aaf4237b1c79649eaea477e18b52fb789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>idPrimVarNameParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>a4ddf29acafd6b009c561a58439a20743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>maskedPrimVarsParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>ae0afd83df938ce620cccecad418e6bf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>maskedPrimVarsParameter</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>a6f3fe043cd0bfd45efd7c533c9e4d5e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1PointsMotionOp.html</anchorfile>
      <anchor>ac7a0f7449e08270d191c6e274e92dc88</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointsPrimitive</name>
    <filename>classIECore_1_1PointsPrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>PointsPrimitive</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>abf9f4114d75bfd1ed70b1a246c379475</anchor>
      <arglist>(size_t numPoints=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointsPrimitive</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>aa0771459aee85fdef4067f9090c6d2d7</anchor>
      <arglist>(V3fVectorDataPtr points, FloatVectorDataPtr radii=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>a0fb902fc2e521ca9ac976fdf0f9d4c5a</anchor>
      <arglist>(PointsPrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumPoints</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>a64e1510e17897c134cf6a78531a60914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPoints</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>af6497ef429778fd29ed494fa830aefc0</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>a9e3eedaf8555cf8c308c04f7c9726bed</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1PointsPrimitive.html</anchorfile>
      <anchor>a865e5932855eb1c3cfcb18a0dc65096f</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointsPrimitiveEvaluator</name>
    <filename>classIECore_1_1PointsPrimitiveEvaluator.html</filename>
    <base>IECore::PrimitiveEvaluator</base>
    <member kind="typedef">
      <type>PointsPrimitive</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a3b5056b29655792d2ec4b2f6598fdafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a48e1eb7a3d0a9cb75a8a6f60b4b21140</anchor>
      <arglist>(PointsPrimitiveEvaluator, PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a7082441dbed70ae57aedfbf7b347b45a</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointsPrimitiveEvaluator</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a9cf6be88598f3707be8bb26e49aa75bd</anchor>
      <arglist>(ConstPointsPrimitivePtr points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>addd827271f65832ab0a9eb7125b7916e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrimitiveEvaluator::ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>acef8ef62af0f5ec385a34f47d0345338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>aea162d4826cbcccc169eccc3ed9cc878</anchor>
      <arglist>(PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a54621bb0097675f8d3afef1d1e0ba329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>abaea5d9fd3dcc5330832a72f6b2136fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>aba30ea8389b80be56087c22b7e708008</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>aa151eaaec4b7c4a49ae3fba5c5b2d491</anchor>
      <arglist>(const Imath::V3f &amp;p, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a01a15862633de2fd666b9349f61235dc</anchor>
      <arglist>(const Imath::V2f &amp;uv, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a99e04c93a3cfc43ab7c297851d94b76d</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, PrimitiveEvaluator::Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a51c23292ccd3b899bb5f5c57356a1592</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a8d902b08432550625499d435388230b3</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static PrimitiveEvaluator::Description&lt; PointsPrimitiveEvaluator &gt;</type>
      <name>g_evaluatorDescription</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>a7512aaceafec82548fcc41f55a62480c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PrimitiveEvaluator::Description&lt; PointsPrimitiveEvaluator &gt;</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>adb3fb0e443eec118c29f2431059b6994</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Result</name>
      <anchorfile>classIECore_1_1PointsPrimitiveEvaluator.html</anchorfile>
      <anchor>aeda2b0238e1d97468018d291a2180853</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PointVelocityDisplaceOp</name>
    <filename>classIECore_1_1PointVelocityDisplaceOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>aadfa6e746cb3d46a43358aaa3f514312</anchor>
      <arglist>(PointVelocityDisplaceOp, ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>positionVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a051b76cfef2795484fc957806eff12b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>positionVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>adb2089aa893b37016b6c6e1cb0398c6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>velocityVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>aa322954c7b3e007c46fe8bc8ed77bba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>velocityVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a2b38a8ab032e2b90a66b4bd95a3ab531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>sampleLengthParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a2c76d9dd6db6842927193e04cf8a29ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>sampleLengthParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>afda2ad55b35261082c29b16365f76325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringParameter *</type>
      <name>sampleLengthVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a35b00e9ef142186f3f0adee810aa44e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringParameter *</type>
      <name>sampleLengthVarParameter</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a65ba8159b8d30e81e43bf26a8e441d2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1PointVelocityDisplaceOp.html</anchorfile>
      <anchor>a6575e5a5bf0c13d02d2fc71d1d4c7d72</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PolygonIterator</name>
    <filename>classIECore_1_1PolygonIterator.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;::const_iterator</type>
      <name>NumVerticesIterator</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>aba881f2a883c1d089ca7fb1defa6d976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;::const_iterator</type>
      <name>VertexIndexIterator</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>aeeb396f0d039b5495a9dce95ad8dcbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonIterator</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a5d99d2fe9b251d7dc228e1b731172364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonIterator</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>aed7e48eaa792cc436a2a917a25e83958</anchor>
      <arglist>(NumVerticesIterator numVerticesIterator, VertexIndexIterator vertexIndexIterator, int faceVaryingOffset)</arglist>
    </member>
    <member kind="function">
      <type>PolygonIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>afb8dcd56c291a0c80ceb346c8c842df2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PolygonIterator</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a62844394d8d64a5129bb6e6839be8775</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>acba3b8c1c0ab5a9e3b5a2f1436f0eea7</anchor>
      <arglist>(const PolygonIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a8b45073ec5700c16d6f4ae1590e2eb13</anchor>
      <arglist>(const PolygonIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>PolygonIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>ad0d54c7179741302f625304a659562f2</anchor>
      <arglist>(const PolygonIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PolygonVertexIterator&lt; ValueIterator &gt;</type>
      <name>vertexBegin</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a57e05fa03635ab80d3ed986a00020152</anchor>
      <arglist>(ValueIterator valuesBegin) const </arglist>
    </member>
    <member kind="function">
      <type>PolygonVertexIterator&lt; ValueIterator &gt;</type>
      <name>vertexEnd</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a5ad4d738acdabdd424041413fa9c2ba7</anchor>
      <arglist>(ValueIterator valuesBegin) const </arglist>
    </member>
    <member kind="function">
      <type>ValueIterator</type>
      <name>faceVaryingBegin</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a5c2d783b8ef6fcd764f0ca7d6ea8afea</anchor>
      <arglist>(ValueIterator valuesBegin) const </arglist>
    </member>
    <member kind="function">
      <type>ValueIterator</type>
      <name>faceVaryingEnd</name>
      <anchorfile>classIECore_1_1PolygonIterator.html</anchorfile>
      <anchor>a9ecb8e730c0894bf38ea2ada0db9dbed</anchor>
      <arglist>(ValueIterator valuesBegin) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PolygonVertexIterator</name>
    <filename>classIECore_1_1PolygonVertexIterator.html</filename>
    <templarg>VertexValueIterator</templarg>
    <templarg>VertexIndexIterator</templarg>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a7800cd292e42b226899f40c4ce437158</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexValueIterator::value_type</type>
      <name>value_type</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>abed2650c3e7b0b590d94e7d9734b5386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexValueIterator::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>aaf367b69c01ae909e0f471b23dd553c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexValueIterator::pointer</type>
      <name>pointer</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a1320a967a1174e90e8726d0ec52f766e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexValueIterator::reference</type>
      <name>reference</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>ae357992c1fa0e150a297d0291595abb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonVertexIterator</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>aae5c3c64ad8ef267f80f520983b88e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonVertexIterator</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a1472277dd7c02a0bf45f9bd0e2f2bd56</anchor>
      <arglist>(VertexIndexIterator vertexIndexIterator, VertexValueIterator vertexValuesBegin)</arglist>
    </member>
    <member kind="function">
      <type>PolygonVertexIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>afd905fa412382d92606abf7d22df8343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PolygonVertexIterator</type>
      <name>operator++</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>acf618c223b4b85e51ac1514250a4ecfb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a512e522482076c19aa9e301fa00e3ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a07d0e191155831c51c1eb9bef6708fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>aa5c5c3d7a0b3b90b745164dde6ee9dd0</anchor>
      <arglist>(const PolygonVertexIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>acd7469c3bbb100f9ac6537de497e11a5</anchor>
      <arglist>(const PolygonVertexIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>PolygonVertexIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1PolygonVertexIterator.html</anchorfile>
      <anchor>a584e81a8ccbee5b7f1db33fa8fa66cc2</anchor>
      <arglist>(const PolygonVertexIterator &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PreWorldRenderable</name>
    <filename>classIECore_1_1PreWorldRenderable.html</filename>
    <base>IECore::Renderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1PreWorldRenderable.html</anchorfile>
      <anchor>a241c3434c26f83857886c098d2488431</anchor>
      <arglist>(PreWorldRenderable, Renderable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Primitive</name>
    <filename>classIECore_1_1Primitive.html</filename>
    <base>IECore::VisibleRenderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a41e951bde02583833e3ca93c98a79c82</anchor>
      <arglist>(Primitive, VisibleRenderable)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>variableData</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a783b5d6f68aaf2c34eb52c189340c14b</anchor>
      <arglist>(const std::string &amp;name, PrimitiveVariable::Interpolation requiredInterpolation=PrimitiveVariable::Invalid)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>variableData</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>adfcebf37ded20f6afdea0ca09cfd6e94</anchor>
      <arglist>(const std::string &amp;name, PrimitiveVariable::Interpolation requiredInterpolation=PrimitiveVariable::Invalid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrimitiveVariableValid</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a1f6de79ab5576c107cd920d046376332</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arePrimitiveVariablesValid</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a5cc777f0c60b91e8c575d0099fb859cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariable::Interpolation</type>
      <name>inferInterpolation</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a3aaccf1c11a22c5823c49db5e033a502</anchor>
      <arglist>(size_t numElements) const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveVariable::Interpolation</type>
      <name>inferInterpolation</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>ac722f037d95514450822d64849c8f964</anchor>
      <arglist>(const Data *data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a603bf122b77ff0084e2da5fafd93a338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a640d8047fd04b1f0b611551f9adec474</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const =0</arglist>
    </member>
    <member kind="variable">
      <type>PrimitiveVariableMap</type>
      <name>variables</name>
      <anchorfile>classIECore_1_1Primitive.html</anchorfile>
      <anchor>a249cebe77cd4ae331003ade469127e9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PrimitiveEvaluator</name>
    <filename>classIECore_1_1PrimitiveEvaluator.html</filename>
    <base>IECore::RunTimeTyped</base>
    <class kind="struct">IECore::PrimitiveEvaluator::Description</class>
    <class kind="class">IECore::PrimitiveEvaluator::Result</class>
    <member kind="typedef">
      <type>PrimitiveEvaluatorPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a30728f0b024f6bc14e9c9affc42df154</anchor>
      <arglist>)(ConstPrimitivePtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>af926677606406029d7621e51a19cfb50</anchor>
      <arglist>(PrimitiveEvaluator, RunTimeTyped)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a9db2c0314339d8354cb518fe3cc11f89</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>ac78738c58353a9132c219f0a819ce99d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a15d217d8af19d59c03ff924335834ce9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a7f1d817f3a89273d2016cd6c5632e1e3</anchor>
      <arglist>(Result *result) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>signedDistance</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>ae79fab312829326a6be0a760f118139f</anchor>
      <arglist>(const Imath::V3f &amp;p, float &amp;distance) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a677909de5e226ca0a786ab2b9fa55b75</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a011f17360f826f69b2afe8a63524713e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a13cce15b9a8eb4588b078c79d13c733a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>ab7983f0aed975498f91c3e53a6ca9d6c</anchor>
      <arglist>(const Imath::V3f &amp;p, Result *result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>acc6101080d9181dbe85e32e24c6c833a</anchor>
      <arglist>(const Imath::V2f &amp;uv, Result *result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a98e95ad13be5045c89a85acf977d818f</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a0d612b60e3ddd613cb2cf226e7712495</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator.html</anchorfile>
      <anchor>a64b5e438e277cfe005c7d8808f06acfe</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::PrimitiveEvaluator::Description</name>
    <filename>structIECore_1_1PrimitiveEvaluator_1_1Description.html</filename>
    <templarg>E</templarg>
    <templarg>P</templarg>
  </compound>
  <compound kind="class">
    <name>IECore::PrimitiveEvaluator::Result</name>
    <filename>classIECore_1_1PrimitiveEvaluator_1_1Result.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a844e0eadf90956eea0344047ee69e0c5</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>point</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a859dca0a3d35dfbe773b431a492cb25a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>normal</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a700997e365dbffa62b057db33a0f831d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V2f</type>
      <name>uv</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a25507a8cc5432988d982273960127a44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>uTangent</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a3d15040923b55bab17860a3e936259d6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>vTangent</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a0bc993e929d5acbc5dc295bc5943baac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::V3f</type>
      <name>vectorPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>a6e2b89a8de243b203a83ae53abdbab36</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>floatPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>ae4e97686af00c2e08db9dc0795bd7f23</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>intPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>ae3744feab9a4c5df255882f2ddc19dcb</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>stringPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>aad3aa8b78465699cfe0bf3617f360481</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Color3f</type>
      <name>colorPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>ab3cfb1ba9f61e3aef317eb4137ab755b</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual half</type>
      <name>halfPrimVar</name>
      <anchorfile>classIECore_1_1PrimitiveEvaluator_1_1Result.html</anchorfile>
      <anchor>ac84c5bc719b343fbf475281a96a808a2</anchor>
      <arglist>(const PrimitiveVariable &amp;pv) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PrimitiveImplicitSurfaceFunction</name>
    <filename>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</filename>
    <base>ImplicitSurfaceFunction&lt; Imath::V3f, float &gt;</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a91a80cc4c7952261e780a5215b584005</anchor>
      <arglist>(PrimitiveImplicitSurfaceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a6f8f3f45542d47aed9dbc3bcedff24da</anchor>
      <arglist>(PrimitivePtr primitive)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae95c1f1502ed93cbfcf3d7cb1284725e</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a3a6b4a20c5cb02beec45fb215399938e</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PrimitiveEvaluatorPtr</type>
      <name>m_evaluator</name>
      <anchorfile>classIECore_1_1PrimitiveImplicitSurfaceFunction.html</anchorfile>
      <anchor>a732f13aeb153ad28a64d5991cd35a10b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::PrimitiveOp</name>
    <filename>classIECore_1_1PrimitiveOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1PrimitiveOp.html</anchorfile>
      <anchor>a8708843125934e65dc19af65b65376bb</anchor>
      <arglist>(PrimitiveOp, ModifyOp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveOp</name>
      <anchorfile>classIECore_1_1PrimitiveOp.html</anchorfile>
      <anchor>a5415d3bf7e52d2efd82860496c9e552d</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1PrimitiveOp.html</anchorfile>
      <anchor>a6c0b4729795dd1055e4dad9dc4e31e77</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>modifyPrimitive</name>
      <anchorfile>classIECore_1_1PrimitiveOp.html</anchorfile>
      <anchor>a47245280ef97bedf19590330354ec0bf</anchor>
      <arglist>(Primitive *primitive, const CompoundObject *operands)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::PrimitiveVariable</name>
    <filename>structIECore_1_1PrimitiveVariable.html</filename>
    <member kind="enumeration">
      <name>Interpolation</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a05cb700c5a060730f18789e29da07e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveVariable</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a5315a7482e1d3a7bc57fc1f914ed5362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveVariable</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a5905e3d606b1f341159be05b57443f2d</anchor>
      <arglist>(Interpolation i, DataPtr d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveVariable</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>af701fa4077f6297dbaef8d9e526aae5d</anchor>
      <arglist>(const PrimitiveVariable &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveVariable</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a5ba86642c4914fccf950a53d7e56983e</anchor>
      <arglist>(const PrimitiveVariable &amp;other, bool deepCopy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a31f3f78ab4b8ee64671ef634e8e05e34</anchor>
      <arglist>(const PrimitiveVariable &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>a820ca92597e25618a0d6712d6af7dd0a</anchor>
      <arglist>(const PrimitiveVariable &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Interpolation</type>
      <name>interpolation</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>aefdc22fc1afba5b447eb90b19486b2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DataPtr</type>
      <name>data</name>
      <anchorfile>structIECore_1_1PrimitiveVariable.html</anchorfile>
      <anchor>aa75abeeafc10ece0ca7cb07c8d8b8a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RadixSort</name>
    <filename>classIECore_1_1RadixSort.html</filename>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>a471777a221202942c2d5de5e4ece7a2c</anchor>
      <arglist>(sizeof(int)==4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>a6ed63bbdbf4acf2f51c997c5460dfb71</anchor>
      <arglist>(sizeof(unsigned int)==4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>af8623b82b6ff0ee3111b18cc3f3f0b37</anchor>
      <arglist>(sizeof(float)==4)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>a5c3e6cbf5c83f07111b963b1c0c7927f</anchor>
      <arglist>(const std::vector&lt; float &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>a51ecd5df8406f8ec2ee3d92a840f7196</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1RadixSort.html</anchorfile>
      <anchor>a46982303eb16502882b91385b8990690</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RandomRotationOp</name>
    <filename>classIECore_1_1RandomRotationOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>ab479b600b7ac9ed0ad18f3951b3b55d9</anchor>
      <arglist>(RandomRotationOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>seedParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a27a36585db906ec04d6854b7e491c437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>seedParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a4ac0c4c51a9acb8019fe1e49fe0c50cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>timeParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a4338a9d838b62b35d8c06d3b2e60f346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>timeParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a4902602b232be644bab9bf56ee44ca59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>speedMinParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>ae76176b4266cd2e1020cf47cd5ce6c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>speedMinParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>ae3c76c6fd73734359ebf9050d6824877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>speedMaxParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a63c52af6db24911e670cdaf8bae9b0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>speedMaxParameter</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a296a37c90ad0f218e9d9c6b86c428421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generate</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>ab0240013722d8fe030c93fc7eda8c38a</anchor>
      <arglist>(SeedIt seedBegin, SeedIt seedEnd, typename std::iterator_traits&lt; OutputIt &gt;::value_type::BaseType time, typename std::iterator_traits&lt; OutputIt &gt;::value_type::BaseType speedMin, typename std::iterator_traits&lt; OutputIt &gt;::value_type::BaseType speedMax, OutputIt result)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1RandomRotationOp.html</anchorfile>
      <anchor>a668e33574fc17588b370c4863c4a47e8</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Reader</name>
    <filename>classIECore_1_1Reader.html</filename>
    <base>IECore::Op</base>
    <class kind="class">IECore::Reader::ReaderDescription</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>adfedfdb9c7a8dd0781f37702129634c6</anchor>
      <arglist>(Reader, Op)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>fileName</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>a6769d3dcf349a4d57ed152735de4b8ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundObjectPtr</type>
      <name>readHeader</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>aca19dc508335e995cbb49375686cb35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectPtr</type>
      <name>read</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>a8f00d0a5a6078b5493c245320e2d5878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Reader</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>ab8889724f189c2b059c427529c5d2d6e</anchor>
      <arglist>(const std::string &amp;description, ParameterPtr resultParameter=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileNameParameterPtr</type>
      <name>m_fileNameParameter</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>a44cc80540182b9c714e7992ccfa0ebbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ReaderPtr(const std::string &amp;fileName)&gt;</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>ad1239affe2bf8fa15aff1e9751d50b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(const std::string &amp;fileName)&gt;</type>
      <name>CanReadFn</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>ad0e31e169f4f89d9a9fd9109dbcef2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReaderPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>af04eb40686be0b82c7ebf8887aaee6ec</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>a7418f3a72b7cc8c8f4f1ac807e52fed1</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>abcd989d96a87c648dbc3e0dda6873c3c</anchor>
      <arglist>(TypeId typeId, std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerReader</name>
      <anchorfile>classIECore_1_1Reader.html</anchorfile>
      <anchor>a92ec3e178bf0166368530652310e3a43</anchor>
      <arglist>(const std::string &amp;extensions, CanReadFn canRead, CreatorFn creator, TypeId typeId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Reader::ReaderDescription</name>
    <filename>classIECore_1_1Reader_1_1ReaderDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ReaderDescription</name>
      <anchorfile>classIECore_1_1Reader_1_1ReaderDescription.html</anchorfile>
      <anchor>a6f8a07e148038f0394c4693495d8b44c</anchor>
      <arglist>(const std::string &amp;extensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RealSphericalHarmonicFunction</name>
    <filename>classIECore_1_1RealSphericalHarmonicFunction.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1RealSphericalHarmonicFunction.html</anchorfile>
      <anchor>a37858c0c0a0330654961adbaca386228</anchor>
      <arglist>(boost::is_floating_point&lt; V &gt;::value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static V</type>
      <name>evaluate</name>
      <anchorfile>classIECore_1_1RealSphericalHarmonicFunction.html</anchorfile>
      <anchor>afa04d1bf695037c95cd0a8d7a705e1c2</anchor>
      <arglist>(V phi, V theta, unsigned int l, int m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evaluate</name>
      <anchorfile>classIECore_1_1RealSphericalHarmonicFunction.html</anchorfile>
      <anchor>aa454f0df743d13bc0e398f01cb2f2a09</anchor>
      <arglist>(V phi, V theta, unsigned int bands, std::vector&lt; V &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evaluate</name>
      <anchorfile>classIECore_1_1RealSphericalHarmonicFunction.html</anchorfile>
      <anchor>abce6b8d0257fee9009eec7f733aab23f</anchor>
      <arglist>(V phi, V theta, unsigned int bands, boost::function&lt; void(unsigned int, int, V) &gt; functor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::Rec709ToLinearDataConversion</name>
    <filename>structIECore_1_1Rec709ToLinearDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>LinearToRec709DataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1Rec709ToLinearDataConversion.html</anchorfile>
      <anchor>a2aef480dae3416bb1f1c8d4425cccece</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1Rec709ToLinearDataConversion.html</anchorfile>
      <anchor>aaa5de3a27d7fbbde1161b16415bc4a46</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1Rec709ToLinearDataConversion.html</anchorfile>
      <anchor>a2a4ecead2991b4670b6e8ef2d1179331</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1Rec709ToLinearDataConversion.html</anchorfile>
      <anchor>a17e0fc19f503df301632057cbeed54d2</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1Rec709ToLinearDataConversion.html</anchorfile>
      <anchor>aeb6b1b096c53c1c92f25548a95e667ed</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Rec709ToLinearOp</name>
    <filename>classIECore_1_1Rec709ToLinearOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Rec709ToLinearOp.html</anchorfile>
      <anchor>a97ccedd5c9dad6a8d53b24f27acfea45</anchor>
      <arglist>(Rec709ToLinearOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1Rec709ToLinearOp.html</anchorfile>
      <anchor>aa57df6131405f08740078dea0d2179e7</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RefCounted</name>
    <filename>classIECore_1_1RefCounted.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>RefCount</name>
      <anchorfile>classIECore_1_1RefCounted.html</anchorfile>
      <anchor>a84ef94d4c449a06c572f3c5423d9e846</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1RefCounted.html</anchorfile>
      <anchor>a11be5bcd18cd0341da256aa121220b11</anchor>
      <arglist>(RefCounted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRef</name>
      <anchorfile>classIECore_1_1RefCounted.html</anchorfile>
      <anchor>aebfc0d26628b291f868e8398af3c4606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRef</name>
      <anchorfile>classIECore_1_1RefCounted.html</anchorfile>
      <anchor>aa568f122475bcf311f995b654a6cf942</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RefCount</type>
      <name>refCount</name>
      <anchorfile>classIECore_1_1RefCounted.html</anchorfile>
      <anchor>a8dcb0bdec53af749339612f5c12377e9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RemoveSmoothSkinningInfluencesOp</name>
    <filename>classIECore_1_1RemoveSmoothSkinningInfluencesOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1RemoveSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>aa01542956c469305932c317a02f9dc9d</anchor>
      <arglist>(RemoveSmoothSkinningInfluencesOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1RemoveSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>a28e1d9d3e466ac3263dae0fd72a9ea3d</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Renderable</name>
    <filename>classIECore_1_1Renderable.html</filename>
    <base>IECore::BlindDataHolder</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Renderable.html</anchorfile>
      <anchor>a46f47f15971975f9086ce614cc6d12f4</anchor>
      <arglist>(Renderable, BlindDataHolder)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Renderable.html</anchorfile>
      <anchor>adc37e0700b451ca9120dc8943c0062ca</anchor>
      <arglist>(Renderer *renderer) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Renderer</name>
    <filename>classIECore_1_1Renderer.html</filename>
    <base>IECore::RunTimeTyped</base>
    <class kind="class">IECore::Renderer::Procedural</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a4838749d83f52cbb3f367cb4ef13e059</anchor>
      <arglist>(Renderer, RunTimeTyped)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>camera</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a3faf858c0be8b8d54950c25bc5c15429</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a6701d3d585217ccdac915ac300b81130</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;data, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>abc59d41232f26fd1b76d0eecb9a0f8dc</anchor>
      <arglist>(Procedural)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>procedural</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ad653dcca5715d314a323eb7f81577ed3</anchor>
      <arglist>(ProceduralPtr proc)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataPtr</type>
      <name>command</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>af6002d21ab8243698183b8f4b7db1ae8</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>acd834661ea7c64c6987bfa660d08f650</anchor>
      <arglist>(const std::string &amp;name, ConstDataPtr value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstDataPtr</type>
      <name>getOption</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>afb061a62ae6caea078606f681bc62b2b</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>worldBegin</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ae525ed886ed90f3286c412d3c3ad1503</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>worldEnd</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a29e5ea49563295e9650fa97de4283378</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformBegin</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a8de999de675f13ad6b0c75aef9507508</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformEnd</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a720c43eccd8e823aa52e4e810bc2b479</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a58f35baba6120c16de72e7e25c9c9fc1</anchor>
      <arglist>(const Imath::M44f &amp;m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ae40039c9e135edc5250f9ab709af56d5</anchor>
      <arglist>(const std::string &amp;coordinateSystem)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>acfbbabaa4828dd2298b9967cdbf9b790</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a1517ef18a8405133b722b4ee892ebed6</anchor>
      <arglist>(const std::string &amp;coordinateSystem) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>concatTransform</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a84d0abdca984ba646884240bc8b0e87d</anchor>
      <arglist>(const Imath::M44f &amp;m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>coordinateSystem</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ada15151c1e97d3658ec1da05be9c90d3</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attributeBegin</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>aa0db292a4c2ac8e06358d824082c885f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attributeEnd</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a6469352678b05c8085fac0491a7c0d8f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a96aeb058ccd90020b5344a085d8317d0</anchor>
      <arglist>(const std::string &amp;name, ConstDataPtr value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstDataPtr</type>
      <name>getAttribute</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a07037c535a9175978113dd52c7640b0f</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shader</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a5f5a34ede04a128db9db2240b50e6bad</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>light</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>abfc27a9f52f4ae71a8d15e693541e1f6</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;handle, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>illuminate</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a161c5c0c5ad4dd3ecf73e94f3d9fca50</anchor>
      <arglist>(const std::string &amp;lightHandle, bool on)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>motionBegin</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a1468320b6f166544a1a1193eb25365be</anchor>
      <arglist>(const std::set&lt; float &gt; &amp;times)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>motionEnd</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>aa195e2e8ec823abfa2ba9e08ed328149</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>points</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a06ef00615a53a48bfdfbe1e48669d836</anchor>
      <arglist>(size_t numPoints, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disk</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a12bb1618d491f2a9f21a1ddb9f1c5f3a</anchor>
      <arglist>(float radius, float z, float thetaMax, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>curves</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>adb6abe5690183873c0bcb38a92218f0b</anchor>
      <arglist>(const CubicBasisf &amp;basis, bool periodic, ConstIntVectorDataPtr numVertices, const IECore::PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>text</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ab6d5b5b38e65aaaafe14e911b154767b</anchor>
      <arglist>(const std::string &amp;font, const std::string &amp;text, float kerning=1.0f, const PrimitiveVariableMap &amp;primVars=PrimitiveVariableMap())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sphere</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a94869f43c647947b0ca88c8b527c2a58</anchor>
      <arglist>(float radius, float zMin, float zMax, float thetaMax, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>image</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ab72852161207aa3efda6d5c9b692fdd3</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>mesh</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ac8d0e772ec325bec6f088e41ce7cb330</anchor>
      <arglist>(ConstIntVectorDataPtr vertsPerFace, ConstIntVectorDataPtr vertIds, const std::string &amp;interpolation, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nurbs</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>aa7d7d997c0991838cdc68194e604c91c</anchor>
      <arglist>(int uOrder, ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, ConstFloatVectorDataPtr vKnot, float vMin, float vMax, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>patchMesh</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a853477389d17b63cca1804cf98302558</anchor>
      <arglist>(const CubicBasisf &amp;uBasis, const CubicBasisf &amp;vBasis, int nu, bool uPeriodic, int nv, bool vPeriodic, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>geometry</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a8019ffa4c48512bffea4b54b460dab9f</anchor>
      <arglist>(const std::string &amp;type, const CompoundDataMap &amp;topology, const PrimitiveVariableMap &amp;primVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>instanceBegin</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>ae705919ba22eee470a94ef9dae81cfe3</anchor>
      <arglist>(const std::string &amp;name, const CompoundDataMap &amp;parameters)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>instanceEnd</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a2c8b1fa07e07cfd0bab324ae08e3512c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>instance</name>
      <anchorfile>classIECore_1_1Renderer.html</anchorfile>
      <anchor>a647895f399319f4cbb5540934f6a8405</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Renderer::Procedural</name>
    <filename>classIECore_1_1Renderer_1_1Procedural.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1Renderer_1_1Procedural.html</anchorfile>
      <anchor>ab766b0782d0ef74340bd8dda24f8af91</anchor>
      <arglist>(Procedural)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1Renderer_1_1Procedural.html</anchorfile>
      <anchor>ad7b8ee5987bce0b44e7fc20022f289c1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Renderer_1_1Procedural.html</anchorfile>
      <anchor>a3e52ae7add1eebe8c832418ca2fb1c68</anchor>
      <arglist>(RendererPtr renderer) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ReorderedFrameList</name>
    <filename>classIECore_1_1ReorderedFrameList.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>af76db18240d04773b9af20d266d0eaaa</anchor>
      <arglist>(ReorderedFrameList, FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReorderedFrameList</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>ae283f5b33d50d001c8e0f67eea26ced8</anchor>
      <arglist>(FrameListPtr frameList)</arglist>
    </member>
    <member kind="function">
      <type>FrameListPtr</type>
      <name>getFrameList</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>a937d9f792d51ef33fc0a1d33827677af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameList</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>abdc1ef1b99a76b2a58366929639531c4</anchor>
      <arglist>(FrameListPtr frameList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>aabfdc458e5491e22f4cbc1df3bcdada6</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static FrameListPtr</type>
      <name>parseForChildList</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>a7165fd2cb2a658c3786d9280b2cb0a6a</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FrameListPtr</type>
      <name>m_frameList</name>
      <anchorfile>classIECore_1_1ReorderedFrameList.html</anchorfile>
      <anchor>ae40581290ca13d9fe3c453be6463527d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ReorderSmoothSkinningInfluencesOp</name>
    <filename>classIECore_1_1ReorderSmoothSkinningInfluencesOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ReorderSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>a6385712cf3ff4d9586aa587fc1b7ff3e</anchor>
      <arglist>(ReorderSmoothSkinningInfluencesOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1ReorderSmoothSkinningInfluencesOp.html</anchorfile>
      <anchor>ad2c1fd99e5919de19eee72c690f7d82f</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ReversedFrameList</name>
    <filename>classIECore_1_1ReversedFrameList.html</filename>
    <base>IECore::ReorderedFrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>af3e37d08a58587855dcf1fefd77706f6</anchor>
      <arglist>(ReversedFrameList, ReorderedFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReversedFrameList</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a1a2345d90aa859fd30d9a64d72d1e2e6</anchor>
      <arglist>(FrameListPtr frameList=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a120198bab56204f6520105daa86f0605</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a1b64f93d0f3ac9ba2bb76edb24f0e882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a1570b18e1dea87df91105b0d17ee5005</anchor>
      <arglist>(ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a40ae4cb1107993750dff3f59f3352d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>suffix</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a85b1ef8d0d7970dbab3f224afce295b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1ReversedFrameList.html</anchorfile>
      <anchor>a5bac71289b11829ef70e1659848e299a</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RGBToXYZColorTransform</name>
    <filename>classIECore_1_1RGBToXYZColorTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ColorTransform</base>
    <member kind="typedef">
      <type>XYZToRGBColorTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a9dd19e8898fe8c55568717951dee242e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGBToXYZColorTransform</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>ac4660c26764230ceffd76adcaaeea01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGBToXYZColorTransform</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a8ef963c5f613f5eae19399d3ec01e5bc</anchor>
      <arglist>(const M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGBToXYZColorTransform</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a543f5cb9b6d8d1ae71ea4a19b78714a0</anchor>
      <arglist>(const C &amp;rChromacity, const C &amp;gChromacity, const C &amp;bChromacity, const C &amp;referenceWhite)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a833639e6cdf165ce4b5bbf5b89d8321e</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a28ffc262e5913858ddf74090eff7b34d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Imath::M33f &amp;</type>
      <name>matrix</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a97132cc5d5b44bac512da22b1b378168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>classIECore_1_1RGBToXYZColorTransform.html</anchorfile>
      <anchor>a75b33acef7b82506ad0818874a80a8c9</anchor>
      <arglist>(const C &amp;rChromacity, const C &amp;gChromacity, const C &amp;bChromacity, const C &amp;referenceWhite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RunTimeTyped</name>
    <filename>classIECore_1_1RunTimeTyped.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>RefCounted</type>
      <name>BaseClass</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a625d677333b1c5d845e84c316efe4928</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a32a3cc7cab3600aab75cc4b19c380968</anchor>
      <arglist>(RunTimeTyped)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TypeId, TypeId &gt;</type>
      <name>BaseTypeRegistryMap</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a1fe164d7a3777ab0d5fbc8bfa48d9406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TypeId, std::vector&lt; TypeId &gt; &gt;</type>
      <name>BaseTypesRegistryMap</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>adcd395b481b51c63d49036e86dbfc60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TypeId, std::set&lt; TypeId &gt; &gt;</type>
      <name>DerivedTypesRegistryMap</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a5aa2859b6528b9821fa32a9af24ffcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TypeId, std::string &gt;</type>
      <name>TypeIdsToTypeNamesMap</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>acdef8e109503c07a5061dd9c4d5d795f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, TypeId &gt;</type>
      <name>TypeNamesToTypeIdsMap</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>accadffa445e7335c3f65f2d82ea1b966</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static BaseTypeRegistryMap &amp;</type>
      <name>baseTypeRegistry</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>aed2cdf20ee3940cef4b1dd666d43798d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DerivedTypesRegistryMap &amp;</type>
      <name>derivedTypesRegistry</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a2209d321fb2bda12e05aacadd219feb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static BaseTypesRegistryMap &amp;</type>
      <name>completeBaseTypesRegistry</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a7424886790877890ce69c4c47d7d55b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DerivedTypesRegistryMap &amp;</type>
      <name>completeDerivedTypesRegistry</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>af46772006e88d2694594ec2d687f7ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>derivedTypeIdsWalk</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>aaebbf04cd67c419f929de4e0d91258c8</anchor>
      <arglist>(TypeId typeId, std::set&lt; TypeId &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static TypeIdsToTypeNamesMap &amp;</type>
      <name>typeIdsToTypeNames</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a80f4fb0874b12825d0e8f2c65ef3183a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static TypeNamesToTypeIdsMap &amp;</type>
      <name>typeNamesToTypeIds</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a59cc2b8763a20020ebd673741f7acd95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>typeId</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>ab492714535d30d6383c8da36940e5368</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typeName</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>aa2721547099ca410d8ffaaad839b5614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstanceOf</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a1faf621ea8e463f87fa9eecec0ae35a1</anchor>
      <arglist>(TypeId typeId) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstanceOf</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a2b724868df8b81d762faa07ee8bde4e5</anchor>
      <arglist>(const char *typeName) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>staticTypeId</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a8f94f94b789f1199b28436a06f1dcab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>staticTypeName</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a078a688f2c68fc7111cd4dad9b4ea16f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>baseTypeId</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>ab5eeb3311c24ce206e2b9d932acccaae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>baseTypeName</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>acae9683735327dbe509cd64831c4966e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inheritsFrom</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a94557a3e913a524dc3da8d2a86b02602</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inheritsFrom</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a84e6432bf8127404f875ade6f3c1d435</anchor>
      <arglist>(const char *typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inheritsFrom</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a27bc29a9928d3d0a1dc40e169c48a8e8</anchor>
      <arglist>(TypeId type, TypeId baseType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inheritsFrom</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a4750078d7f7a48c682139ad465058a2a</anchor>
      <arglist>(const char *typeName, const char *baseTypeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>baseTypeId</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a66a4d0ae680b8dbcb1ea131fac356597</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; TypeId &gt; &amp;</type>
      <name>baseTypeIds</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>ab31dc9124e530b926a28e899073c447a</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::set&lt; TypeId &gt; &amp;</type>
      <name>derivedTypeIds</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a0006d9433727bc950aff0c891f06ceeb</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TypeId</type>
      <name>typeIdFromTypeName</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>a5957cc66b81a5d09913042b68b757dd5</anchor>
      <arglist>(const char *typeName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>typeNameFromTypeId</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>abf9631892ac3dd1210a78aff3cd06a94</anchor>
      <arglist>(TypeId typeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerType</name>
      <anchorfile>classIECore_1_1RunTimeTyped.html</anchorfile>
      <anchor>acae7b8663a1c3d59e78a9387ce41ef31</anchor>
      <arglist>(TypeId derivedTypeId, const char *derivedTypeName, TypeId baseTypeId)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::ScaledDataConversion</name>
    <filename>structIECore_1_1ScaledDataConversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::DataConversion</base>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1ScaledDataConversion.html</anchorfile>
      <anchor>a0873770881bc7a7414a4e2b9d61db7d0</anchor>
      <arglist>(F f) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ScopedMessageHandler</name>
    <filename>classIECore_1_1ScopedMessageHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedMessageHandler</name>
      <anchorfile>classIECore_1_1ScopedMessageHandler.html</anchorfile>
      <anchor>a43bac3c76038a105e219d8b66755fe1e</anchor>
      <arglist>(MessageHandlerPtr handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedMessageHandler</name>
      <anchorfile>classIECore_1_1ScopedMessageHandler.html</anchorfile>
      <anchor>a23f7ac6d3b4d7fbe27d2489c2164b4a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SearchPath</name>
    <filename>classIECore_1_1SearchPath.html</filename>
    <member kind="function">
      <type></type>
      <name>SearchPath</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a08a587f02046e7a5cc0083a047a67912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchPath</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>ab25de6421799be278b705145880d79f2</anchor>
      <arglist>(const std::string &amp;paths, const std::string &amp;separators)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a7b84d06d2f2c044148468ab20b0e8514</anchor>
      <arglist>(const SearchPath &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a0ad85ca7e6a4263211196a54361d3c74</anchor>
      <arglist>(const SearchPath &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPaths</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a7ff27e4336454e82be06b73352cdf535</anchor>
      <arglist>(const std::string &amp;paths, const std::string &amp;separators)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPaths</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a27032d4a1b2ba329d6f30a63b91845b1</anchor>
      <arglist>(const std::string &amp;separator) const </arglist>
    </member>
    <member kind="function">
      <type>boost::filesystem::path</type>
      <name>find</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a867f3ebaaa0c288dc262783f884d3600</anchor>
      <arglist>(const boost::filesystem::path &amp;file) const </arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; boost::filesystem::path &gt;</type>
      <name>paths</name>
      <anchorfile>classIECore_1_1SearchPath.html</anchorfile>
      <anchor>a34d56f1458175e2e3e09b24f993337ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SGIImageReader</name>
    <filename>classIECore_1_1SGIImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>adaa16bb6b223aa230e51b1284f003c84</anchor>
      <arglist>(SGIImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SGIImageReader</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>ac0e8dc1ca3525f1c2d908542b64c2761</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>a0e83926317afa3030934579c21faebda</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>aa7dbf077cddb958dd1d1304692f62bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>af88fe5d99b68721435f904b1600c8e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>a0fc49d67b634142896436ac618ad7eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>a078cb3a591ad1c33be1803fef34a66fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1SGIImageReader.html</anchorfile>
      <anchor>a787c25bc5fb224e7acf166495ec3b812</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Shader</name>
    <filename>classIECore_1_1Shader.html</filename>
    <base>IECore::StateRenderable</base>
    <member kind="function">
      <type></type>
      <name>Shader</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a6040976fef6fc1554afbabdb377327b4</anchor>
      <arglist>(const std::string &amp;name=&quot;defaultsurface&quot;, const std::string &amp;type=&quot;surface&quot;, const CompoundDataMap &amp;parameters=CompoundDataMap())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>ae53f28aeb9eb47f6ad2d466927649883</anchor>
      <arglist>(Shader, StateRenderable)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a737ab7e266c4e8f4cee8e19e5702c84d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>ab7b4967549eb92bad61a79eff9d31fe5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a15480c9ffd79f18b0f1eadbdf60d8416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>ac6e73f0db06c1447f81cd0b4bc52c7f5</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a2705a9187900b576eb6d9ac31e6310c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundDataMap &amp;</type>
      <name>parameters</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a0c5b520ecfcd363afd80731c7fab48ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompoundDataPtr</type>
      <name>parametersData</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a36d1963f3940f5a09658b21630591bb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1Shader.html</anchorfile>
      <anchor>a3044dd54b60eb58817a836b34d35afc8</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SimpleSubsurface</name>
    <filename>classIECore_1_1SimpleSubsurface.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1SimpleSubsurface.html</anchorfile>
      <anchor>a52aaf6c0a2cf8cd03d0bc7df385c6470</anchor>
      <arglist>(SimpleSubsurface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSubsurface</name>
      <anchorfile>classIECore_1_1SimpleSubsurface.html</anchorfile>
      <anchor>ac0173e147086e03d4ee972ef295c0e38</anchor>
      <arglist>(ConstV3fVectorDataPtr p, ConstColor3fVectorDataPtr c, ConstFloatVectorDataPtr a, const SplinefColor3f &amp;falloff)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Color3f</type>
      <name>lookup</name>
      <anchorfile>classIECore_1_1SimpleSubsurface.html</anchorfile>
      <anchor>a02d222c785ab967721252e00767a55d1</anchor>
      <arglist>(const Imath::V3f &amp;p, float radius) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LongDataAlias</name>
    <filename>classIECore_1_1LongDataAlias.html</filename>
    <base protection="private">TypedData&lt; int &gt;</base>
    <member kind="variable" protection="protected" static="yes">
      <type>static TypeDescription&lt; IntData &gt;</type>
      <name>m_typeDescription</name>
      <anchorfile>classIECore_1_1LongDataAlias.html</anchorfile>
      <anchor>aa6056f6c88490b7c18ddba026d6962fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SmoothSkinningData</name>
    <filename>classIECore_1_1SmoothSkinningData.html</filename>
    <base>IECore::Data</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a9c37e172004cab75d99c194f1bc59fad</anchor>
      <arglist>(SmoothSkinningData, Data)</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorData *</type>
      <name>influenceNames</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a0ef5ba169c18754ee8203cdbce9df091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorData *</type>
      <name>influenceNames</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a1d0eed42b8a7223b2f6d5070e7ad945f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const M44fVectorData *</type>
      <name>influencePose</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a1d3f19dda2c7df325aeb9825993e0f85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>M44fVectorData *</type>
      <name>influencePose</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>ab72e8df2a0f60def980ae712f65c5f88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>pointIndexOffsets</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>aaf913fd54c8eeaa038b5bde256d7f5d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVectorData *</type>
      <name>pointIndexOffsets</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a7a1ef0ed6ba7784faacf9afd34af6687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>pointInfluenceCounts</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>aa4c82bfc229ab63b0269a3e6b7499f28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVectorData *</type>
      <name>pointInfluenceCounts</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a1074145499fe2f72388ea66c9551697c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntVectorData *</type>
      <name>pointInfluenceIndices</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a13e79c29158c63bb1c58589f0ed7f142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVectorData *</type>
      <name>pointInfluenceIndices</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a8bfc1fce8a3563d4ef657a731e6b82f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatVectorData *</type>
      <name>pointInfluenceWeights</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a393b4cbe8b6f4e21314d93965fc2adcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatVectorData *</type>
      <name>pointInfluenceWeights</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>a6f6d7abd63e18e4fd1b2d69cc45a661a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothSkinningData</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>ab2cf653a2807fcd95cbc3bd983a7e4dc</anchor>
      <arglist>(ConstStringVectorDataPtr influenceNames, ConstM44fVectorDataPtr influencePose, ConstIntVectorDataPtr pointIndexOffsets, ConstIntVectorDataPtr pointInfluenceCounts, ConstIntVectorDataPtr pointInfluenceIndices, ConstFloatVectorDataPtr pointInfluenceWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothSkinningData</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>ab8511ba862db7fcafef910700d0e093d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECore_1_1SmoothSkinningData.html</anchorfile>
      <anchor>acf902f5d466ab98f75b5b7f726cfa337</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SmoothSmoothSkinningWeightsOp</name>
    <filename>classIECore_1_1SmoothSmoothSkinningWeightsOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SmoothSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>ac5a783f41c636e74a3eff77b25c19fc8</anchor>
      <arglist>(SmoothSmoothSkinningWeightsOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1SmoothSmoothSkinningWeightsOp.html</anchorfile>
      <anchor>acd532f5c774cb30f69c506b9db37c6f0</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::SpaceTransform</name>
    <filename>structIECore_1_1SpaceTransform.html</filename>
    <templarg>F</templarg>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>FromType</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>a7f498625b11fc601c9b89006871d2d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ToType</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>a698e48d2e2ff0060af9dbd6132d9ea21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>af7f879a9ab54eb6459546f96537f28fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>ad670b8d06ad222578184afee36f27721</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>a61c18d7f68e35af5117c13135c5baf56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>structIECore_1_1SpaceTransform.html</anchorfile>
      <anchor>a0fda2f93d260a05ccd4ee63e09d2a075</anchor>
      <arglist>(const F &amp;f)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphereImplicitSurfaceFunction</name>
    <filename>classIECore_1_1SphereImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a8ed928dc1e0c6b6b072b04c26c6727ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a291aeb6697ded9ddbf3086bf30254cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a612c02802ce3862a55bed6c33e4a2435</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a0f071a83437abd3f5ba88a8c035fdc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a418943d8280f4f47d6b7180589bc356e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>ae28fcd8291bfef83844c0b51203c879f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a0a24f6adadb167992b102699daff25fd</anchor>
      <arglist>(SphereImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphereImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a97c54718090c8558032dfeee8dc337f6</anchor>
      <arglist>(const Point &amp;center, PointBaseType radius)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a5c2b7d7d5ccc50cd86d29496ac04b54c</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>af9f82732d7c868c610316b7e51cf8995</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>m_center</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a4301444ea59549334ddcd8e9f462d2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointBaseType</type>
      <name>m_radius</name>
      <anchorfile>classIECore_1_1SphereImplicitSurfaceFunction.html</anchorfile>
      <anchor>a9642f0db43251155b89148800960d8b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SpherePrimitive</name>
    <filename>classIECore_1_1SpherePrimitive.html</filename>
    <base>IECore::Primitive</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREOBJECT</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a43b862e86276dfb4517a99b994dceda0</anchor>
      <arglist>(SpherePrimitive, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpherePrimitive</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a44df58ece72a4f73b9d34a7e29df0524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpherePrimitive</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a55fa30d0795d19a60c5e8e371fa09a27</anchor>
      <arglist>(float radius, float zMin=-1.0f, float zMax=1.0f, float thetaMax=360.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>variableSize</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a5e696e62fd006bae0c3b55af1871595e</anchor>
      <arglist>(PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>ac2a2a181f6005a5e52d2fecac8f7c142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>af380a80c4dcae3226de50a5897f7377a</anchor>
      <arglist>(Renderer *renderer) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>radius</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a66dc8964b050f1e54e2bc826bded68dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>zMin</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>ae12b1b939cd22e2e845ddbd38fc8fb31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>zMax</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a57522da3c3936811d83aa3eb7cf117b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>thetaMax</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a4ff0c3b0b0f2cd25417df3c99005416d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a6c7f4837acf416497a79105323ea3fdf</anchor>
      <arglist>(float r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZMin</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>a8663faac3491992100440c00cc6955d1</anchor>
      <arglist>(float zm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZMax</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>ac1efd53ab977a002cafb5e0de043bbfe</anchor>
      <arglist>(float zm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThetaMax</name>
      <anchorfile>classIECore_1_1SpherePrimitive.html</anchorfile>
      <anchor>afbfc4b74beff07b3b3b33cd414924449</anchor>
      <arglist>(float tm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SpherePrimitiveEvaluator</name>
    <filename>classIECore_1_1SpherePrimitiveEvaluator.html</filename>
    <base>IECore::PrimitiveEvaluator</base>
    <member kind="typedef">
      <type>SpherePrimitive</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>afa0139f9f0d538d8b98a62cdc49df863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>ac299d6a8b2fec63d0f49482926cfb8d5</anchor>
      <arglist>(SpherePrimitiveEvaluator, PrimitiveEvaluator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>ab7443fb6fa236cbb5be3fa74a2e7dce5</anchor>
      <arglist>(Result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpherePrimitiveEvaluator</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a131b27739c2377e6d649a066d1450412</anchor>
      <arglist>(ConstSpherePrimitivePtr sphere)</arglist>
    </member>
    <member kind="function">
      <type>ConstPrimitivePtr</type>
      <name>primitive</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a9bc12ef414da699dd572e6ddb6192f44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrimitiveEvaluator::ResultPtr</type>
      <name>createResult</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a01859da8cee65ae679617f4b606346ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateResult</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>ab7db8cf2a3e18b90552e6915dd3fd94a</anchor>
      <arglist>(PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>closestPoint</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>aadd981acce7ecc80e84be28ee03d11a1</anchor>
      <arglist>(const Imath::V3f &amp;p, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pointAtUV</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>aa2c64482cf8a8e3e038f80fc90530df6</anchor>
      <arglist>(const Imath::V2f &amp;uv, PrimitiveEvaluator::Result *result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>intersectionPoint</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>adaeda49e3bcce0221bc62805529eab6e</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, PrimitiveEvaluator::Result *result, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intersectionPoints</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a7bbdc88e2109d7594f068fb6b42e7847</anchor>
      <arglist>(const Imath::V3f &amp;origin, const Imath::V3f &amp;direction, std::vector&lt; PrimitiveEvaluator::ResultPtr &gt; &amp;results, float maxDistance=Imath::limits&lt; float &gt;::max()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>volume</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a93a9984a774c46b194ab267daccf7ec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::V3f</type>
      <name>centerOfGravity</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a3488c32477f6166a969e699f4015d35e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>surfaceArea</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a6072a1efbcf2484e429bd5964abcc7c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PrimitiveEvaluatorPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>a6ffa19f0277e3a02e9227808a4f71433</anchor>
      <arglist>(ConstPrimitivePtr primitive)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstSpherePrimitivePtr</type>
      <name>m_sphere</name>
      <anchorfile>classIECore_1_1SpherePrimitiveEvaluator.html</anchorfile>
      <anchor>aecff2a257e63aa0aa25b6deea8048325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalHarmonics</name>
    <filename>classIECore_1_1SphericalHarmonics.html</filename>
    <templarg>V</templarg>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a51b72e425462a1dece7cdfa6419b4bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>ValueType</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a31841c08ede03bffa9c48366df66a42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; V &gt;</type>
      <name>CoefficientVector</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a3d3a052d09c533e651430f65e22d21c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonics</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a51833281a93611f53704130fe1596cc2</anchor>
      <arglist>(unsigned int bands=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonics</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>ad37ffc7714ed13b846df327d7b4173e1</anchor>
      <arglist>(const SphericalHarmonics &amp;sh)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a483c50796871b226270d8d6c0e3b86ef</anchor>
      <arglist>(const SphericalHarmonics &amp;sh)</arglist>
    </member>
    <member kind="function">
      <type>const SphericalHarmonics &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a54ca2526d95454291e73f3fc723113e0</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bands</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a78d699d46b2a13826551c49a89458ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBands</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>abb2b19a91f7fd44d38e11b7299ee1e32</anchor>
      <arglist>(unsigned int bands)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V &gt; &amp;</type>
      <name>coefficients</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a0cfceceb729f3bced740a69c323d9ccb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; V &gt; &amp;</type>
      <name>coefficients</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>ae2efcd1adbc1989a80ec23c1e2ddd121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>acdc2ff89484f05a6c0cb260a2d387e2c</anchor>
      <arglist>(const Imath::Vec2&lt; BaseType &gt; &amp;phiTheta) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>acbe82be05c4cd2de459549d0e2127fb3</anchor>
      <arglist>(const Imath::Vec2&lt; BaseType &gt; &amp;phiTheta, unsigned int bands) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a66c7cd7e2c13dec2d447da09f0570824</anchor>
      <arglist>(const Imath::Vec3&lt; BaseType &gt; &amp;xyz) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>afd7b3de60260f74155e1d7e111dbc612</anchor>
      <arglist>(const Imath::Vec3&lt; BaseType &gt; &amp;xyz, unsigned int bands) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>dot</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a87fa7f4f8283544f9830785034d943f4</anchor>
      <arglist>(const SphericalHarmonics&lt; T &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>operator^</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a9befd0b05dc36303eac49630aa503b97</anchor>
      <arglist>(const SphericalHarmonics&lt; T &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convolve</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a516aed7018e8407e9724f47c97c04873</anchor>
      <arglist>(const SphericalHarmonics&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_bands</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a09624b2da5fca27498fb306a6b057605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V &gt;</type>
      <name>m_coefficients</name>
      <anchorfile>classIECore_1_1SphericalHarmonics.html</anchorfile>
      <anchor>a08e2856bf410afe30cc7e36b99ee5130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalHarmonicsProjector</name>
    <filename>classIECore_1_1SphericalHarmonicsProjector.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::vector&lt; V &gt;</type>
      <name>EvaluationVector</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a7c8b3ea4b4cb6dc08c33bb2cea81ff1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; EvaluationVector &gt;</type>
      <name>EvaluationSamples</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a258341dc181f143df850e9df51751392</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a2bb0d00d078220cb6c60cf10905eef43</anchor>
      <arglist>(boost::is_floating_point&lt; V &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonicsProjector</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>afe67d2ff416c6c3cf316eeaef61c8c43</anchor>
      <arglist>(unsigned int samples, unsigned long int seed=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonicsProjector</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a2c04e99d558c792b9d0576c2c683daf9</anchor>
      <arglist>(const std::vector&lt; Imath::Vec2&lt; V &gt; &gt; &amp;sphericalCoordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonicsProjector</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a0c74b7ad028ceec48d43f9c8fb765c58</anchor>
      <arglist>(const std::vector&lt; Imath::Vec2&lt; V &gt; &gt; &amp;sphericalCoordinates, const std::vector&lt; V &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Imath::Vec2&lt; V &gt; &gt; &amp;</type>
      <name>sphericalCoordinates</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a30e4ba31730bf7fb9fe39117f093b003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Imath::Vec3&lt; V &gt; &gt; &amp;</type>
      <name>euclideanCoordinates</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>acdb300775f4b7d41422a7f60a3149362</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V &gt; &amp;</type>
      <name>weights</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a88d7fec7f07aee7d0ce46e471dbd22c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a13b5391540e5583f85affe6ebcf614a1</anchor>
      <arglist>(unsigned int coordinateIndex, const U &amp;value, SphericalHarmonics&lt; U &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>polarProjection</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>ab1606c6a933516616b8e496a0ea6c365</anchor>
      <arglist>(T functor, SphericalHarmonics&lt; U &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>euclideanProjection</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>af455b1349959fa7b90a3438df29119a4</anchor>
      <arglist>(T functor, SphericalHarmonics&lt; U &gt; &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSamples</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a209b4c1f4570dc134ad5c12c45fb6f78</anchor>
      <arglist>(unsigned int bands) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Imath::Vec3&lt; V &gt;</type>
      <name>sphericalCoordsToUnitVector</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>abd3072db367ced19aa1c9a749093287d</anchor>
      <arglist>(const Imath::Vec2&lt; V &gt; &amp;sphericalCoord)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addProjection</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>ab1149fa8b9e4f1c0384842b2689e75b1</anchor>
      <arglist>(typename SphericalHarmonics&lt; T &gt;::CoefficientVector &amp;c, const EvaluationVector &amp;v, const T &amp;scale)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_bands</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>ae453e3e19591bbe1def1831b4bccb1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Imath::Vec2&lt; V &gt; &gt;</type>
      <name>m_sphericalCoordinates</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>ab0cc2e939a802e69beda9e27fbe7020b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Imath::Vec3&lt; V &gt; &gt;</type>
      <name>m_euclideanCoordinates</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a3719478bf1ff0cc596f718e9d76007f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EvaluationSamples</type>
      <name>m_shEvaluations</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>a111f25c07c74d88137dce93a829ea294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V &gt;</type>
      <name>m_weights</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsProjector.html</anchorfile>
      <anchor>ac2df51ef09710a3b5cd211344b27c26f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalHarmonicsRotationMatrix</name>
    <filename>classIECore_1_1SphericalHarmonicsRotationMatrix.html</filename>
    <templarg>V</templarg>
    <member kind="typedef">
      <type>V</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>aefe8d128035aa12c55694e6e829d16f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonicsRotationMatrix</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>a24e4238fbbd821a3221bf26e93ae8fb4</anchor>
      <arglist>(const Imath::Vec3&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerAngles</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>a4d2d566ffc0958d2186d10cb25dcf99b</anchor>
      <arglist>(const Imath::Vec3&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxisAngle</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>ae086c62c467eeb565a3ae7f88050b6b6</anchor>
      <arglist>(const Imath::Vec3&lt; S &gt; &amp;ax, S ang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>a5fa2391216f996818847121ee2dc1a21</anchor>
      <arglist>(const Imath::Quat&lt; S &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>af7ff8d73f76dbec3fd011ef453d2b5a3</anchor>
      <arglist>(const Imath::Matrix44&lt; S &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const Imath::Matrix44&lt; V &gt;</type>
      <name>rotation</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>ae2dbbbd70fb39788a198eeda69ac651f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsRotationMatrix.html</anchorfile>
      <anchor>ae8e45160537c7ea5d663c0deede8a7cf</anchor>
      <arglist>(SphericalHarmonics&lt; U &gt; &amp;sh) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalHarmonicsTensor</name>
    <filename>classIECore_1_1SphericalHarmonicsTensor.html</filename>
    <member kind="typedef">
      <type>boost::function&lt; void(unsigned int, unsigned int, unsigned int, double) &gt;</type>
      <name>tensorFunc</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTensor.html</anchorfile>
      <anchor>a60a1a8f4bf7429a0de0d32fcd36b7f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTensor.html</anchorfile>
      <anchor>aa8ad7dd49bacede97b4c2753b04900f9</anchor>
      <arglist>(size_t bands, tensorFunc functor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SphericalHarmonicsTensor &amp;</type>
      <name>tensor</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTensor.html</anchorfile>
      <anchor>a370b062c61ea2fa8a44e9d3aea4bcb1e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalHarmonicsTransferMatrix</name>
    <filename>classIECore_1_1SphericalHarmonicsTransferMatrix.html</filename>
    <templarg>S</templarg>
    <member kind="function">
      <type></type>
      <name>SphericalHarmonicsTransferMatrix</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTransferMatrix.html</anchorfile>
      <anchor>aa0daaa3867c49ed468fa5a039200f078</anchor>
      <arglist>(const SphericalHarmonics&lt; S &gt; &amp;sh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTransferMatrix.html</anchorfile>
      <anchor>a13b00d893888fe2338c264b321cb6b69</anchor>
      <arglist>(SphericalHarmonics&lt; T &gt; &amp;sh) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_columns</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTransferMatrix.html</anchorfile>
      <anchor>a1fa858038d48e442468e95e044e4ef02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; S &gt;</type>
      <name>m_matrix</name>
      <anchorfile>classIECore_1_1SphericalHarmonicsTransferMatrix.html</anchorfile>
      <anchor>ab2ffa00b51aca7c12dd2be13420b27a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SphericalToEuclideanTransform</name>
    <filename>classIECore_1_1SphericalToEuclideanTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::SpaceTransform</base>
    <member kind="typedef">
      <type>EuclideanToSphericalTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1SphericalToEuclideanTransform.html</anchorfile>
      <anchor>a0f0619535b5dd674a1e3f51bdf912f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1SphericalToEuclideanTransform.html</anchorfile>
      <anchor>a46d90dff32b9fccdd701715b013a31b0</anchor>
      <arglist>((boost::mpl::or_&lt; TypeTraits::IsVec3&lt; F &gt;, TypeTraits::IsVec2&lt; F &gt; &gt;::value==true))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classIECore_1_1SphericalToEuclideanTransform.html</anchorfile>
      <anchor>a98c2f80f721a3eb4456a6408816ca5d3</anchor>
      <arglist>((TypeTraits::IsVec3&lt; T &gt;::value))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1SphericalToEuclideanTransform.html</anchorfile>
      <anchor>a01cc8d5cba9b5adccb5f5a62732a5103</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1SphericalToEuclideanTransform.html</anchorfile>
      <anchor>a444ebf10f13a103c026fa210d38c9bdb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Spline</name>
    <filename>classIECore_1_1Spline.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>XType</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a0ed09247682a5aeb14a2d8e936942e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>YType</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a8ed6fb97264d859b8fa71f9abdb2a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::numeric::interval&lt; XType &gt;</type>
      <name>XInterval</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>abde035c91e11dad00b7d33c6eaf4ca0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBasis&lt; XType &gt;</type>
      <name>Basis</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>ac52a9e63073c6d2c6d6c35dc32b8d6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; X, Y &gt;</type>
      <name>PointContainer</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a16da05ff33957a5f0712c065cc56b2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointContainer::value_type</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a4b5dde311f7b8f477435f4f9c1437c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a85a1493bcc5c8c67ffb95c1dc150c19b</anchor>
      <arglist>(const Basis &amp;basis=Basis::catmullRom())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>aa526dce420ba44215dc3e48bb9f63a01</anchor>
      <arglist>(const Basis &amp;basis, const PointContainer &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>XInterval</type>
      <name>interval</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>ac0dd49bd9e9d02a8bd3a9f81a3941137</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>solve</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>af23f437cf2f5e75ab1658d91102cdfb1</anchor>
      <arglist>(X x, typename PointContainer::const_iterator &amp;segment) const </arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>solve</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a152b9424fc54b4a16ec95337b80ad796</anchor>
      <arglist>(X x, Y segment[4]) const </arglist>
    </member>
    <member kind="function">
      <type>Y</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a1d9221d317622569b7da3760cdb9e98b</anchor>
      <arglist>(X x) const </arglist>
    </member>
    <member kind="function">
      <type>Y</type>
      <name>derivative</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>adbe7190cdc538458b634c166c455f579</anchor>
      <arglist>(X x) const </arglist>
    </member>
    <member kind="function">
      <type>Y</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a7a84509d3fedeee269f8fd6d4b6648f8</anchor>
      <arglist>(X x0, X x1) const </arglist>
    </member>
    <member kind="function">
      <type>Y</type>
      <name>integral</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a8b431a1026f62740ec7e52072534b150</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a88ce8523468e5c2d1a26d5e0d627d1c6</anchor>
      <arglist>(const Spline &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a9de5f59b2a7af205dbc0e2006531116e</anchor>
      <arglist>(const Spline &amp;rhs) const </arglist>
    </member>
    <member kind="variable">
      <type>Basis</type>
      <name>basis</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a461d0f431442f33d32169eb9e7ecb57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PointContainer</type>
      <name>points</name>
      <anchorfile>classIECore_1_1Spline.html</anchorfile>
      <anchor>a3f129a5abc949004aef82ac309aaff37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SplineToImage</name>
    <filename>classIECore_1_1SplineToImage.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>a23a242dd10432efd7b70fd33f7894671</anchor>
      <arglist>(SplineToImage, Op)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>splineParameter</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>ac5fab68c767ec55ded9abb05646bfa3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>splineParameter</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>a6ed4dfe2cf203cf07d2bf0bc332f1611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>a247c289ee93ec06d6c1207570a44366b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>a54433d9a30e74269bcf1e975d6d01cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1SplineToImage.html</anchorfile>
      <anchor>abdc26fd5ef78f7df74fb3f9957bc17a0</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::SRGBToLinearDataConversion</name>
    <filename>structIECore_1_1SRGBToLinearDataConversion.html</filename>
    <templarg>F</templarg>
    <templarg>T</templarg>
    <base>IECore::DataConversion</base>
    <member kind="typedef">
      <type>LinearToSRGBDataConversion&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>structIECore_1_1SRGBToLinearDataConversion.html</anchorfile>
      <anchor>a3e185aa2e8e7607bd0df91a719ecb319</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1SRGBToLinearDataConversion.html</anchorfile>
      <anchor>a19e58b5c52725f30068be392e0f4f766</anchor>
      <arglist>(boost::is_floating_point&lt; F &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECore_1_1SRGBToLinearDataConversion.html</anchorfile>
      <anchor>aa7b07d1a789b41f42753e97b7502973c</anchor>
      <arglist>(boost::is_floating_point&lt; T &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1SRGBToLinearDataConversion.html</anchorfile>
      <anchor>a69c7a0864bb90ba1a8141f779bde83e0</anchor>
      <arglist>(F f) const </arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>structIECore_1_1SRGBToLinearDataConversion.html</anchorfile>
      <anchor>ad4fddf7caf63022caa465aa9ff3c3e2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SRGBToLinearOp</name>
    <filename>classIECore_1_1SRGBToLinearOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SRGBToLinearOp.html</anchorfile>
      <anchor>a7bad2ad1f9b75851d2c4997ec0c4dd39</anchor>
      <arglist>(SRGBToLinearOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1SRGBToLinearOp.html</anchorfile>
      <anchor>a3b45d9d832f933664e4630c618b67b48</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::StateRenderable</name>
    <filename>classIECore_1_1StateRenderable.html</filename>
    <base>IECore::Renderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1StateRenderable.html</anchorfile>
      <anchor>ae54c7f5dd6a45a757716ecb0e5dacffe</anchor>
      <arglist>(StateRenderable, Renderable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SummedAreaOp</name>
    <filename>classIECore_1_1SummedAreaOp.html</filename>
    <base>IECore::ChannelOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1SummedAreaOp.html</anchorfile>
      <anchor>a63701eb43ff8924119bb4723fc4a4742</anchor>
      <arglist>(SummedAreaOp, ChannelOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyChannels</name>
      <anchorfile>classIECore_1_1SummedAreaOp.html</anchorfile>
      <anchor>a61bc15531262c296160c8402e3239779</anchor>
      <arglist>(const Imath::Box2i &amp;displayWindow, const Imath::Box2i &amp;dataWindow, ChannelVector &amp;channels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TGAImageReader</name>
    <filename>classIECore_1_1TGAImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>aa8827e46cd8c6bcba531f3539bcaf29d</anchor>
      <arglist>(TGAImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TGAImageReader</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>aa56e9ffeabdf0fc94126b1e6836bae08</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>a868c7eba43e1242be269114b64a5c63d</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>a0535b5ece73a6d1cb848e3f52b702d1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>ad462f8d699ed15ec12849df7ac068d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>af9cd49cdbdc87e96a00de66c42e9bbfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>a3e26eff57426f2d242d0c359193e215d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1TGAImageReader.html</anchorfile>
      <anchor>a3ae81481e3987fc918f305c9b72aceae</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TGAImageWriter</name>
    <filename>classIECore_1_1TGAImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>TGAImageWriter</name>
      <anchorfile>classIECore_1_1TGAImageWriter.html</anchorfile>
      <anchor>a2a38203334a271a7330e4a44b8f6dbd8</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1TGAImageWriter.html</anchorfile>
      <anchor>a8da6e50a9cf1b91c2c0a9721044da803</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TIFFImageReader</name>
    <filename>classIECore_1_1TIFFImageReader.html</filename>
    <base>IECore::ImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a4918c59df5f3e870485ef1c62f4e3c5f</anchor>
      <arglist>(TIFFImageReader, ImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TIFFImageReader</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>af0e0d2693851f40de30171f9c38a5edc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numDirectories</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a6b08e945d28e78bbb9926b7ab00f1f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectory</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>ac89e95319c98be732f3eefe31904bad2</anchor>
      <arglist>(unsigned int directoryIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>ac21cf31ff6d14a425419f3881829f113</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a3cfb237ec1a9c6b328e117480c3ed210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a97d22baa682d9886f37dcf72cd72a5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a710ba413646706d1d808c21e92bf0044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>sourceColorSpace</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a98e9ddb676d47b1ee4e526600d4cf83f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECore_1_1TIFFImageReader.html</anchorfile>
      <anchor>a7c8767cb7603f132637ff1e0d21ed924</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TIFFImageWriter</name>
    <filename>classIECore_1_1TIFFImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>TIFFImageWriter</name>
      <anchorfile>classIECore_1_1TIFFImageWriter.html</anchorfile>
      <anchor>a29bc5853fcbace389fa75a7c6bd8a4be</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1TIFFImageWriter.html</anchorfile>
      <anchor>a9fca50db4739149d14f491deb608e5ee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TimePeriod</name>
    <filename>classIECore_1_1TimePeriod.html</filename>
    <member kind="function">
      <type></type>
      <name>TimePeriod</name>
      <anchorfile>classIECore_1_1TimePeriod.html</anchorfile>
      <anchor>ab1b7ca98182d422436c8bddff4baa8a9</anchor>
      <arglist>(const boost::posix_time::time_period &amp;tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimePeriod</name>
      <anchorfile>classIECore_1_1TimePeriod.html</anchorfile>
      <anchor>ae18fd811e08ee381d1c9926f4bf3d32f</anchor>
      <arglist>(const boost::posix_time::ptime &amp;p, const boost::posix_time::time_duration &amp;td)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimePeriod</name>
      <anchorfile>classIECore_1_1TimePeriod.html</anchorfile>
      <anchor>a0e90f4c8242837bf29b723944ae270ea</anchor>
      <arglist>(const boost::posix_time::ptime &amp;p1, const boost::posix_time::ptime &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Timer</name>
    <filename>classIECore_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>ab8ebd969f64f8bba51c5ca059cb60446</anchor>
      <arglist>(bool start=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>a88686fb7f69ba709d36c014fef43a930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>a18a2574eab37f4aa5c212b7ff67c2f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>abc94955c88a2bf57e703541637fc2154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentElapsed</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>a988afe316c662fa247118b3c499f7e35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalElapsed</name>
      <anchorfile>classIECore_1_1Timer.html</anchorfile>
      <anchor>ae9a9883eef8c6c863f5f94f5f8648953</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ToCoreConverter</name>
    <filename>classIECore_1_1ToCoreConverter.html</filename>
    <base>IECore::Converter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ToCoreConverter.html</anchorfile>
      <anchor>a3447fb20ab0f5fb31d25215aedb8b0a0</anchor>
      <arglist>(ToCoreConverter, Converter)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ObjectPtr</type>
      <name>convert</name>
      <anchorfile>classIECore_1_1ToCoreConverter.html</anchorfile>
      <anchor>a79cfbcd50bc64eaaeb97d08b5de23899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToCoreConverter</name>
      <anchorfile>classIECore_1_1ToCoreConverter.html</anchorfile>
      <anchor>ab89f23c997ae9f0eee6e4987a2009c20</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECore_1_1ToCoreConverter.html</anchorfile>
      <anchor>a6ebdfa248a56dc19fecbb2e1e9c7b685</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Transform</name>
    <filename>classIECore_1_1Transform.html</filename>
    <base>IECore::StateRenderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1Transform.html</anchorfile>
      <anchor>ade59653627c7ee34fc933dd461f2e1ac</anchor>
      <arglist>(Transform, StateRenderable)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::M44f</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1Transform.html</anchorfile>
      <anchor>afa57f0339309555aba915b144ebbbce1</anchor>
      <arglist>(float time=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TransformationMatrix</name>
    <filename>classIECore_1_1TransformationMatrix.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TransformationMatrix</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>ad3d635c9f6474d3bcc35316a38c6544c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationMatrix</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a765b49fa6930b7c6650b8d97b6afa29b</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;s, const Imath::Euler&lt; T &gt; &amp;r, const Imath::Vec3&lt; T &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationMatrix</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a5cb835327f3d1248ced9b2c7fc7eb13f</anchor>
      <arglist>(const TransformationMatrix &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>Imath::Matrix44&lt; T &gt;</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a6cb933240481b0227723a97d61d348b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>acb0ac1f908f3ea9278e5df6300b5136a</anchor>
      <arglist>(const TransformationMatrix &amp;t) const </arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>scalePivot</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a82ba62a0288ba65c7ad9401e14341264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>scale</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a61379196b4c3be59e3486060e8984e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>shear</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a75fad7cb1213145863c0873e9ee928fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>scalePivotTranslation</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>abbc3982c5027973589c2de07b20744dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>rotatePivot</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a500ef7aab76903356985a90ed4d16a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Quat&lt; T &gt;</type>
      <name>rotationOrientation</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a000d918d9c014a4afc8360b2de29acb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Euler&lt; T &gt;</type>
      <name>rotate</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>aabba5166c2c15091c4a4032593209a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>rotatePivotTranslation</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>a8a5ee10c61affae952c6c8ba8297d012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Imath::Vec3&lt; T &gt;</type>
      <name>translate</name>
      <anchorfile>classIECore_1_1TransformationMatrix.html</anchorfile>
      <anchor>ae0f2228e4f2f6fe61b55b2f9e9836b20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TransformBlock</name>
    <filename>classIECore_1_1TransformBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>TransformBlock</name>
      <anchorfile>classIECore_1_1TransformBlock.html</anchorfile>
      <anchor>a741615b69bd47eda03f71d7812678718</anchor>
      <arglist>(RendererPtr renderer, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransformBlock</name>
      <anchorfile>classIECore_1_1TransformBlock.html</anchorfile>
      <anchor>afb4e320a463a6596508ad759d35b7795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1TransformBlock.html</anchorfile>
      <anchor>a919699f89a3b29e840c736659b79fb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECore_1_1TransformBlock.html</anchorfile>
      <anchor>a112fa1828119a24ed7125b852b08f022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECore_1_1TransformBlock.html</anchorfile>
      <anchor>aea1624f2961eae08f10b01e65ef259bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TransformOp</name>
    <filename>classIECore_1_1TransformOp.html</filename>
    <base>IECore::PrimitiveOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>aa0fe026f5b3dc65f865487a3d314e6c2</anchor>
      <arglist>(TransformOp, PrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>matrixParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>a5952c34c8de5d23404fdd98139217569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>matrixParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>a85c07aae7729ae683b179c15dfa1b7f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>pointPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>a2708c095534f3e4044b06d37335bfab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>pointPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>aa800580008f672a3b6b991765bcae23f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>vectorPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>af51f974a44759b1964a4363908f8bec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>vectorPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>ae08edc6d4567455c6305e327e7513307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringVectorParameter *</type>
      <name>normalPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>a83fde329019ecfaaee7425463ba0ecfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StringVectorParameter *</type>
      <name>normalPrimVarsParameter</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>aa316499ade2f55b24418b0a927828b5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyPrimitive</name>
      <anchorfile>classIECore_1_1TransformOp.html</anchorfile>
      <anchor>a07610c022ad96dae9735b68bf9116033</anchor>
      <arglist>(Primitive *primitive, const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TriangulateOp</name>
    <filename>classIECore_1_1TriangulateOp.html</filename>
    <base>TypedPrimitiveOp&lt; MeshPrimitive &gt;</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>abf396cd90ed4c57caa8c70622740905f</anchor>
      <arglist>(TriangulateOp, MeshPrimitiveOp)</arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>throwExceptionsParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>a25cba6b925bae4411407d97f18fb481d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>throwExceptionsParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>a957f5abc3b52f2d4633cbebfbff4740d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatParameter *</type>
      <name>toleranceParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>aa3b65e6a632bb656946c4daf8782036a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FloatParameter *</type>
      <name>toleranceParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>a7080ad0b8af4c8d55442ef664db6f4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>aff9523ce1b40550f8fbb586fc93d2f02</anchor>
      <arglist>(MeshPrimitive *mesh, const CompoundObject *operands)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolParameterPtr</type>
      <name>m_throwExceptionsParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>a133729f8117b73dc36aa500718eaa707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatParameterPtr</type>
      <name>m_toleranceParameter</name>
      <anchorfile>classIECore_1_1TriangulateOp.html</anchorfile>
      <anchor>ad089633d81ed908f94383a3f9b09a6f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Triangulator</name>
    <filename>classIECore_1_1Triangulator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>PointIterator</type>
      <name>Iterator</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>aa54f4ef6d4daade7bfa044b6b9b81d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; PointIterator &gt;::value_type</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>a69550af59898291d5048a7ab746c0595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; Point &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>a1f148655311d94bb4f99f5f728a54733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshBuilder</type>
      <name>MeshBuilderType</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>a689d61f94c16689e86891f832d720f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; PointIterator, PointIterator &gt;</type>
      <name>Loop</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>ad734afde23fbb0ed281f07194df4a6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>aa035c73b0fd5e71b5ff7a0babf33f57a</anchor>
      <arglist>(Triangulator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangulator</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>a9e38c563d87a7c4c24736e75cf429c21</anchor>
      <arglist>(typename MeshBuilder::Ptr builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triangulate</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>a243ffb186f7fd91450986fd18370d187</anchor>
      <arglist>(PointIterator first, PointIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triangulate</name>
      <anchorfile>classIECore_1_1Triangulator.html</anchorfile>
      <anchor>ab7f329d7064cf39233139559dd0c0b8d</anchor>
      <arglist>(LoopIterator first, LoopIterator last)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Turbulence</name>
    <filename>classIECore_1_1Turbulence.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>N</type>
      <name>Noise</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>af31092dcb496756ea9fb0383da0a9aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N::Point</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>aa7df9611bffb8b2a2ffbdef031c6ffcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; Point &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a31afea5a758eec550bd15bf5b8a7bd04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N::Value</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a218dfc9d6bf4efdf8ce4dfdc56d965ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; Value &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a83ec688d01f98afdadddea9c22e3995b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Turbulence</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a5f2d0f1fa684e79751849b9fb6915fb5</anchor>
      <arglist>(const unsigned int octaves=4, const Value &amp;gain=Value(0.5), PointBaseType lacunarity=2.0, bool turbulent=true, const N &amp;noise=N())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Turbulence</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>aae77ea8a83352af739422ea0045da762</anchor>
      <arglist>(const Turbulence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>turbulence</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a3a6d15497986f8c3e4eb3353e95c454d</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>turbulence</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a930342abba964efa5e1b60f9cfccb727</anchor>
      <arglist>(const Point &amp;p, PointBaseType filterWidth) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOctaves</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a3c10b9ef402b9bd69435d204321b2688</anchor>
      <arglist>(unsigned int octaves)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getOctaves</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>aa2122da29acc466855dd010de52b7fc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGain</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a0aae67b83cfe326133faddb1d74d9c92</anchor>
      <arglist>(const Value &amp;gain)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>getGain</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>ae69de96eba9682d79d7511bada36032a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLacunarity</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>afebb776b4c3b1d8cbf3ed7a08e4de33c</anchor>
      <arglist>(PointBaseType lacunarity)</arglist>
    </member>
    <member kind="function">
      <type>PointBaseType</type>
      <name>getLacunarity</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a9b276d12d442735238610ce844faa70c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTurbulent</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a10d29311bb9c4d9e82cead756016e494</anchor>
      <arglist>(bool turbulent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTurbulent</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a7d0276b3eacddfd20ce4f688a483c17b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoise</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>aea0e3e856672f42c0dee165e6755be4d</anchor>
      <arglist>(const Noise &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>const Noise &amp;</type>
      <name>getNoise</name>
      <anchorfile>classIECore_1_1Turbulence.html</anchorfile>
      <anchor>a872a3fe7eb2c2512230fe132ede83149</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TypedData</name>
    <filename>classIECore_1_1TypedData.html</filename>
    <templarg>T</templarg>
    <base>IECore::Data</base>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a4491deeface1a84918b3e4b68eba84dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedDataTraits&lt; TypedData&lt; T &gt; &gt;::BaseType</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a9a10918529e7656aa003b12d05adcd19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedData</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a6d432b226681dae19562f896ad8f4e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedData</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a82041509fa7ce93f10f310377127e0ff</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a32851e698c1de1f20bb3a6486149daa0</anchor>
      <arglist>(TypedData&lt; T &gt;, Data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>ad48ce5d95155e2b51aa0ce0a3293d693</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a200399247e9553e4ed84074024f8545b</anchor>
      <arglist>(const TypedData&lt; T &gt; &amp;typedData)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>readable</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a7a431663150621efc8d30d22c289e8aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>writable</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a46e553cc78e51f5878e9a53976f3003c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseType *</type>
      <name>baseReadable</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a2734524913532951ed507e8364c1517e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>baseWritable</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>aec17a269d0c476d610c439bd78d3c6c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>baseSize</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a88f640294f2875b40c717c242e47fa7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TypedData&lt; T &gt;::Ptr</type>
      <name>copy</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>ab64ae1065db0a48ee2d37de82364d025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a16dc90276ab6615b412b9a80a56a0b13</anchor>
      <arglist>(const Object *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hash</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>ae276b3b8ed9baf704c42e4b38297223b</anchor>
      <arglist>(MurmurHash &amp;h) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasBase</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a372edf6962ecb7450d0dc23180fb3ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFrom</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a606bde803718973e9c986536f4e4d10a</anchor>
      <arglist>(const Object *other, CopyContext *context)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>save</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a416d51eaeae85bb3e85cdc130cb053e4</anchor>
      <arglist>(SaveContext *context) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>ad3aebc083803940b2bb27f72740946a5</anchor>
      <arglist>(LoadContextPtr context)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>memoryUsage</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>a55d8a3ff4379130073e247dd43c1f47b</anchor>
      <arglist>(Object::MemoryAccumulator &amp;accumulator) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>abd361d9dad00f02c68d9602f3b78af6d</anchor>
      <arglist>(DataHolder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataHolderPtr</type>
      <name>m_data</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>ac7eb81808dcd05a40ec72fde482558ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Object::TypeDescription&lt; TypedData&lt; T &gt; &gt;</type>
      <name>m_typeDescription</name>
      <anchorfile>classIECore_1_1TypedData.html</anchorfile>
      <anchor>aa1a3820fc9e1addc9961b122f61327cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TypedDataTraits</name>
    <filename>classIECore_1_1TypedDataTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>BaseType</name>
      <anchorfile>classIECore_1_1TypedDataTraits.html</anchorfile>
      <anchor>ad20149d555ec72e59a58865eae2583a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::false_type</type>
      <name>HasBase</name>
      <anchorfile>classIECore_1_1TypedDataTraits.html</anchorfile>
      <anchor>af274574159f8d57421eb5ceb374c5156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TypedObjectParameter</name>
    <filename>classIECore_1_1TypedObjectParameter.html</filename>
    <templarg></templarg>
    <base>IECore::ObjectParameter</base>
    <member kind="typedef">
      <type>T</type>
      <name>ObjectType</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a354a24ea578b138e4ed216e5140a38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Ptr</type>
      <name>ObjectTypePtr</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>afe5305c722de864407565ee34d625fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstPtr</type>
      <name>ConstObjectTypePtr</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a93863ca8603fbd4004d1cb5d6ddcac59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, ObjectTypePtr &gt;</type>
      <name>ObjectPreset</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a4343774fc67eb72daded1e46589bdbf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ObjectPreset &gt;</type>
      <name>ObjectPresetsContainer</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a3fccb28d2990006bda87b673d615225e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedObjectParameter</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>ab61b9c82295d447893c3622589da626a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, typename T::Ptr defaultValue, const ObjectPresetsContainer &amp;presets=ObjectPresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>ae5a70360ddf05fd640054ac321dcb315</anchor>
      <arglist>(TypedObjectParameter&lt; T &gt;, ObjectParameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a9cb5ec78a68b22b8935c86efe39f7ae7</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static PresetsContainer</type>
      <name>makePresets</name>
      <anchorfile>classIECore_1_1TypedObjectParameter.html</anchorfile>
      <anchor>a08343d87115d4940dd50624bec073f60</anchor>
      <arglist>(const ObjectPresetsContainer &amp;presets)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TypedParameter</name>
    <filename>classIECore_1_1TypedParameter.html</filename>
    <templarg></templarg>
    <base>IECore::Parameter</base>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>aa605e319825f71feaa52c183e7dcc657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; T &gt;</type>
      <name>ObjectType</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a128c225720ec21a9953254d0d47c3da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, T &gt;</type>
      <name>Preset</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>ab139eac2a7cee519b143c89413b48d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, ObjectTypePtr &gt;</type>
      <name>ObjectPreset</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a1ef4eeba0842fcf37e54465c27dd7791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Preset &gt;</type>
      <name>PresetsContainer</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a6f36fc90a1dddace2be5339cab3b2631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ObjectPreset &gt;</type>
      <name>ObjectPresetsContainer</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a993797142f709e646831173142e27fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>ab67dc8b8408095ea389823438c0e9d55</anchor>
      <arglist>(ObjectType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedParameter</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a8fa766c14d00839893ff83782c5d0dc1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const T &amp;defaultValue=T(), const PresetsContainer &amp;presets=PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedParameter</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a69cebeed602cc8bdc36e06d03cc77b3d</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, ObjectTypePtr defaultValue, const ObjectPresetsContainer &amp;presets=ObjectPresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>aa93538608c0528aba16bf415e05d2383</anchor>
      <arglist>(TypedParameter&lt; T &gt;, Parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>aca6819c9b4cef8940f046943076d1f41</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>typedDefaultValue</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>ac6f8453bdc5503940e7a4ed8277e2b4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType &amp;</type>
      <name>getTypedValue</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a5472175285dcca443e51d17717e4616a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>getTypedValue</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a2e015a6e7e25a93e5758b0bf6432e053</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypedValue</name>
      <anchorfile>classIECore_1_1TypedParameter.html</anchorfile>
      <anchor>a7d7949a4c31c3d47e692c74da5bbf1e3</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::TypedPrimitiveOp</name>
    <filename>classIECore_1_1TypedPrimitiveOp.html</filename>
    <templarg>T</templarg>
    <base>IECore::ModifyOp</base>
    <member kind="typedef">
      <type>T</type>
      <name>PrimitiveType</name>
      <anchorfile>classIECore_1_1TypedPrimitiveOp.html</anchorfile>
      <anchor>a56b9cd95108db0a88dcc1148b6a36451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedPrimitiveOp</name>
      <anchorfile>classIECore_1_1TypedPrimitiveOp.html</anchorfile>
      <anchor>aed817eeca39e7e4727e7bcb70cf849cb</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECore_1_1TypedPrimitiveOp.html</anchorfile>
      <anchor>a9762240497868d75a08b288361392269</anchor>
      <arglist>(TypedPrimitiveOp&lt; T &gt;, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1TypedPrimitiveOp.html</anchorfile>
      <anchor>ad7d65b99ff1cdf125b27c6033bc8b407</anchor>
      <arglist>(T *typedPrimitive, const CompoundObject *operands)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeInfoCmp</name>
    <filename>structIECore_1_1TypeInfoCmp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1TypeInfoCmp.html</anchorfile>
      <anchor>a8ddf0894225efe5665fbab7464b02612</anchor>
      <arglist>(const std::type_info *t1, const std::type_info *t2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::UniformRandomPointDistributionOp</name>
    <filename>classIECore_1_1UniformRandomPointDistributionOp.html</filename>
    <base>IECore::Op</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a062572909fb0e940020b8da5629c1ee5</anchor>
      <arglist>(UniformRandomPointDistributionOp, Op)</arglist>
    </member>
    <member kind="function">
      <type>MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>ab495f52fd4a916c81775dfff85542c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MeshPrimitiveParameter *</type>
      <name>meshParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>aa42421efe63f6943e2de0eddef1cf165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>numPointsParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a25e0236358490f0576f03ee9bd661eaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>numPointsParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a84bd34bf91ffacf5a271265eff22a371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>seedParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a8e70bb25afde7d78dbd7596ad7204ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>seedParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a8c2ee117c835e05823a63bff8d9498b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoolParameter *</type>
      <name>addSTParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>aba242a59404082bfb95ce1bca1f5e71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoolParameter *</type>
      <name>addSTParameter</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>ad7d8fdeb703b5d4088dfd9c9cf3af2ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constructCommon</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>add81bb9ad7b548643ffb4f08f050adcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UniformRandomPointDistributionOp</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>ac404386ae0f3d509406e5989cbbd6ae1</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual float</type>
      <name>density</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a02ab5505322b64fca96678cf07068a9c</anchor>
      <arglist>(const MeshPrimitive *mesh, const Imath::V3f &amp;point, const Imath::V2f &amp;uv) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1UniformRandomPointDistributionOp.html</anchorfile>
      <anchor>a59cf2bd3df6f827815e7173d84546092</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::UVDistortOp</name>
    <filename>classIECore_1_1UVDistortOp.html</filename>
    <base>IECore::WarpOp</base>
    <member kind="function">
      <type>ObjectParameter *</type>
      <name>uvMapParameter</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>adcc04c1e1f747d4b134a38131ae10e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectParameter *</type>
      <name>uvMapParameter</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>a659d42035febc891e94d00733f33e0cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>ab5524cab88640176688109e615b81d12</anchor>
      <arglist>(UVDistortOp, WarpOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>ab4b2811498ba4ccceefcb21ac6aa31a5</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>warpedDataWindow</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>adcf2c45fc9dbfb70a436febcd6e628b1</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Imath::V2f</type>
      <name>warp</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>affb0d84cb65629fe6d99a7ea6c641155</anchor>
      <arglist>(const Imath::V2f &amp;p) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classIECore_1_1UVDistortOp.html</anchorfile>
      <anchor>a599bf95bf7c8c9d94cb52a2c92df8d8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ValidatedStringParameter</name>
    <filename>classIECore_1_1ValidatedStringParameter.html</filename>
    <base>IECore::TypedParameter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>a58ff420f716d1a41fa583c011dd36a2b</anchor>
      <arglist>(ValidatedStringParameter, StringParameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValidatedStringParameter</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>a05a5aaa8f5dc5f90b55a0336c2109ef2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;description, const std::string &amp;regex, const std::string &amp;regexDescription=&quot;&quot;, const std::string &amp;defaultValue=&quot;&quot;, bool allowEmptyString=true, const StringParameter::PresetsContainer &amp;presets=StringParameter::PresetsContainer(), bool presetsOnly=false, ConstCompoundObjectPtr userData=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>regex</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>a8dd3455a1582792b9f9df5e3bd11732f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>regexDescription</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>abe6b42ca79308f5a3e90671905c63777</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowEmptyString</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>a52023264bcfa253efa5e362452682898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1ValidatedStringParameter.html</anchorfile>
      <anchor>a6ea40a3304d66367474431c9e711e900</anchor>
      <arglist>(const Object *value, std::string *reason=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::VectorDataFilterOp</name>
    <filename>classIECore_1_1VectorDataFilterOp.html</filename>
    <base>IECore::ModifyOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1VectorDataFilterOp.html</anchorfile>
      <anchor>a02b231e728de890bcd4f4a97a29183c7</anchor>
      <arglist>(VectorDataFilterOp, ModifyOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modify</name>
      <anchorfile>classIECore_1_1VectorDataFilterOp.html</anchorfile>
      <anchor>a911a9830aec227c7f5c3f64b3ac4004c</anchor>
      <arglist>(Object *object, const CompoundObject *operands)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectParameterPtr</type>
      <name>m_filterParameter</name>
      <anchorfile>classIECore_1_1VectorDataFilterOp.html</anchorfile>
      <anchor>a3f16e3d0518b026a67c9cc4169cd9a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolParameterPtr</type>
      <name>m_invertFilterParameter</name>
      <anchorfile>classIECore_1_1VectorDataFilterOp.html</anchorfile>
      <anchor>adebb12e56ef0fcd03eb7ab0b1d0a52cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoolParameterPtr</type>
      <name>m_clipParameter</name>
      <anchorfile>classIECore_1_1VectorDataFilterOp.html</anchorfile>
      <anchor>aed45bb56fd578e9ac4ffd8ba1164b410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::VecConvert</name>
    <filename>structIECore_1_1VecConvert.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>S</type>
      <name>operator()</name>
      <anchorfile>structIECore_1_1VecConvert.html</anchorfile>
      <anchor>a9d3bc76927c6777ccc1b9e2367900d10</anchor>
      <arglist>(const T &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::VectorTraits</name>
    <filename>structIECore_1_1VectorTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::BaseType</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1VectorTraits.html</anchorfile>
      <anchor>aa19fc994288bde181d42a256bd86b9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1VectorTraits.html</anchorfile>
      <anchor>a562dfa9e3b4906a7762bf09ede1e11f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType</type>
      <name>get</name>
      <anchorfile>structIECore_1_1VectorTraits.html</anchorfile>
      <anchor>aa9043c15e6b78a2c98f5df10c6c5f808</anchor>
      <arglist>(const T &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1VectorTraits.html</anchorfile>
      <anchor>a3c49e2320951aa5d3ab8d2897e94b1d2</anchor>
      <arglist>(T &amp;v, unsigned int i, BaseType x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::VectorTraits&lt; int &gt;</name>
    <filename>structIECore_1_1VectorTraits_3_01int_01_4.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01int_01_4.html</anchorfile>
      <anchor>a366e3d41c04a677b354df5ad37524d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01int_01_4.html</anchorfile>
      <anchor>a29c3fc5b6a77f19f13b86717119eb1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01int_01_4.html</anchorfile>
      <anchor>ad1b9a5d5d31fc39fb52efe7a3c339cde</anchor>
      <arglist>(const int &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01int_01_4.html</anchorfile>
      <anchor>a009ed1ad6b93bf9bac5ce4a178c80627</anchor>
      <arglist>(int &amp;v, unsigned int i, int x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::VectorTraits&lt; float &gt;</name>
    <filename>structIECore_1_1VectorTraits_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01float_01_4.html</anchorfile>
      <anchor>a91a5e9bba546c01581d03e33c53de71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01float_01_4.html</anchorfile>
      <anchor>a8f3fc0ff6150af4a85830e91073ee103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>get</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01float_01_4.html</anchorfile>
      <anchor>a3632eaf4d128d1fbbce4f27bf167e770</anchor>
      <arglist>(const float &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01float_01_4.html</anchorfile>
      <anchor>a1f945706131098583b65b1b6d3147783</anchor>
      <arglist>(float &amp;v, unsigned int i, float x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::VectorTraits&lt; double &gt;</name>
    <filename>structIECore_1_1VectorTraits_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>BaseType</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01double_01_4.html</anchorfile>
      <anchor>a5bd1dcf14130dea5e09fd7ff53939835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>dimensions</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01double_01_4.html</anchorfile>
      <anchor>a673db7b80adb3ca0bd0cacc75df363a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>get</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01double_01_4.html</anchorfile>
      <anchor>a37175389c817a9a04ecf2a6226436749</anchor>
      <arglist>(const double &amp;v, unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>structIECore_1_1VectorTraits_3_01double_01_4.html</anchorfile>
      <anchor>a9db5289403937117607445a8acbb26bf</anchor>
      <arglist>(double &amp;v, unsigned int i, double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LongVectorDataAlias</name>
    <filename>classIECore_1_1LongVectorDataAlias.html</filename>
    <base protection="private">IECore::TypedData</base>
    <member kind="variable" protection="protected" static="yes">
      <type>static TypeDescription&lt; IntVectorData &gt;</type>
      <name>m_typeDescription</name>
      <anchorfile>classIECore_1_1LongVectorDataAlias.html</anchorfile>
      <anchor>a63256351cd49989c882a5eb314d18295</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::VisibleRenderable</name>
    <filename>classIECore_1_1VisibleRenderable.html</filename>
    <base>IECore::Renderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREABSTRACTOBJECT</name>
      <anchorfile>classIECore_1_1VisibleRenderable.html</anchorfile>
      <anchor>a6a56843cea9b50a9f6393b88462903ab</anchor>
      <arglist>(VisibleRenderable, Renderable)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECore_1_1VisibleRenderable.html</anchorfile>
      <anchor>ab609d9071c73eeb4a11a70059a81a9d2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::WarpOp</name>
    <filename>classIECore_1_1WarpOp.html</filename>
    <member kind="function">
      <type></type>
      <name>WarpOp</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>ae7d862162bdc2a1db7ffa0e7abdf1128</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>filterParameter</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a878e3ded81f84008917be0d30314faff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>filterParameter</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a45ab6e898ca2d3a7766a64e6816ff373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPED</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>aab6905bd2f07100d29b79ab858447893</anchor>
      <arglist>(WarpOp, ImagePrimitiveOp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>modifyTypedPrimitive</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a0de4264c007e3e687ef4b7048ec83f53</anchor>
      <arglist>(ImagePrimitive *image, const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a717a054547c6b04ee15151dca6d380b3</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>warpedDataWindow</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>af41943bdd26e8ec7f80323a5b1026c63</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Imath::V2f</type>
      <name>warp</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a23226094f2c30036303c57c25d7eaaea</anchor>
      <arglist>(const Imath::V2f &amp;p) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>ac3e048ccf68a80993d252091c93734ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Warp</name>
      <anchorfile>classIECore_1_1WarpOp.html</anchorfile>
      <anchor>a5a50ddad56aa9db2b3098ea4c721eca2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::WorldBlock</name>
    <filename>classIECore_1_1WorldBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>WorldBlock</name>
      <anchorfile>classIECore_1_1WorldBlock.html</anchorfile>
      <anchor>a52508ff325f2a8686a735a3d25d85534</anchor>
      <arglist>(RendererPtr renderer, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldBlock</name>
      <anchorfile>classIECore_1_1WorldBlock.html</anchorfile>
      <anchor>a7eb4b6ec4715156828d480dbf8bcb140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1WorldBlock.html</anchorfile>
      <anchor>af56e2947b2e84a96c3f05ea0a3cb8cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECore_1_1WorldBlock.html</anchorfile>
      <anchor>aa68292e35b04cfbffadf78125023f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECore_1_1WorldBlock.html</anchorfile>
      <anchor>a96d89bb661072431f08c0c45a4431359</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Writer</name>
    <filename>classIECore_1_1Writer.html</filename>
    <base>IECore::Op</base>
    <class kind="class">IECore::Writer::WriterDescription</class>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>fileName</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>ac74fc4849013f60670ef8c0c424cd215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Object *</type>
      <name>object</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>ae3f1031b68bafc6116c91b3f663a2945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>ab816e5b260d0ff48d7fdf0d48423a0bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WriterPtr</type>
      <name>create</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>ae17180b9220351bb457b7e9011095feb</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a91b0fc6f3e2550363b04ca77e5a459c0</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a850bce270c9c3dd9d6ed416e0db6bdc6</anchor>
      <arglist>(TypeId typeId, std::vector&lt; std::string &gt; &amp;extensions)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>WriterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>ace82cda10e4015993836628e06452524</anchor>
      <arglist>)(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>bool(*</type>
      <name>CanWriteFn</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a32a81c81614f794107b8669c0e626040</anchor>
      <arglist>)(ConstObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Writer</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a242cd14d2144503120f3cad8e68a3c25</anchor>
      <arglist>(const std::string &amp;description, TypeId writableType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Writer</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a5b1c529a762befc15e86d717e210c4b0</anchor>
      <arglist>(const std::string &amp;description, const ObjectParameter::TypeIdSet &amp;writableTypes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a99c3cfdcb316411ae2676a4ca8e34807</anchor>
      <arglist>(const CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doWrite</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>afd69357e6f34c4737d6a63442df02a2c</anchor>
      <arglist>(const CompoundObject *operands)=0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerWriter</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a2b5a7abd37610b76144e4e15adb2b8fd</anchor>
      <arglist>(const std::string &amp;extensions, CanWriteFn canWrite, CreatorFn creator, TypeId typeId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterPtr</type>
      <name>m_objectParameter</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a3b4350294eafdfa5ec330ab33a3988a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileNameParameterPtr</type>
      <name>m_fileNameParameter</name>
      <anchorfile>classIECore_1_1Writer.html</anchorfile>
      <anchor>a525e0d5850ea7d735da9ecd89464de5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Writer::WriterDescription</name>
    <filename>classIECore_1_1Writer_1_1WriterDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>WriterDescription</name>
      <anchorfile>classIECore_1_1Writer_1_1WriterDescription.html</anchorfile>
      <anchor>a35a2f47f7f9e297e1cce7a2004e12ee6</anchor>
      <arglist>(const std::string &amp;extensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::XYYToXYZColorTransform</name>
    <filename>classIECore_1_1XYYToXYZColorTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ColorTransform</base>
    <member kind="typedef">
      <type>XYZToXYYColorTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1XYYToXYZColorTransform.html</anchorfile>
      <anchor>a58c2dc68c770966216788fbcef0a3b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYYToXYZColorTransform</name>
      <anchorfile>classIECore_1_1XYYToXYZColorTransform.html</anchorfile>
      <anchor>a1f6cd47a2c2f73258909bd52f669fb93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYYToXYZColorTransform</name>
      <anchorfile>classIECore_1_1XYYToXYZColorTransform.html</anchorfile>
      <anchor>a5f08baf9bb4423fee927f159d83d5093</anchor>
      <arglist>(const C &amp;referenceWhite)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1XYYToXYZColorTransform.html</anchorfile>
      <anchor>ab97d70b364729e5ccaa02cc8741d173f</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1XYYToXYZColorTransform.html</anchorfile>
      <anchor>aeee3782a64028e76dc72a5f2b0a7f6f8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::XYZToRGBColorTransform</name>
    <filename>classIECore_1_1XYZToRGBColorTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ColorTransform</base>
    <member kind="typedef">
      <type>RGBToXYZColorTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a9a0abae0d6cf1a8ce74a75067b8ae9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZToRGBColorTransform</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a08affafd245596618f321bf42709a6b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZToRGBColorTransform</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>aa57760deb82f3d6b186ca3dbd1c2306f</anchor>
      <arglist>(const M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZToRGBColorTransform</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a3d80948dd40a9b9e232ca06e6e16a291</anchor>
      <arglist>(const C &amp;rChromacity, const C &amp;gChromacity, const C &amp;bChromacity, const C &amp;referenceWhite)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a759df9aeda46560589f50f63774fd4c2</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a09e87292d8b6c5659836964fff5f034b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Imath::M33f &amp;</type>
      <name>matrix</name>
      <anchorfile>classIECore_1_1XYZToRGBColorTransform.html</anchorfile>
      <anchor>a7da36393ae73b07a1430a4969c533b0e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::XYZToXYYColorTransform</name>
    <filename>classIECore_1_1XYZToXYYColorTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ColorTransform</base>
    <member kind="typedef">
      <type>XYYToXYZColorTransform&lt; T, F &gt;</type>
      <name>InverseType</name>
      <anchorfile>classIECore_1_1XYZToXYYColorTransform.html</anchorfile>
      <anchor>a0701ff19cac68392738d2c5f1b723286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZToXYYColorTransform</name>
      <anchorfile>classIECore_1_1XYZToXYYColorTransform.html</anchorfile>
      <anchor>a0f0250c09ad4a594812769c67a247be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZToXYYColorTransform</name>
      <anchorfile>classIECore_1_1XYZToXYYColorTransform.html</anchorfile>
      <anchor>a22410ec486c8bcdffeac34816caea49c</anchor>
      <arglist>(const C &amp;referenceWhite)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>transform</name>
      <anchorfile>classIECore_1_1XYZToXYYColorTransform.html</anchorfile>
      <anchor>a35c0423667189e8f7fe1d89e0bebd31c</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>InverseType</type>
      <name>inverse</name>
      <anchorfile>classIECore_1_1XYZToXYYColorTransform.html</anchorfile>
      <anchor>a5efdf2131b08d2e2924f115500b58ffc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::YUVImageWriter</name>
    <filename>classIECore_1_1YUVImageWriter.html</filename>
    <base>IECore::ImageWriter</base>
    <member kind="enumeration">
      <name>Format</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a43b42b2a485b6732b642151ef97d793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YUV420P</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a43b42b2a485b6732b642151ef97d793aa2fcd44dd93b3dba158c0374b3fc160fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YUV422P</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a43b42b2a485b6732b642151ef97d793aa8cc3032281284d3dd544bbc38aea3e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YUV444P</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a43b42b2a485b6732b642151ef97d793aa0546fcfa236863dbf74b7bc8c15dd2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YUVImageWriter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a3b6c7e52b0787a304b99da321606b677</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>destinationColorSpace</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>ab860b302cf93a93db66d6d93a4211ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntParameter *</type>
      <name>formatParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a547497d6ea35b2bb537f64e5ebb5c52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntParameter *</type>
      <name>formatParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>ac24215fdfce44aa383022c7dd37389ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V2fParameter *</type>
      <name>kBkRParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>ab94ae13aff09f6fd78fb463402a2b762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V2fParameter *</type>
      <name>kBkRParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a8e9557c573f349390abb60437c437cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box3fParameter *</type>
      <name>rangeParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>ae24be020d20141505c20809a38bf27ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box3fParameter *</type>
      <name>rangeParameter</name>
      <anchorfile>classIECore_1_1YUVImageWriter.html</anchorfile>
      <anchor>a72cfc3e545bb7ccc459fe9ec967cdba8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ZhuBridsonImplicitSurfaceFunction</name>
    <filename>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECore::ImplicitSurfaceFunction</base>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7a13d669a81ad7d81c95847df7b99bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;</type>
      <name>PointTraits</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a99c4e8b9171ad51d52738d23ce5d8b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; P &gt;::BaseType</type>
      <name>PointBaseType</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7930634c95556cfde59524b2f17c2771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a627d74bcd3f2a68894b871a80e0bf599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a4d276a586a6817ffe3a7134806ee52de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorTraits&lt; V &gt;::BaseType</type>
      <name>ValueBaseType</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a72f0c07ba8a70e27545b0c005a6e7cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; P &gt;</type>
      <name>PointVector</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7453cca3b8103b0d99549ff7eb651ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedData&lt; PointVector &gt;</type>
      <name>PointVectorData</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>ac70cff643330cbe45920cadc5b73291a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR2</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a5511acdac52675bb18e23eb32e16580d</anchor>
      <arglist>(ZhuBridsonImplicitSurfaceFunction&lt; P, V &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZhuBridsonImplicitSurfaceFunction</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7b6f6675da9f3f528529ddb5cf36425d</anchor>
      <arglist>(typename PointVectorData::ConstPtr p, ConstDoubleVectorDataPtr r, V smoothingRadius)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a84cdb55a38b054f8786a8a658b90e9be</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value</type>
      <name>getValue</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a06ee092bed9be8026945fe753e2d1e91</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PointVector::const_iterator</type>
      <name>PointIterator</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>aeb381a2fcd6220b6f5bff2357417d89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>KDTree&lt; PointIterator &gt;</type>
      <name>Tree</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a46e5c75c53d338c195253f4a9dd98ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Value</type>
      <name>k</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>abf331bf12f3e91cf0fa1028f68463a50</anchor>
      <arglist>(const Value &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PointVectorData::ConstPtr</type>
      <name>m_p</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a07a51a702c02e7a4104b1721b9efdb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstDoubleVectorDataPtr</type>
      <name>m_radius</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a24deb70071c349eaab0bb663fbb41edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_smoothingRadius</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a03cfeec3acb9957fc23bc7e31aace679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Tree *</type>
      <name>m_tree</name>
      <anchorfile>classIECore_1_1ZhuBridsonImplicitSurfaceFunction.html</anchorfile>
      <anchor>a7415272bd6b8cfefd46d5956a19f1701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Formatter</name>
    <filename>classIECore_1_1Formatter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>heading</name>
      <anchorfile>classIECore_1_1Formatter.html</anchorfile>
      <anchor>a54b5379fd9853234053c2c97d13dc85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>paragraph</name>
      <anchorfile>classIECore_1_1Formatter.html</anchorfile>
      <anchor>a678338ef3f4c6bfebbbc106001f82a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>indent</name>
      <anchorfile>classIECore_1_1Formatter.html</anchorfile>
      <anchor>a88294eec499e95af980ce19447f9e217</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unindent</name>
      <anchorfile>classIECore_1_1Formatter.html</anchorfile>
      <anchor>aaef33d12c499f87a16de67ba2eb22cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::WrappedTextFormatter</name>
    <filename>classIECore_1_1WrappedTextFormatter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1WrappedTextFormatter.html</anchorfile>
      <anchor>a38f17d41d895af3e5cc27f29033814b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>heading</name>
      <anchorfile>classIECore_1_1WrappedTextFormatter.html</anchorfile>
      <anchor>a6c18022e59e8a45ba5769b8a3b0ae9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>paragraph</name>
      <anchorfile>classIECore_1_1WrappedTextFormatter.html</anchorfile>
      <anchor>a589a278da97ebc45c08677a109c28bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>indent</name>
      <anchorfile>classIECore_1_1WrappedTextFormatter.html</anchorfile>
      <anchor>a385a039067604fc7e1a257df0c28f141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unindent</name>
      <anchorfile>classIECore_1_1WrappedTextFormatter.html</anchorfile>
      <anchor>ab277f179a6aecfe30b79f635616908c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ClassLoader</name>
    <filename>classIECore_1_1ClassLoader.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>a99dc2001fbb578db580e7594e4d61683</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>classNames</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>ac9dd89fd2fab0c577af70dc4d7a6a839</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>versions</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>a8db27c915c08235f698435ed5792b705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setDefaultVersion</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>aa0cb6ec62a3fa6540586dc7de574e279</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getDefaultVersion</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>a871f7d90ef0a881eed14cf9bb5d2d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>a6071dfec7a8df746812e244b72faf477</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>refresh</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>aeabee47a7bb10b9327a0690db74ca09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>defaultLoader</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>a025a01a59a32d4fce250e51c36434f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>defaultOpLoader</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>aa08d7ac616f7573b3aae4ace71926442</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>defaultProceduralLoader</name>
      <anchorfile>classIECore_1_1ClassLoader.html</anchorfile>
      <anchor>aba07f950180082218104c44a284a0939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::OptionalCompoundParameter</name>
    <filename>classIECore_1_1OptionalCompoundParameter.html</filename>
    <base>IECore::CompoundParameter</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>a6d2b579fadb63c42f4292a32f8fc57b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setObligatoryParameterNames</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>a2098c4dfc78fcf127c3179b8c7de0d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getObligatoryParameterNames</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>aa0a24625c357748c45278fde38eee257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setParameterUndefined</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>aa2d6c051f74ac145dfa4ceb53658a5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getParameterUndefined</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>a9b316327c1b8c9412bc9e72fa953a002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>a3dbbca0b99594c659bbb57c46acea2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__getattr__</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>a3cbc7ddb531de710136b4a10dcaa3b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__setattr__</name>
      <anchorfile>classIECore_1_1OptionalCompoundParameter.html</anchorfile>
      <anchor>af79afeec614eb942cb7a5a1bb47d147c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::FileExaminer</name>
    <filename>classIECore_1_1FileExaminer.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>a527dc7ea72415090d31d840989773453</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setFileName</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>a3fbefee54a18f7cc1a3a14a5786ce2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getFileName</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>a9d776b6a2e4641f87e5a9f711f44eadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dependencies</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>a8dbc722088ed9acb7a01f2db2436b370</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>allDependencies</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>af26cc66591f0f28b71ba47b54ae8dfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>a91e78f86cfdec00c7d21af9895ff602f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>supportedExtensions</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>aa3d05eae625969d5660af86f17f8ef1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerExaminer</name>
      <anchorfile>classIECore_1_1FileExaminer.html</anchorfile>
      <anchor>af74864ed7651a7df3f99507f9d8b69c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::NukeFileExaminer</name>
    <filename>classIECore_1_1NukeFileExaminer.html</filename>
    <base>IECore::FileExaminer</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1NukeFileExaminer.html</anchorfile>
      <anchor>a8e1d4b01fac2c7b7d309e7722f436db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dependencies</name>
      <anchorfile>classIECore_1_1NukeFileExaminer.html</anchorfile>
      <anchor>a3a00ea2bbd701c6b07ed5963d23a9e35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RIBFileExaminer</name>
    <filename>classIECore_1_1RIBFileExaminer.html</filename>
    <base>IECore::FileExaminer</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1RIBFileExaminer.html</anchorfile>
      <anchor>ae21fc308cd6b253375dab1f665facd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dependencies</name>
      <anchorfile>classIECore_1_1RIBFileExaminer.html</anchorfile>
      <anchor>ae8d2c397207060a05f682b5572bb2a24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Struct</name>
    <filename>classIECore_1_1Struct.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1Struct.html</anchorfile>
      <anchor>a8daca4fd45bdeea9ed6b5078c51c0e0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MenuItemDefinition</name>
    <filename>classIECore_1_1MenuItemDefinition.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a62042b66e15e158cc69f3012b9a34d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a9fb826f6b7bd43af1fc55953ff5c15bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>command</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>aed37ab543f33de55bbc6adf111d818a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>secondaryCommand</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a3ad44d424984ed2e060d89865b3e13c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>divider</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a85616fbf7cba6db3ed779f1d7905629c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>active</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>abb1fb5740b78af52fa182d4b6a040240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>description</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>abc87ab43933e171835d344974f5b1ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>subMenu</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a94a72b0eebf401d21271f6295911005d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>checkBox</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>a8bdeabe9a420ac0cb63999324b5fba86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>blindData</name>
      <anchorfile>classIECore_1_1MenuItemDefinition.html</anchorfile>
      <anchor>ac339f702facc10fb7bcadea596eef7ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::MenuDefinition</name>
    <filename>classIECore_1_1MenuDefinition.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a592b08146f453a1388a23bf673635cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>prepend</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>ae5aa806bd3ebf545fc86fb0f34d0ac31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>append</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a536db3c41cd7da9539e8ad347ec0602d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>insertBefore</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a921934d8805203decf055d60f5aa9ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>insertAfter</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a96c096d655734b8e60dd2da3481d9dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a48789a617de523201198db2aa534692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removeMatching</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a623c48df0b3380ff48f421862ad9b9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clear</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>ac278b1e5eef37815f0ccf87cdc2b35d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>items</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>adf40bf6391ad0ba4bd8699d3d2cbd68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>reRooted</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>aa60ebce82014b7452d377ee7059c425e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classIECore_1_1MenuDefinition.html</anchorfile>
      <anchor>a094c2fc1425812dd8c0b95029c762dc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ParameterParser</name>
    <filename>classIECore_1_1ParameterParser.html</filename>
    <member kind="function">
      <type>def</type>
      <name>parse</name>
      <anchorfile>classIECore_1_1ParameterParser.html</anchorfile>
      <anchor>a1495155aea2881f1f2103bdbbcef7703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>serialise</name>
      <anchorfile>classIECore_1_1ParameterParser.html</anchorfile>
      <anchor>ac07fa4f635910124ed045fb440bfdaef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerType</name>
      <anchorfile>classIECore_1_1ParameterParser.html</anchorfile>
      <anchor>a09d897446f9fd2928293fbb9e5587871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerTypeWithRepr</name>
      <anchorfile>classIECore_1_1ParameterParser.html</anchorfile>
      <anchor>a35a0412ef5a991d8b3d7193e9b82cf44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CapturingMessageHandler</name>
    <filename>classIECore_1_1CapturingMessageHandler.html</filename>
    <base>IECore::MessageHandler</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1CapturingMessageHandler.html</anchorfile>
      <anchor>aa6c46c57c7be2bfa618d891b5a35b688</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>handle</name>
      <anchorfile>classIECore_1_1CapturingMessageHandler.html</anchorfile>
      <anchor>a23fb4bea21c6a32cc7886d60c59882f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>messages</name>
      <anchorfile>classIECore_1_1CapturingMessageHandler.html</anchorfile>
      <anchor>aee6c502a80868badf364b5c543cb191e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::LayeredDict</name>
    <filename>classIECore_1_1LayeredDict.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>ada8b5efddee967b612f7ac08615b3775</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__getitem__</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>a708564e2054ca646d8c19184b0f50548</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__contains__</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>ae0707fc29eafa0b7beb2f97bd1e3c070</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>keys</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>aad46f1a9c88bd873fb796c9894e48649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>af5e070b0eaf1fe3a3fe527b9ed661aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>layers</name>
      <anchorfile>classIECore_1_1LayeredDict.html</anchorfile>
      <anchor>ae44d12c4c5372a487849d7323257ebd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundVectorParameter</name>
    <filename>classIECore_1_1CompoundVectorParameter.html</filename>
    <base>IECore::CompoundParameter</base>
    <member kind="function">
      <type>def</type>
      <name>addParameter</name>
      <anchorfile>classIECore_1_1CompoundVectorParameter.html</anchorfile>
      <anchor>ab5d9c1320e3a11d383d00456de3800fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addParameters</name>
      <anchorfile>classIECore_1_1CompoundVectorParameter.html</anchorfile>
      <anchor>a824ba6c09ebbd2731120a9f98f046d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>insertParameter</name>
      <anchorfile>classIECore_1_1CompoundVectorParameter.html</anchorfile>
      <anchor>aec944206bd53849708996bfd1d6fe358</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>valueValid</name>
      <anchorfile>classIECore_1_1CompoundVectorParameter.html</anchorfile>
      <anchor>a57bffda66eb626f1d99a374ceb888379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::SubstitutedDict</name>
    <filename>classIECore_1_1SubstitutedDict.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>ae4841ffd4d4931f21d688afed591c866</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__getitem__</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a8ba9bbc01fa70d5f9293b75f610fda1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__contains__</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>af055ed6b4ec9059fe7d7bfef7ca34515</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__eq__</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a12f0df755c066429732332b1b309a9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__ne__</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a788f939429035c607d253c82863b6805</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>keys</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a78dff4ffd2c20a4d6a5ff5fa7c210e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>values</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a4a05248dd8c503592663bf1cb8ff2810</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>items</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a99130b73be24a00d755c6055fdc7ba9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>afde9cc6daffb63d21f0a70e123ea190f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>substitutions</name>
      <anchorfile>classIECore_1_1SubstitutedDict.html</anchorfile>
      <anchor>a97227ba49dae81df9086ceb045db753a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::VisualiserProcedural</name>
    <filename>classIECore_1_1VisualiserProcedural.html</filename>
    <base>IECore::ParameterisedProcedural</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1VisualiserProcedural.html</anchorfile>
      <anchor>a1b91f4f9a6ccad67cadb39b1b6f91267</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>doBound</name>
      <anchorfile>classIECore_1_1VisualiserProcedural.html</anchorfile>
      <anchor>a10f2c1c4c42c9870ff317c4229fc2933</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>doRenderState</name>
      <anchorfile>classIECore_1_1VisualiserProcedural.html</anchorfile>
      <anchor>a5b8ab27a1e1f0b22ce20c0f9ce4c3c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>doRender</name>
      <anchorfile>classIECore_1_1VisualiserProcedural.html</anchorfile>
      <anchor>a950ef7f5f70933d834a09b588c199120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ClassParameter</name>
    <filename>classIECore_1_1ClassParameter.html</filename>
    <base>IECore::CompoundParameter</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1ClassParameter.html</anchorfile>
      <anchor>ab932bd052110530850e8ba4291baf5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getClass</name>
      <anchorfile>classIECore_1_1ClassParameter.html</anchorfile>
      <anchor>a157d17f3dfd1b825671e37d61df0ba5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setClass</name>
      <anchorfile>classIECore_1_1ClassParameter.html</anchorfile>
      <anchor>a92d649207d6310452aafe532fdc9d4e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::ClassVectorParameter</name>
    <filename>classIECore_1_1ClassVectorParameter.html</filename>
    <base>IECore::CompoundParameter</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>acbc2507cac18d6336ee2ac33800168ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>searchPathEnvVar</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>a17b1cb67d7d71e186f318f842cadc626</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getClasses</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>a427b49a2e120f321a53bab1fc0b15b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setClasses</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>a11904f8d7efb4ff260825f994f5a4add</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getClass</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>ac14283479583a418b714237cacd4c728</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setClass</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>ae3dba99126a9da6f5f4d83a5d185fa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removeClass</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>ad6f1e0696bfbc8639f4070116928e66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>newParameterName</name>
      <anchorfile>classIECore_1_1ClassVectorParameter.html</anchorfile>
      <anchor>a962a470da43fc2771b08f9d0a58d84a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::CompoundStream</name>
    <filename>classIECore_1_1CompoundStream.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1CompoundStream.html</anchorfile>
      <anchor>a1ece878aa7901ab5bc8c8563901d1b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write</name>
      <anchorfile>classIECore_1_1CompoundStream.html</anchorfile>
      <anchor>aafa0b9b8eebe5d9fc9111c69ae7edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>flush</name>
      <anchorfile>classIECore_1_1CompoundStream.html</anchorfile>
      <anchor>a613eb039581579b3f3fc0e6f9cb4fc83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IgnoredExceptions</name>
    <filename>classIECore_1_1IgnoredExceptions.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1IgnoredExceptions.html</anchorfile>
      <anchor>a33aeac56c60a568d1423184c7d807ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECore_1_1IgnoredExceptions.html</anchorfile>
      <anchor>ad3412bc68a325bcae0a3a70742224dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECore_1_1IgnoredExceptions.html</anchorfile>
      <anchor>a16e84b0cf575632085cd0231b8801a1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::Preset</name>
    <filename>classIECore_1_1Preset.html</filename>
    <base>IECore::Parameterised</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1Preset.html</anchorfile>
      <anchor>afac101c30d60ffebdda8404821125cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>metadata</name>
      <anchorfile>classIECore_1_1Preset.html</anchorfile>
      <anchor>a60b276274af07a1cc8f86ce0de45c311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>applicableTo</name>
      <anchorfile>classIECore_1_1Preset.html</anchorfile>
      <anchor>ad78b4edfe1320f38c526da78c30715bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__call__</name>
      <anchorfile>classIECore_1_1Preset.html</anchorfile>
      <anchor>af6f857783cf50f78515bbec822b59de0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::BasicPreset</name>
    <filename>classIECore_1_1BasicPreset.html</filename>
    <base>IECore::Preset</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1BasicPreset.html</anchorfile>
      <anchor>a331f90a2bed83376dd2795bf414934ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>metadata</name>
      <anchorfile>classIECore_1_1BasicPreset.html</anchorfile>
      <anchor>afe7e514d1adc6f22d043b9f8004c1b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>applicableTo</name>
      <anchorfile>classIECore_1_1BasicPreset.html</anchorfile>
      <anchor>abc7bc811a923eb9e61ba062fce560a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__call__</name>
      <anchorfile>classIECore_1_1BasicPreset.html</anchorfile>
      <anchor>a1d5d4439bfd7c693762329a14c3db8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save</name>
      <anchorfile>classIECore_1_1BasicPreset.html</anchorfile>
      <anchor>a42b6a984db702c2445614e793280dfe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::RelativePreset</name>
    <filename>classIECore_1_1RelativePreset.html</filename>
    <base>IECore::Preset</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECore_1_1RelativePreset.html</anchorfile>
      <anchor>a4cf5e2cc0689209cfb71acde0ef99560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>applicableTo</name>
      <anchorfile>classIECore_1_1RelativePreset.html</anchorfile>
      <anchor>a3cbe17512c94319ea381a114d309c94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getDiffData</name>
      <anchorfile>classIECore_1_1RelativePreset.html</anchorfile>
      <anchor>a568e7636461d0f2ab62bab67284fa614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setDiffData</name>
      <anchorfile>classIECore_1_1RelativePreset.html</anchorfile>
      <anchor>af0057920f1f24ae75524c3c82a57949f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__call__</name>
      <anchorfile>classIECore_1_1RelativePreset.html</anchorfile>
      <anchor>ad3d300c5821f352a64eb85f3a03111f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECore::IndexedIO::Entry</name>
    <filename>classIECore_1_1IndexedIO_1_1Entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>ab6f29d4d44bb6abf21f9a402602d1d9d</anchor>
      <arglist>(const EntryID &amp;id, EntryType eType, DataType dType, unsigned long arrayLength)</arglist>
    </member>
    <member kind="function">
      <type>const EntryID &amp;</type>
      <name>id</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>ab2f068c7c75b86105911e740ec0dc99e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>entryType</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a099973858fc1b050424dbff095b130b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataType</type>
      <name>dataType</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a0676d1ce55a9854f1369e9ccb40d24b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArray</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a267433e146cd172a65bcd01af20734e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>arrayLength</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>aea41b29feedf4019914f22274fd31dc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isArray</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a7f80918fa03a351f546470100907da50</anchor>
      <arglist>(DataType dType)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryID</type>
      <name>m_ID</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>afb0b1516d1b21810148bb363b4eff8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryType</type>
      <name>m_entryType</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a3e6d60ac6c613c059d4f3008badd87a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataType</type>
      <name>m_dataType</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a25cbdf670b0dafa27c2361b6594335db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>m_arrayLength</name>
      <anchorfile>classIECore_1_1IndexedIO_1_1Entry.html</anchorfile>
      <anchor>a5b4572d28be950f2b901e9b80ad1d6c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::HasValueType</name>
    <filename>structIECore_1_1TypeTraits_1_1HasValueType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::HasVectorValueType</name>
    <filename>structIECore_1_1TypeTraits_1_1HasVectorValueType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsSimpleTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsSimpleTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsMatrix33</name>
    <filename>structIECore_1_1TypeTraits_1_1IsMatrix33.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsMatrix44</name>
    <filename>structIECore_1_1TypeTraits_1_1IsMatrix44.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsMatrix</name>
    <filename>structIECore_1_1TypeTraits_1_1IsMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec3</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec3.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsFloatVec3</name>
    <filename>structIECore_1_1TypeTraits_1_1IsFloatVec3.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec2</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec2.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsFloatVec2</name>
    <filename>structIECore_1_1TypeTraits_1_1IsFloatVec2.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsColor3</name>
    <filename>structIECore_1_1TypeTraits_1_1IsColor3.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsColor4</name>
    <filename>structIECore_1_1TypeTraits_1_1IsColor4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsColor</name>
    <filename>structIECore_1_1TypeTraits_1_1IsColor.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsQuat</name>
    <filename>structIECore_1_1TypeTraits_1_1IsQuat.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsBox</name>
    <filename>structIECore_1_1TypeTraits_1_1IsBox.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsTransformationMatrix</name>
    <filename>structIECore_1_1TypeTraits_1_1IsTransformationMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsMatrixTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsMatrixTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec2TypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec2TypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec2VectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec2VectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsFloatVec2VectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsFloatVec2VectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec3TypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec3TypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVec3VectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVec3VectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsFloatVec3VectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsFloatVec3VectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVecTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVecTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsVecVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsVecVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericBasedVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericBasedVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsFloatVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsFloatVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericSimpleTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericSimpleTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericBasedSimpleTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericBasedSimpleTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsNumericBasedTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsNumericBasedTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsInterpolable</name>
    <filename>structIECore_1_1TypeTraits_1_1IsInterpolable.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsStrictlyInterpolable</name>
    <filename>structIECore_1_1TypeTraits_1_1IsStrictlyInterpolable.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsInterpolableTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsInterpolableTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsStrictlyInterpolableTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsStrictlyInterpolableTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsInterpolableVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsInterpolableVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsStrictlyInterpolableVectorTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsStrictlyInterpolableVectorTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsInterpolableSimpleTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsInterpolableSimpleTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsStrictlyInterpolableSimpleTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsStrictlyInterpolableSimpleTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsSpline</name>
    <filename>structIECore_1_1TypeTraits_1_1IsSpline.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECore::TypeTraits::IsSplineTypedData</name>
    <filename>structIECore_1_1TypeTraits_1_1IsSplineTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>IECoreGL</name>
    <filename>namespaceIECoreGL.html</filename>
    <class kind="class">IECoreGL::Bindable</class>
    <class kind="class">IECoreGL::CameraController</class>
    <class kind="class">IECoreGL::ColorTexture</class>
    <class kind="class">IECoreGL::DepthTexture</class>
    <class kind="class">IECoreGL::Exception</class>
    <class kind="class">IECoreGL::FontLoader</class>
    <class kind="class">IECoreGL::FrameBuffer</class>
    <class kind="class">IECoreGL::HitRecord</class>
    <class kind="class">IECoreGL::LuminanceTexture</class>
    <class kind="class">IECoreGL::MeshPrimitive</class>
    <class kind="class">IECoreGL::NameStateComponent</class>
    <class kind="struct">IECoreGL::NumericTraits</class>
    <class kind="class">IECoreGL::PointsPrimitive</class>
    <class kind="class">IECoreGL::Primitive</class>
    <class kind="class">IECoreGL::Renderable</class>
    <class kind="class">IECoreGL::Renderer</class>
    <class kind="class">IECoreGL::SceneViewer</class>
    <class kind="class">IECoreGL::Shader</class>
    <class kind="class">IECoreGL::ShaderManager</class>
    <class kind="class">IECoreGL::ShaderStateComponent</class>
    <class kind="class">IECoreGL::SplineToGLTextureConverter</class>
    <class kind="class">IECoreGL::StateComponent</class>
    <class kind="class">IECoreGL::Texture</class>
    <class kind="class">IECoreGL::TextureLoader</class>
    <class kind="class">IECoreGL::ToGLCameraConverter</class>
    <class kind="class">IECoreGL::ToGLConverter</class>
    <class kind="class">IECoreGL::ToGLCurvesConverter</class>
    <class kind="class">IECoreGL::ToGLMeshConverter</class>
    <class kind="class">IECoreGL::ToGLPointsConverter</class>
    <class kind="class">IECoreGL::ToGLTextureConverter</class>
    <class kind="class">IECoreGL::Window</class>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, ColorTypeId &gt;</type>
      <name>Color</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8e52f4046a5dc81f4fb83d39e57b7955</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, TransparentShadingStateComponentTypeId &gt;</type>
      <name>TransparentShadingStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>adf13b8816d109f912ed3867c8fe8d6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, BoundColorStateComponentTypeId &gt;</type>
      <name>BoundColorStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aab9e36d61d79a43a100d6577c221d8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, WireframeColorStateComponentTypeId &gt;</type>
      <name>WireframeColorStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ad13dc99c3eb1e728f163fe74884d1fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, OutlineColorStateComponentTypeId &gt;</type>
      <name>OutlineColorStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae5291fbf5e45bfa5302c6915a2a2d914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, PointColorStateComponentTypeId &gt;</type>
      <name>PointColorStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8b46bc2459bd3554910ac3b86b54f048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; BlendFactors, BlendFuncStateComponentTypeId &gt;</type>
      <name>BlendFuncStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a005b1637960aa36391a8939a004116c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Color4f, BlendColorStateComponentTypeId &gt;</type>
      <name>BlendColorStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a74574c0868698fa3215589151ec7efcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; GLenum, BlendEquationStateComponentTypeId &gt;</type>
      <name>BlendEquationStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>afa0c45241fc55ad513da4221965828bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, DoubleSidedStateComponentTypeId &gt;</type>
      <name>DoubleSidedStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a9725eb684379347057fd5242fd0c533e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, RightHandedOrientationStateComponentTypeId &gt;</type>
      <name>RightHandedOrientationStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a45573f8393537e7e6a7391c987951567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, LineSmoothingStateComponentTypeId &gt;</type>
      <name>LineSmoothingStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ad3a5c63a08d08d8927e8447095ae9ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PointSmoothingStateComponentTypeId &gt;</type>
      <name>PointSmoothingStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8ca7a2a23d3196489751afeadbb647eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PolygonSmoothingStateComponentTypeId &gt;</type>
      <name>PolygonSmoothingStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a2af0d296a6e5647ad4a7977a3e0c77ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, DepthTestStateComponentTypeId &gt;</type>
      <name>DepthTestStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a220db223278073b9d96fe205bdc5d156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; RendererSpace, CullingSpaceStateComponentTypeId &gt;</type>
      <name>CullingSpaceStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>addd40d484b91c9088ba8a223f61344ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; Imath::Box3f, CullingBoxStateComponentTypeId &gt;</type>
      <name>CullingBoxStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a94a34f4c7037814ebf0f2fa263087a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, ProceduralThreadingStateComponentTypeId &gt;</type>
      <name>ProceduralThreadingStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a58eb57b5783b2f2a0cb3e5597c2e5f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, CameraVisibilityStateComponentTypeId &gt;</type>
      <name>CameraVisibilityStateComponent</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a2995ec6149128230ed0937b09c269eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>UniformFloatFunction</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>af862f7d48a880d0a9952f8f697637bcd</anchor>
      <arglist>)(GLint, GLsizei count, const GLfloat *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>UniformIntFunction</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3796a0741b65acb0cb76eefa8afc755f</anchor>
      <arglist>)(GLint, GLsizei count, const GLint *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8a86238907fa3ea7d8d44c6f5ebe90a9</anchor>
      <arglist>(AlphaTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a1e2ecf658b82e18c8c05d76a87b4c92d</anchor>
      <arglist>(Bindable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae023476fc3d1dddb52b6d9648d039517</anchor>
      <arglist>(BoxPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a1b798e26956e5007a69803140a42885f</anchor>
      <arglist>(Camera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae1c2b4a969aa883e7ef4869ad4003852</anchor>
      <arglist>(CameraController)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aa0f88542401d2e49a0ffcbc5cf76e6ee</anchor>
      <arglist>(ColorTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a547c1a0f56b864a2370febc00e60a204</anchor>
      <arglist>(CurvesPrimitive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugPrintErrors</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aa892cd384024fd39d11164da5e828b8f</anchor>
      <arglist>(const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aecbb085862838818fdbb1f6e8dc5d7bc</anchor>
      <arglist>(DepthTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8dcc8af084ba463405bca718837c1822</anchor>
      <arglist>(DiskPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ac32de2191e0d8cb4a5917f4d4d802cfd</anchor>
      <arglist>(MeshPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aa7892fc9a307311b98140c688a47fb39</anchor>
      <arglist>(Font)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3aab3eeeda1a3f025689a15a9744b970</anchor>
      <arglist>(Font)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a38dc012d2dec0a31e1844c6d0090badb</anchor>
      <arglist>(FontLoader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4f3e0c7a7343ce2f9494d3721224da4e</anchor>
      <arglist>(ColorTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3fb646c18925a1548f5785fc7a006cf8</anchor>
      <arglist>(DepthTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ab82db5b3742e28f62f5a04621ccf0001</anchor>
      <arglist>(FrameBuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glVertex</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4c67ddec9f8560462987170936772a22</anchor>
      <arglist>(const Imath::V3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glNormal</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a149825e5c3aaecea83beb1ab3868bfbf</anchor>
      <arglist>(const Imath::V3f &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTranslate</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a13a26df16c625fff9f539b09d9e2dac6</anchor>
      <arglist>(const Imath::V2f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTranslate</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3db66a696420e816783701d8679070b9</anchor>
      <arglist>(const Imath::V3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a6d5f3fe1299bc5f9139e0d15e1923494</anchor>
      <arglist>(State)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a3de12af7dbb1f718d6d50ed4fc18e39f</anchor>
      <arglist>(Group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a6f23c060b2023ce68cb0eb201231dd59</anchor>
      <arglist>(bool glAlreadyInitialised=false)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GLenum &gt; &amp;</type>
      <name>lights</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aa21db9a3288892d46771259d9235dc97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a6c15855bdbfa51ca3bc04bb70d7b92c3</anchor>
      <arglist>(LuminanceTexture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a136b50a62d1d5f74cdd6d44495a9f241</anchor>
      <arglist>(MeshPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a398fa582fd15785f8e093eb1dca145d6</anchor>
      <arglist>(NameStateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a7b02668c9aadd7a433975a3dc122009a</anchor>
      <arglist>(OrthographicCamera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae74a67f6f3205c89fd8b18f636dc5fd1</anchor>
      <arglist>(PerspectiveCamera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a57ddbd7c8e7e229cc8b335afa5a53a1c</anchor>
      <arglist>(PointsPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a840295b49f427784d01e590485375e3b</anchor>
      <arglist>(Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ac4c1c8a51f84aa21d14a1e73e3c5e06b</anchor>
      <arglist>(QuadPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>abc424a09ee610ce208a7106861696cd9</anchor>
      <arglist>(Renderable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ab963615d2d3c9881c124de6a7b8d5bfb</anchor>
      <arglist>(Scene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a625ce901a2bb94595b843cc11d251497</anchor>
      <arglist>(Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae0e8bfe7e23b25519d40a82c82e37148</anchor>
      <arglist>(Group)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a50976bdb10dcc2b875e00e8bc60644ff</anchor>
      <arglist>(Camera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ad34adff32612e3e2b8a5567d8c894fbf</anchor>
      <arglist>(Scene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ac8ade5000e951ab023ffceedac0b109a</anchor>
      <arglist>(CameraController)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a6ea971d23ffa68d4ef0d2f5eb2ef83cb</anchor>
      <arglist>(SceneViewer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a9ff67a916954c052532e3c43bb644d75</anchor>
      <arglist>(Shader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>acd8bfe2b081db3e69333f6ee15a72652</anchor>
      <arglist>(Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4a71fd2b0f03275ed35aca275aee1ae8</anchor>
      <arglist>(ShaderManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a843e1b3613a40eb0e21f32aaaad538b5</anchor>
      <arglist>(Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a8290ad883212ccf49234c8fdd0cf827d</anchor>
      <arglist>(ShaderStateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ac9d298e7766bc70facfcdba3a3821842</anchor>
      <arglist>(SpherePrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a5c39766ba094f1fcf970496ab77d8955</anchor>
      <arglist>(SplineToGLTextureConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4128d23e6f4143df1cfcac75c8bb2f11</anchor>
      <arglist>(StateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a2884f80234ab1099e70cb28a75f6a109</anchor>
      <arglist>(StateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aea047f8501783d3c85cd78f56ffddcd7</anchor>
      <arglist>(TextPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a4515810ea5c3d008874a550ecdfead5f</anchor>
      <arglist>(FrameBuffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ac19c194579a4b6eb8a9b03e0fb7b1128</anchor>
      <arglist>(Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>af4d944649057421f84e8d7d9dd7d3404</anchor>
      <arglist>(TextureLoader)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GLenum &gt; &amp;</type>
      <name>textureUnits</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a57f463fe96c847fc71a014cb33a1f80f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a9474d31e908598dd4e3f1c3d63d2c850</anchor>
      <arglist>(ToGLCameraConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a912eeabbc939cb233883de2a13997e09</anchor>
      <arglist>(ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a59202580d54c6f3a807871b4826fc88f</anchor>
      <arglist>(ToGLMeshConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>af56288cde9a862214fa0074d205f27c2</anchor>
      <arglist>(ToGLTextureConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>aa86dd871002a6fb7ad88b8f1588abbe6</anchor>
      <arglist>(Color)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; UniformFloatFunction &gt; &amp;</type>
      <name>uniformFloatFunctions</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a738a8244ee86023aa118b7c2b8ade382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; void(*)(GLint, GLsizei count, const GLint *)&gt; &amp;</type>
      <name>uniformIntFunctions</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ae6bab154f2b62bd3791c667775bdaac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a714ae58d30304ed0acc3edd390edeb92</anchor>
      <arglist>(Window)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>a437354096e00fc08dea57c24eb7b6d90</anchor>
      <arglist>(BoxPrimitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>af7d2f3d71c35685156d96d099614fc18</anchor>
      <arglist>(NameStateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreGL.html</anchorfile>
      <anchor>ab905917a583f2b67e04f0b2630669ed2</anchor>
      <arglist>(Renderer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Bindable</name>
    <filename>classIECoreGL_1_1Bindable.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Bindable.html</anchorfile>
      <anchor>ae696c81939e8f8a4ce96e3b71fcdb6f9</anchor>
      <arglist>(IECoreGL::Bindable, BindableTypeId, IECore::RunTimeTyped)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1Bindable.html</anchorfile>
      <anchor>af1a208734db04792a485c9496744fdd2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::CameraController</name>
    <filename>classIECoreGL_1_1CameraController.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a83a7582e72abe86b38abf2cf0d0a7de1</anchor>
      <arglist>(CameraController)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraController</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a9852e424c3dcea0a2dbaf257a4c3719d</anchor>
      <arglist>(CameraPtr camera, float centreOfInterest=5.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a7f028a2dcd66d146cfbad9181377cc4e</anchor>
      <arglist>(CameraPtr camera)</arglist>
    </member>
    <member kind="function">
      <type>CameraPtr</type>
      <name>getCamera</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>af49913d70e33252217ce3d1f8230654b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCentreOfInterest</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a8b426468efae41cd646b125ba4506a0d</anchor>
      <arglist>(float centreOfInterest)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCentreOfInterest</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a41524a2cfd87f3c7277757af82e86a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reshape</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a1956b587e665c5749b4a30f96675fc83</anchor>
      <arglist>(int resolutionX, int resolutionY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>ad6cc1a846536bf759a10cefd792d9991</anchor>
      <arglist>(const Imath::Box3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a0b8653d8432afb3cf646f2dc0b24ebe6</anchor>
      <arglist>(const Imath::Box3f &amp;box, const Imath::V3f &amp;viewDirection, const Imath::V3f &amp;upVector=Imath::V3f(0, 1, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>track</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a7c3f3d01f537a67d719d0abe7fcd2b76</anchor>
      <arglist>(int dx, int dy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tumble</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a17067a851fb3c5386b6a605256468b02</anchor>
      <arglist>(int dx, int dy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dolly</name>
      <anchorfile>classIECoreGL_1_1CameraController.html</anchorfile>
      <anchor>a5b5f331b6cb7622e2bfb1c81b23cffa1</anchor>
      <arglist>(int dx, int dy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ColorTexture</name>
    <filename>classIECoreGL_1_1ColorTexture.html</filename>
    <base>IECoreGL::Texture</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ColorTexture.html</anchorfile>
      <anchor>a6bb96b53804e2200bbcb5a0aea12b9d3</anchor>
      <arglist>(IECoreGL::ColorTexture, ColorTextureTypeId, Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorTexture</name>
      <anchorfile>classIECoreGL_1_1ColorTexture.html</anchorfile>
      <anchor>a5f0304767bf4cd5a7edabbb1286d0eff</anchor>
      <arglist>(unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorTexture</name>
      <anchorfile>classIECoreGL_1_1ColorTexture.html</anchorfile>
      <anchor>a596d2d5ee02170dd7b2cb73c5b56bfc8</anchor>
      <arglist>(unsigned int width, unsigned int height, IECore::ConstDataPtr r, IECore::ConstDataPtr g, IECore::ConstDataPtr b, IECore::ConstDataPtr a=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorTexture</name>
      <anchorfile>classIECoreGL_1_1ColorTexture.html</anchorfile>
      <anchor>abb9af8247320fc662443a97d9904840d</anchor>
      <arglist>(IECore::ConstImagePrimitivePtr image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ImagePrimitivePtr</type>
      <name>imagePrimitive</name>
      <anchorfile>classIECoreGL_1_1ColorTexture.html</anchorfile>
      <anchor>ad942f2b72e926096f5315b691ea9ee99</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::DepthTexture</name>
    <filename>classIECoreGL_1_1DepthTexture.html</filename>
    <base>IECoreGL::Texture</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1DepthTexture.html</anchorfile>
      <anchor>a3913045b4a78046aa85b1da65c9f66e7</anchor>
      <arglist>(IECoreGL::DepthTexture, DepthTextureTypeId, Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DepthTexture</name>
      <anchorfile>classIECoreGL_1_1DepthTexture.html</anchorfile>
      <anchor>ab48c64a92dd73d17393d8427695e01d3</anchor>
      <arglist>(unsigned int width, unsigned height, IECore::ConstDataPtr z=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ImagePrimitivePtr</type>
      <name>imagePrimitive</name>
      <anchorfile>classIECoreGL_1_1DepthTexture.html</anchorfile>
      <anchor>aecae08f3d6066f6dccdd9fdfaab69d2e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Exception</name>
    <filename>classIECoreGL_1_1Exception.html</filename>
    <base>IECore::Exception</base>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classIECoreGL_1_1Exception.html</anchorfile>
      <anchor>a6a8e91c6e08140c6b8da64d91b777b99</anchor>
      <arglist>(GLenum error)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classIECoreGL_1_1Exception.html</anchorfile>
      <anchor>abfccc38cca53dcd4fbdcce6998a193e3</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>throwIfError</name>
      <anchorfile>classIECoreGL_1_1Exception.html</anchorfile>
      <anchor>aea4886768ea5463c53d31f4009fdd671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>throwIfError</name>
      <anchorfile>classIECoreGL_1_1Exception.html</anchorfile>
      <anchor>a06ae923b9c175b347a147b20c5cc3b2e</anchor>
      <arglist>(GLenum error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::FontLoader</name>
    <filename>classIECoreGL_1_1FontLoader.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreGL_1_1FontLoader.html</anchorfile>
      <anchor>a5bc433a5ae5b5253833034950e572baf</anchor>
      <arglist>(FontLoader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FontLoader</name>
      <anchorfile>classIECoreGL_1_1FontLoader.html</anchorfile>
      <anchor>a6398216a67ccf9e11d6dba2252a8165c</anchor>
      <arglist>(const IECore::SearchPath &amp;searchPaths)</arglist>
    </member>
    <member kind="function">
      <type>FontPtr</type>
      <name>load</name>
      <anchorfile>classIECoreGL_1_1FontLoader.html</anchorfile>
      <anchor>a5ec6267b8f09a450e0e7079693739719</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECoreGL_1_1FontLoader.html</anchorfile>
      <anchor>ac98e471472ecc6b873e708e255ad7ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontLoaderPtr</type>
      <name>defaultFontLoader</name>
      <anchorfile>classIECoreGL_1_1FontLoader.html</anchorfile>
      <anchor>aca57ebead23b8c5ec65f438b1724c46d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::FrameBuffer</name>
    <filename>classIECoreGL_1_1FrameBuffer.html</filename>
    <base>IECoreGL::Bindable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a65eae9fb501843c93aebfda79e3e003b</anchor>
      <arglist>(IECoreGL::FrameBuffer, FrameBufferTypeId, Bindable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrameBuffer</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>ae8f8d099a43e2c447f9426471724de8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a2d1991afdb1854f28d7f7e69d63b4aac</anchor>
      <arglist>(ColorTexturePtr texture, unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type>ColorTexturePtr</type>
      <name>getColor</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a990207dcdc7ed75f80d09654ddcf24f6</anchor>
      <arglist>(unsigned int index=0)</arglist>
    </member>
    <member kind="function">
      <type>ConstColorTexturePtr</type>
      <name>getColor</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>aaba7699d893396a744c46382b760cc41</anchor>
      <arglist>(unsigned int index=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepth</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a3f43f7d5a6c1e4b74dcc6cb364ed03db</anchor>
      <arglist>(DepthTexturePtr depthTexture)</arglist>
    </member>
    <member kind="function">
      <type>DepthTexturePtr</type>
      <name>getDepth</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a8599f30cbcf07b77cddfab99c161878f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDepthTexturePtr</type>
      <name>getDepth</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a0db69d225feea29495096825e0a32120</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>af1652aacdaa51c62e144256be7bb5202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a7fb265048cf1066993bbe014bde88643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>maxColors</name>
      <anchorfile>classIECoreGL_1_1FrameBuffer.html</anchorfile>
      <anchor>a8de16c4b5c7e308ca1b65c1b5a9623e2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::HitRecord</name>
    <filename>classIECoreGL_1_1HitRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>HitRecord</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a5a7e9f98181aa8ce0dec8fc45b1ab9d0</anchor>
      <arglist>(const GLuint *hitRecord)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HitRecord</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>aaa797178330a91141b97d30c5fe486a3</anchor>
      <arglist>(float dMin, float dMax, const IECore::InternedString &amp;primName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a568f469da77cf8e11a0717fece6b7b0a</anchor>
      <arglist>(const HitRecord &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>offsetToNext</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a17523f25bd3ae6b38565fdac345b7ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>depthMin</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a58df3f40e1f561eeac3ccbc6509ab28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>depthMax</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a49409cfbf00b314d5ec65402a5597318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IECore::InternedString</type>
      <name>name</name>
      <anchorfile>classIECoreGL_1_1HitRecord.html</anchorfile>
      <anchor>a5c8b95a53396b92a91347b804052004e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::LuminanceTexture</name>
    <filename>classIECoreGL_1_1LuminanceTexture.html</filename>
    <base>IECoreGL::Texture</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1LuminanceTexture.html</anchorfile>
      <anchor>a0cd35bda14fab39054f31dd1f3816235</anchor>
      <arglist>(IECoreGL::LuminanceTexture, LuminanceTextureTypeId, Texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuminanceTexture</name>
      <anchorfile>classIECoreGL_1_1LuminanceTexture.html</anchorfile>
      <anchor>a66fb2d087d3f32c15e8b1fd7c4721a6c</anchor>
      <arglist>(unsigned int width, unsigned int height, IECore::ConstDataPtr y, IECore::ConstDataPtr a=0, bool mipMap=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LuminanceTexture</name>
      <anchorfile>classIECoreGL_1_1LuminanceTexture.html</anchorfile>
      <anchor>a8d25c48788a35951478885a66fdafcfd</anchor>
      <arglist>(IECore::ConstImagePrimitivePtr image, bool mipMap=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ImagePrimitivePtr</type>
      <name>imagePrimitive</name>
      <anchorfile>classIECoreGL_1_1LuminanceTexture.html</anchorfile>
      <anchor>ad173d8d75d506bab3b9d6d599499c5f6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::MeshPrimitive</name>
    <filename>classIECoreGL_1_1MeshPrimitive.html</filename>
    <base>IECoreGL::Primitive</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a8b1b87c4bd434c3f3271e13e63861687</anchor>
      <arglist>(IECoreGL::MeshPrimitive, MeshPrimitiveTypeId, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPrimitive</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a675547baf19de448e9c5531b19ddf386</anchor>
      <arglist>(IECore::ConstIntVectorDataPtr vertIds)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntVectorDataPtr</type>
      <name>vertexIds</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a135f2785df243b0befb43fa9be4c2f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>ab4a9660bcfce5b74639efb530cbdbd70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPrimitiveVariable</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a4dad7a96a025d761484ba1a4f4a79082</anchor>
      <arglist>(const std::string &amp;name, const IECore::PrimitiveVariable &amp;primVar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a360fec71b3b03a089325493c67774531</anchor>
      <arglist>(const State *state, IECore::TypeId style) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TextPrimitive</name>
      <anchorfile>classIECoreGL_1_1MeshPrimitive.html</anchorfile>
      <anchor>a777ef6df7ba6d8c2518aa676facb95e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::NameStateComponent</name>
    <filename>classIECoreGL_1_1NameStateComponent.html</filename>
    <base>IECoreGL::StateComponent</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>a5c88fedf4c33e85a9c71b76b955e6058</anchor>
      <arglist>(IECoreGL::NameStateComponent, NameStateComponentTypeId, StateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NameStateComponent</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>a03ecbfe6f47e0c300ff90a0301b463f4</anchor>
      <arglist>(const std::string &amp;name=&quot;unnamed&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>a8b89a47b8edd11905bc7179385084521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>glName</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>a3a3c1d0f538e0dd004121b067203c861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>a028ed8b16d32790efde8c880f34b2471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>nameFromGLName</name>
      <anchorfile>classIECoreGL_1_1NameStateComponent.html</anchorfile>
      <anchor>ad411130d4bf57e1657da1f6880b2263e</anchor>
      <arglist>(GLuint glName)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreGL::NumericTraits</name>
    <filename>structIECoreGL_1_1NumericTraits.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a9a14e1fc264b2d27677b8895e5ce9f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a007afa26c7a8f3a02c0fcf06a6d29cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a6484403f63c3192122b805819af4a15f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a359421674150e471f6ccacb9d1ab6d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a2cc0f7d57122624f60eb6b9599544004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a9e1bdba1668a93a1e17dbad6f31b86bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a00ac6233204d610df969edda39b72bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>a74fe6093c9299daf163764aa55079da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>aa9f139cdacd0b63db265ee3cde0d7726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLenum</type>
      <name>glType</name>
      <anchorfile>structIECoreGL_1_1NumericTraits.html</anchorfile>
      <anchor>af4e2a93c40763bfb52a6ddea6324e325</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::PointsPrimitive</name>
    <filename>classIECoreGL_1_1PointsPrimitive.html</filename>
    <base>IECoreGL::Primitive</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>a53fc39f611dbef1e97ec9acfaee0a926</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>ac56ce72fcb66e240745380c2770343cf</anchor>
      <arglist>(IECoreGL::PointsPrimitive, PointsPrimitiveTypeId, Primitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointsPrimitive</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>a3ff532cf37c76af2bd2180de87d5d4b4</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>acc12ce460d2a3327fac056ec5ad2343a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPrimitiveVariable</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>afeb31b06fbfddd180c1f4ba5092b54e3</anchor>
      <arglist>(const std::string &amp;name, const IECore::PrimitiveVariable &amp;primVar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>af6a5284f56689ac2ef2f6bf09cef9e25</anchor>
      <arglist>(const State *state, IECore::TypeId style) const </arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; GLPointsUsage, PointsPrimitiveUseGLPointsTypeId &gt;</type>
      <name>UseGLPoints</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>afa762ab678163760b8d74ace3c55d599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; float, PointsPrimitiveGLPointWidthTypeId &gt;</type>
      <name>GLPointWidth</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>a843a487add673cfa0ddc6eaaa01410d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>a83e619dcc07c94ee3eb25900f5f271a6</anchor>
      <arglist>(UseGLPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1PointsPrimitive.html</anchorfile>
      <anchor>a9015abf0524d500c09df32518be2bd86</anchor>
      <arglist>(GLPointWidth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Primitive</name>
    <filename>classIECoreGL_1_1Primitive.html</filename>
    <base>IECoreGL::Renderable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a726a6f07779972c8f0f7f71732f2abb3</anchor>
      <arglist>(IECoreGL::Primitive, PrimitiveTypeId, Renderable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a575b48b900d92391fc1202539b9cae63</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPrimitiveVariable</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ab562cda7f6abe52251cb06f57f21b398</anchor>
      <arglist>(const std::string &amp;name, const IECore::PrimitiveVariable &amp;primVar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a50e75a222d2296bf2d852069f6e19f1b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a20c2bae7f9a849aac0ea577996a6846e</anchor>
      <arglist>(const State *state, IECore::TypeId style) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVertexAttribute</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a9d500ae0ab75fdb42686b8a68145f1cc</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addUniformAttribute</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>adabf20ebad76dc9355101c9a0fce27a0</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::TypedData&lt; T &gt;::ConstPtr</type>
      <name>getUniformAttribute</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a01cfd950d6cb6a729a66f5b0bd8b4564</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::TypedData&lt; std::vector&lt; T &gt; &gt;::ConstPtr</type>
      <name>getVertexAttribute</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a92089c413fddccf4893c9cdc299d3e21</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexAttributes</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a99f7c9d4e217f9d63a0b6f28f990593d</anchor>
      <arglist>(unsigned length) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexAttributesAsUniforms</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a420c8c2347edd1231af9669fd553a388</anchor>
      <arglist>(unsigned length, unsigned int vertexIndex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>depthSortRequested</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a65c46c13743926b5d1553a753ee8699f</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupVertexAttributes</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>aaaa1e951cf80707cabe36f6f9b699cd9</anchor>
      <arglist>(Shader *s) const </arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitiveBoundTypeId &gt;</type>
      <name>DrawBound</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ad73ad369779800158eec32c51a8781a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitiveWireframeTypeId &gt;</type>
      <name>DrawWireframe</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a9054bb212f65ed2c4f0cdefa3b1c75a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; float, PrimitiveWireframeWidthTypeId &gt;</type>
      <name>WireframeWidth</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a1e7ca9d7aa9fd1de3017c61887fac812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitiveSolidTypeId &gt;</type>
      <name>DrawSolid</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ab2bde3d92b09f2e2a330670509c8591a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitiveOutlineTypeId &gt;</type>
      <name>DrawOutline</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a07a7f8632a588ae82423500d68d54a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; float, PrimitiveOutlineWidthTypeId &gt;</type>
      <name>OutlineWidth</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a35122629c72a88f41d8854ac2a7da563</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitivePointsTypeId &gt;</type>
      <name>DrawPoints</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a65bf0205e1fc2deb0fd73019370f40e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; float, PrimitivePointWidthTypeId &gt;</type>
      <name>PointWidth</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>aad915498de8512c3de1c29daa8eefdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypedStateComponent&lt; bool, PrimitiveTransparencySortStateComponentTypeId &gt;</type>
      <name>TransparencySort</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>aca875b60d2b33db56a412579d585c7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a64a55f814f937a3c54df195526b2c05e</anchor>
      <arglist>(DrawBound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ad4593f419b8f6c4af629a9cbe28c6a7c</anchor>
      <arglist>(DrawWireframe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a13042f911d859f166c82223ce81f027c</anchor>
      <arglist>(WireframeWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ae6168dbc0ca83e6877210942e44bac82</anchor>
      <arglist>(DrawSolid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ace06ffad28416eef1de10988afe99c48</anchor>
      <arglist>(DrawOutline)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a1dc54b2c77eb3f29bc21b977d0a03e5b</anchor>
      <arglist>(OutlineWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>afcb291f257e05d3f9653df4ccd54b276</anchor>
      <arglist>(DrawPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>a5f1ab2175a20891649d9695e74edbc51</anchor>
      <arglist>(PointWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>classIECoreGL_1_1Primitive.html</anchorfile>
      <anchor>ab5d57ea318971867d83db700555a9067</anchor>
      <arglist>(TransparencySort)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Renderable</name>
    <filename>classIECoreGL_1_1Renderable.html</filename>
    <base>IECore::RunTimeTyped</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Renderable.html</anchorfile>
      <anchor>a630581d94a05d19313f225a648ab7249</anchor>
      <arglist>(IECoreGL::Renderable, RenderableTypeId, IECore::RunTimeTyped)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classIECoreGL_1_1Renderable.html</anchorfile>
      <anchor>a991a13856d697d4ac5c1d1ce87f27a31</anchor>
      <arglist>(const State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECoreGL_1_1Renderable.html</anchorfile>
      <anchor>a347919a5d74f2df61f9bffe82490bdf2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Renderer</name>
    <filename>classIECoreGL_1_1Renderer.html</filename>
    <base>IECore::Renderer</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a23680dfb3a74d0c59629a88af1ee6e38</anchor>
      <arglist>(IECoreGL::Renderer, RendererTypeId, IECore::Renderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a3615f6f7c8edd15173a8c51b142cd32d</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ConstDataPtr</type>
      <name>getOption</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ad4dfe3583b3fd1377f4fd3a56133222d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>camera</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a7813f096d75df0e6341f2129c7706b74</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a7092ff8679776ee1218c451ac0b003c2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;data, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldBegin</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a34105398ff19bb8267e585b47abfe1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldEnd</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a81b7a428f1d7d9feecbd208f1e6eb93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScenePtr</type>
      <name>scene</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a472903d90b68dbffc1cc0e7e6df56cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformBegin</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a366d44018791c93e3049f87b94d7c99a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformEnd</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>aa8344717cb99ff7cf8833c541e644684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ab8d1bb3f5dc8794b53a26fe47469ff2b</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a8c3962236748aa6efa8e0f0e9017267a</anchor>
      <arglist>(const std::string &amp;coordinateSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a2d9a27526b0d686611686a870d9a007c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a8b9603fd18b1739dcb03fd735a07b330</anchor>
      <arglist>(const std::string &amp;coordinateSystem) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concatTransform</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>af6d647ef064d75962f78b8c9f3ac5b1b</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coordinateSystem</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a86c5d85db533319b0df9c2a642ce8951</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeBegin</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a1702c699dc0e41341f252ab7f8cacf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeEnd</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ad4ab5f30408dadb8b3e3b011d33ea295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a9b625028a444229dd7e9785b3b6ffd50</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ConstDataPtr</type>
      <name>getAttribute</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a4f9dd909e3ba8123a48cadd4e0219911</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shader</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ac6134c40f82af161fcb95ec2a8a68068</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>light</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>afd092850db1f1f1747414f9d5b4ca4a6</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;handle, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>illuminate</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>afbb11ad3ac33e311fe7a86ccff14598b</anchor>
      <arglist>(const std::string &amp;lightHandle, bool on)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionBegin</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>aa7b461b99a59a7802e90584aa15723cd</anchor>
      <arglist>(const std::set&lt; float &gt; &amp;times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionEnd</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a87b230e64de868cde14245016251f3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>points</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a73a9c38b0646edfd9b4124851c28c122</anchor>
      <arglist>(size_t numPoints, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disk</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a1f96f4eba40e94158ba76fe0392398ba</anchor>
      <arglist>(float radius, float z, float thetaMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>curves</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a2921243530c8ae0ba27508064b0969b6</anchor>
      <arglist>(const IECore::CubicBasisf &amp;basis, bool periodic, IECore::ConstIntVectorDataPtr numVertices, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>text</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a9b1340575f565f6b6c07ca1b3c82fa0d</anchor>
      <arglist>(const std::string &amp;font, const std::string &amp;text, float kerning=1.0f, const IECore::PrimitiveVariableMap &amp;primVars=IECore::PrimitiveVariableMap())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sphere</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ab5cd828707163f7600e78925e973a5fe</anchor>
      <arglist>(float radius, float zMin, float zMax, float thetaMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>image</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a2f72abed36e005957ace5b0134bf407b</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mesh</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ac400555b5fa076f374b9ce54b48817f0</anchor>
      <arglist>(IECore::ConstIntVectorDataPtr vertsPerFace, IECore::ConstIntVectorDataPtr vertIds, const std::string &amp;interpolation, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nurbs</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ac3f520bb7e54c20ddfa5ea0f096e866e</anchor>
      <arglist>(int uOrder, IECore::ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, IECore::ConstFloatVectorDataPtr vKnot, float vMin, float vMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>patchMesh</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a184a166e2917b530bfc253b3fb3a9f78</anchor>
      <arglist>(const IECore::CubicBasisf &amp;uBasis, const IECore::CubicBasisf &amp;vBasis, int nu, bool uPeriodic, int nv, bool vPeriodic, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>geometry</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a5568e3614f93fd7ec1cdb3f29387593f</anchor>
      <arglist>(const std::string &amp;type, const IECore::CompoundDataMap &amp;topology, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>procedural</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a5d0ca2857df7cd8a958a9ed3d68916da</anchor>
      <arglist>(IECore::Renderer::ProceduralPtr proc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceBegin</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>ac672c2299eedc9d26f054a3dd225f167</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceEnd</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>af9a0f751da42f4fa012cacc4f4442bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instance</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a9ab720df63b3dc34284f73af94c23002</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::DataPtr</type>
      <name>command</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>a67587c2ea783f2a0029341b2ce05cfe6</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>ShaderManager *</type>
      <name>shaderManager</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>aeb1886b0cb925c8681a692b2135dd8e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TextureLoader *</type>
      <name>textureLoader</name>
      <anchorfile>classIECoreGL_1_1Renderer.html</anchorfile>
      <anchor>aae8ca21f4b6e0bb05c1e4a29c97100ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::SceneViewer</name>
    <filename>classIECoreGL_1_1SceneViewer.html</filename>
    <base>IECoreGL::Window</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>ac7517893bc1a717a4dc0f356d154a96a</anchor>
      <arglist>(SceneViewer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SceneViewer</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>a31eb457f7e310f46c17dbb17928c1143</anchor>
      <arglist>(const std::string &amp;title, ScenePtr scene)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reshape</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>a88e17e23b3ab688e89a3ca9c179c29e0</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>a0d69c8f03014c16325fc9e5ea62d3068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>motion</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>a9a6ca06d7261a8662706b5a092b9b564</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>keyboard</name>
      <anchorfile>classIECoreGL_1_1SceneViewer.html</anchorfile>
      <anchor>a741a75e311c2e2367988f6c1ed746d9a</anchor>
      <arglist>(unsigned char key, int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Shader</name>
    <filename>classIECoreGL_1_1Shader.html</filename>
    <base>IECoreGL::Bindable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a4e7a8a71d6633927175b9d56f2d84d4a</anchor>
      <arglist>(IECoreGL::Shader, ShaderTypeId, Bindable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shader</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a419abf697453a4abda11fb887de28aa9</anchor>
      <arglist>(const std::string &amp;vertexSource, const std::string &amp;fragmentSource)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a1ead69dead641b13431288fc8e797abf</anchor>
      <arglist>(const Shader &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>aef1ad01d07573c56d6135be18027e608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformParameterNames</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a045d1d76de0fff1b9004c8b2b466a8ce</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>uniformParameterIndex</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a57f96adc255f9308f708212b4acedce8</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a8bb6e046c0c84d3664e3b4dd5a7b8877</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::TypeId</type>
      <name>uniformParameterType</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>af1294cfcf9fa9c128413be0a3e66bf2f</anchor>
      <arglist>(GLint parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::TypeId</type>
      <name>uniformParameterType</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a3c60e97d0d971f0df53fbc6652712d31</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertexParameterNames</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ac5ccdf1fabbeb45de97bcb9684570b36</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names) const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>vertexParameterIndex</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ac6f0cb63d750bda1eff8e76b820b800e</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVertexParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a9c946684cd5a1ee1752bbf5219e03ace</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>aeff90c5c585545a615909b2fa357ac3e</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>af5be188ccf642efb3adb89dad4c5f22b</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a446ea1095492b6191e353df01d3f5157</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *value, bool normalize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ae73b23d1535c5a283dcf365ae2295a38</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *value, bool normalize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetVertexParameters</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>af73d0fdc740a044077a6daa7d2bd7ddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>getUniformParameterDefault</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>af8546108a19a57fb0760c385d740ec20</anchor>
      <arglist>(GLint parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>getUniformParameterDefault</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a8fd053c5aa683615c8413d1527f10587</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>getUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a8296d9c9ade06edb9565812dfffad012</anchor>
      <arglist>(GLint parameterIndex) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>getUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>aefe7755224a448e00d3a7745da45ba61</anchor>
      <arglist>(const std::string &amp;parameterName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a21bd15bca3c4f36c7d5a87f35df90fd0</anchor>
      <arglist>(GLint parameterIndex, IECore::TypeId type) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ad29a9044aa9fa20fbcc4906242579a8d</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ac921c3e5933473ccfff1379ceb16a83a</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a7ea49a456eec79af25ec464b8af33e90</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *value)</arglist>
    </member>
    <member kind="function">
      <type>boost::disable_if_c&lt; boost::is_convertible&lt; T, IECore::Data * &gt;::value &gt;::type</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a7cc614ecd21427002d69d61eeea0622d</anchor>
      <arglist>(GLint parameterIndex, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a9c3d244de16b34e65b5bb89b9091681d</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a208add79b7e19021c19d5deba802b7b7</anchor>
      <arglist>(GLint parameterIndex, unsigned int textureUnit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a74bfaec9ee0b7c942e062da960be50c9</anchor>
      <arglist>(const std::string &amp;parameterName, unsigned int textureUnit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a4f3e729c348d662784772dca9ce8e914</anchor>
      <arglist>(GLint parameterIndex, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameter</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>aa0daf1250d34c00d7b5a350de8241eea</anchor>
      <arglist>(const std::string &amp;parameterName, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformVectorValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a1b669db0b38ac64613a18e44e7e3e508</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformVectorValueValid</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a17a3497a3b66f9a90ca02d86e677f903</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameterFromVector</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a239e2e3b5cc7cbf5e74161ed7c87218d</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *vector, unsigned int item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformParameterFromVector</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ad5eaae33a6b6ff30449f038cb5329323</anchor>
      <arglist>(const std::string &amp;parameterName, const IECore::Data *vector, unsigned int item)</arglist>
    </member>
    <member kind="function">
      <type>VertexToUniform</type>
      <name>uniformParameterFromVectorSetup</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a8b8389dd8c698f7d1c4e4b5e876522ee</anchor>
      <arglist>(GLint parameterIndex, const IECore::Data *vector) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderPtr</type>
      <name>constant</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>a2fca083e618ae268a97d01b2df2243d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderPtr</type>
      <name>facingRatio</name>
      <anchorfile>classIECoreGL_1_1Shader.html</anchorfile>
      <anchor>ac845edb13a441766d7b87ef9c40cc987</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ShaderManager</name>
    <filename>classIECoreGL_1_1ShaderManager.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>aca01722199643e235b39b2153026c2b9</anchor>
      <arglist>(ShaderManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShaderManager</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a7a728753c204014b0bdd67f509f3208b</anchor>
      <arglist>(const IECore::SearchPath &amp;searchPaths, const IECore::SearchPath *preprocessorSearchPaths=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadShaderCode</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a6b2a23b735d205dade0c4ca56586ef09</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;vertexShader, std::string &amp;fragmentShader) const </arglist>
    </member>
    <member kind="function">
      <type>ShaderPtr</type>
      <name>create</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a0b2656ae0d3214f0092ebd012f26e01f</anchor>
      <arglist>(const std::string &amp;vertexShader, const std::string &amp;fragmentShader)</arglist>
    </member>
    <member kind="function">
      <type>ShaderPtr</type>
      <name>load</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a72c595fd2804e4429f0ccb5d3a1e73c3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearUnused</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a4291042edaeb6c92840ff081abcae061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderManagerPtr</type>
      <name>defaultShaderManager</name>
      <anchorfile>classIECoreGL_1_1ShaderManager.html</anchorfile>
      <anchor>a12afd36e42eeea96deac035749f4d1b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ShaderStateComponent</name>
    <filename>classIECoreGL_1_1ShaderStateComponent.html</filename>
    <base>IECoreGL::StateComponent</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a4c8d2ffa08355977d236e463367ba128</anchor>
      <arglist>(IECoreGL::ShaderStateComponent, ShaderStateComponentTypeId, StateComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShaderStateComponent</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a86ec8cc9821b162aae5110b161e6e06a</anchor>
      <arglist>(const ShaderStateComponent &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShaderStateComponent</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>acb99f49728ec346179caefede7cb455d</anchor>
      <arglist>(ShaderManagerPtr shaderManager, TextureLoaderPtr textureLoader, const std::string vertexShader, const std::string fragmentShader, IECore::ConstCompoundObjectPtr parameterValues=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShaderParameterValue</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>ab39536a8d672bc008e256e3be7d71c89</anchor>
      <arglist>(const std::string &amp;paramName, IECore::ConstObjectPtr paramValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>aedf3d65726a9e85868aed47054b51513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ShaderPtr</type>
      <name>shader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a5ddb34a9c8d01f73ef91222312cecbf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ShaderPtr</type>
      <name>shader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a5bdca4181bcc5bc883e998ade03cda2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, ConstTexturePtr &gt;</type>
      <name>TexturesMap</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a64f98edfe5ce5bb3d63f3e5e036c3c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ShaderManagerPtr</type>
      <name>m_shaderManager</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a4a090c20eaf7a597c2342d1c882922a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TextureLoaderPtr</type>
      <name>m_textureLoader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>aa741b2c209f52b21b01ccc017ca640d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_fragmentShader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a2ef3611a4fffc82211afc7a4f0ddcb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_vertexShader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a32d8a749e93ce202852693d36fc1b9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::CompoundObjectPtr</type>
      <name>m_parameterMap</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>af22b8a4e7217bdb7305ce730a1a9d3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ShaderPtr</type>
      <name>m_shader</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a2fab0821151f62bae5c22ca3d7206fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::string &gt;</type>
      <name>m_dirtyTextures</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a5e6e73bd964cb1689a811fb0e2ef082a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TexturesMap</type>
      <name>m_textureParameters</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a0daff868c6aa8315ef56bd9870911ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description&lt; ShaderStateComponent &gt;</type>
      <name>g_description</name>
      <anchorfile>classIECoreGL_1_1ShaderStateComponent.html</anchorfile>
      <anchor>a813fdf2ee7c1c2e4147cf27187bc2b98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::SplineToGLTextureConverter</name>
    <filename>classIECoreGL_1_1SplineToGLTextureConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1SplineToGLTextureConverter.html</anchorfile>
      <anchor>af5e5183ba7b2244f2506df00886c1adc</anchor>
      <arglist>(IECoreGL::SplineToGLTextureConverter, SplineToGLTextureConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineToGLTextureConverter</name>
      <anchorfile>classIECoreGL_1_1SplineToGLTextureConverter.html</anchorfile>
      <anchor>a4df807f43f205bee8113e478f65753e5</anchor>
      <arglist>(IECore::ConstObjectPtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1SplineToGLTextureConverter.html</anchorfile>
      <anchor>ade5ba563fe46cc23cb4740e1d89b5687</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::V2iParameterPtr</type>
      <name>m_resolutionParameter</name>
      <anchorfile>classIECoreGL_1_1SplineToGLTextureConverter.html</anchorfile>
      <anchor>a01480c7c4f5cb9b0d61884a6147bac26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::StateComponent</name>
    <filename>classIECoreGL_1_1StateComponent.html</filename>
    <base>IECoreGL::Bindable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1StateComponent.html</anchorfile>
      <anchor>a48c8558b97f2005aa36425172d50c86f</anchor>
      <arglist>(IECoreGL::StateComponent, StateComponentTypeId, Bindable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Texture</name>
    <filename>classIECoreGL_1_1Texture.html</filename>
    <base>IECoreGL::Bindable</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>ac83536ca1e6bf26507bb87c3569ea582</anchor>
      <arglist>(IECoreGL::Texture, TextureTypeId, Bindable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>ad75188b16cdf65d55199f0ee12a87623</anchor>
      <arglist>(GLuint texture)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>ab8ed0bbc29cbaf6283a29e5411498332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ImagePrimitivePtr</type>
      <name>imagePrimitive</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>a6ba9b7f6b119a8d977785edfadcaa99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLuint</type>
      <name>m_texture</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>a2c6601be17b6048e32680ba1dd98ed20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FrameBuffer</name>
      <anchorfile>classIECoreGL_1_1Texture.html</anchorfile>
      <anchor>a7e815028687ed9f9e9e25851d8a17b27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::TextureLoader</name>
    <filename>classIECoreGL_1_1TextureLoader.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreGL_1_1TextureLoader.html</anchorfile>
      <anchor>aa5d431852b521a728a000d80b2cf23ce</anchor>
      <arglist>(TextureLoader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextureLoader</name>
      <anchorfile>classIECoreGL_1_1TextureLoader.html</anchorfile>
      <anchor>a8f7c74fa73afacbcc926d07f2a8b08d2</anchor>
      <arglist>(const IECore::SearchPath &amp;searchPaths)</arglist>
    </member>
    <member kind="function">
      <type>TexturePtr</type>
      <name>load</name>
      <anchorfile>classIECoreGL_1_1TextureLoader.html</anchorfile>
      <anchor>aa0bc8e031060fc1f38d6d0dde8d02176</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIECoreGL_1_1TextureLoader.html</anchorfile>
      <anchor>a977e65035fbc04123a78f0ef5e798363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureLoaderPtr</type>
      <name>defaultTextureLoader</name>
      <anchorfile>classIECoreGL_1_1TextureLoader.html</anchorfile>
      <anchor>a5a65a75e4178e9174fbaaf85c451616b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLCameraConverter</name>
    <filename>classIECoreGL_1_1ToGLCameraConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLCameraConverter.html</anchorfile>
      <anchor>a75e8c552cd6432b2ae04243c6821da3c</anchor>
      <arglist>(IECoreGL::ToGLCameraConverter, ToGLCameraConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToGLCameraConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLCameraConverter.html</anchorfile>
      <anchor>a6c288f247cc67b7c6ff315f1201df935</anchor>
      <arglist>(IECore::ConstCameraPtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLCameraConverter.html</anchorfile>
      <anchor>aabd44491ad0b153b28f4fe2c06c44be3</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLConverter</name>
    <filename>classIECoreGL_1_1ToGLConverter.html</filename>
    <base>IECore::FromCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLConverter.html</anchorfile>
      <anchor>a03622013dc07d42050fe024bb8afc9ca</anchor>
      <arglist>(IECoreGL::ToGLConverter, ToGLConverterTypeId, IECore::FromCoreConverter)</arglist>
    </member>
    <member kind="function">
      <type>IECore::RunTimeTypedPtr</type>
      <name>convert</name>
      <anchorfile>classIECoreGL_1_1ToGLConverter.html</anchorfile>
      <anchor>a50b970a534d5c25bee8ab4cf13984449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToGLConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLConverter.html</anchorfile>
      <anchor>a105444878ef6a3c12fa2acd786179de3</anchor>
      <arglist>(const std::string &amp;description, IECore::TypeId supportedType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLConverter.html</anchorfile>
      <anchor>a8eddd90cdcf539f0a7150dce617a59fd</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLCurvesConverter</name>
    <filename>classIECoreGL_1_1ToGLCurvesConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLCurvesConverter.html</anchorfile>
      <anchor>ab72b9344e28c2f035fb721f4b5b9c92b</anchor>
      <arglist>(IECoreGL::ToGLCurvesConverter, ToGLCurvesConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToGLCurvesConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLCurvesConverter.html</anchorfile>
      <anchor>afc5a7d4cc7c723f1746bdb90d452cffa</anchor>
      <arglist>(IECore::ConstCurvesPrimitivePtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLCurvesConverter.html</anchorfile>
      <anchor>ad81560d46544d47dd1d37a9cd46e6f61</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLMeshConverter</name>
    <filename>classIECoreGL_1_1ToGLMeshConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLMeshConverter.html</anchorfile>
      <anchor>a10a498397a01e2fce3e07a112b79eefe</anchor>
      <arglist>(IECoreGL::ToGLMeshConverter, ToGLMeshConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToGLMeshConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLMeshConverter.html</anchorfile>
      <anchor>aeed14e53897dfc82a54a550c226e9fea</anchor>
      <arglist>(IECore::ConstMeshPrimitivePtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLMeshConverter.html</anchorfile>
      <anchor>a226ecdb793def6c27108226725866b5d</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLPointsConverter</name>
    <filename>classIECoreGL_1_1ToGLPointsConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLPointsConverter.html</anchorfile>
      <anchor>ac354fe0b3b398fbd4b5042c31b8249e5</anchor>
      <arglist>(IECoreGL::ToGLPointsConverter, ToGLPointsConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToGLPointsConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLPointsConverter.html</anchorfile>
      <anchor>a726628ab9a516aeb77853e259a5e8d32</anchor>
      <arglist>(IECore::ConstPointsPrimitivePtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLPointsConverter.html</anchorfile>
      <anchor>ae58afb60cdf68ff78f589f2001cb530c</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::ToGLTextureConverter</name>
    <filename>classIECoreGL_1_1ToGLTextureConverter.html</filename>
    <base>IECoreGL::ToGLConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreGL_1_1ToGLTextureConverter.html</anchorfile>
      <anchor>a0e0859faf6f6564eeb22536b7bbb5ffe</anchor>
      <arglist>(IECoreGL::ToGLTextureConverter, ToGLTextureConverterTypeId, ToGLConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToGLTextureConverter</name>
      <anchorfile>classIECoreGL_1_1ToGLTextureConverter.html</anchorfile>
      <anchor>a5513cf38bc664ffe7dce4b0c9b9bfded</anchor>
      <arglist>(IECore::ConstObjectPtr toConvert=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreGL_1_1ToGLTextureConverter.html</anchorfile>
      <anchor>ac12ae450cc63e17df031d80fc70a88e1</anchor>
      <arglist>(IECore::ConstObjectPtr src, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreGL::Window</name>
    <filename>classIECoreGL_1_1Window.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>Window</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a92302aef2ab48b0eb640e38c1129274a</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTitle</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a988aaca1c4a7ee912dd57783d4da7358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a439eee9d830aaf657b1903854b749117</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisibility</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a6f83876309be5598eff40ba6d9a05c63</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVisibility</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>af5c7de76896170754540080d84f6daa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>start</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a0f037a7ff131fd2c8d639cc631648b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postRedisplay</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a01531c509b023b4dae5275c626352b4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>mouseDown</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>abac3fbd259f56af6b47ca7ee8112c802</anchor>
      <arglist>(int button) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Imath::V2i</type>
      <name>lastMouseClickPosition</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>ad1fb627b9f1181df4f4dde33e5eff238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Imath::V2i</type>
      <name>lastMouseDragPosition</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a59b099a3ed0a92f4fdcee05796752561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reshape</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>ae9ed0b4eedbf8e481e631432475892fa</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>ae68d32d6c1080428db0d73497ea1e53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mouse</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>ae1e35ee69e197f783418adba7ecde679</anchor>
      <arglist>(int button, int state, int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>motion</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a640de8e8c95e5aa4bc90052a37678eeb</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>passiveMotion</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a939c8f2ae98bc03f0283dfdb8d21846d</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>keyboard</name>
      <anchorfile>classIECoreGL_1_1Window.html</anchorfile>
      <anchor>a759abadadf439d8ba80e6ba0caf7a42e</anchor>
      <arglist>(unsigned char key, int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IECoreHoudini</name>
    <filename>namespaceIECoreHoudini.html</filename>
    <class kind="class">IECoreHoudini::FromHoudiniConverter</class>
    <class kind="class">IECoreHoudini::FromHoudiniCurvesConverter</class>
    <class kind="class">IECoreHoudini::RemappingInfo</class>
    <class kind="class">IECoreHoudini::FromHoudiniGeometryConverter</class>
    <class kind="class">IECoreHoudini::FromHoudiniGroupConverter</class>
    <class kind="class">IECoreHoudini::FromHoudiniPointsConverter</class>
    <class kind="class">IECoreHoudini::FromHoudiniPolygonsConverter</class>
    <class kind="class">IECoreHoudini::GEO_CobIOTranslator</class>
    <class kind="class">IECoreHoudini::GR_Cortex</class>
    <class kind="class">IECoreHoudini::NodeHandle</class>
    <class kind="class">IECoreHoudini::NodePassData</class>
    <class kind="class">IECoreHoudini::RATDeepImageReader</class>
    <class kind="class">IECoreHoudini::RATDeepImageWriter</class>
    <class kind="class">IECoreHoudini::SOP_InterpolatedCacheReader</class>
    <class kind="class">IECoreHoudini::SOP_OpHolder</class>
    <class kind="class">IECoreHoudini::SOP_ParameterisedHolder</class>
    <class kind="class">IECoreHoudini::SOP_ProceduralHolder</class>
    <class kind="class">IECoreHoudini::SOP_ToHoudiniConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniAttribConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniCurvesConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniGeometryConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniGroupConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniNumericVectorAttribConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniNumericDetailAttribConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniPointsConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniPolygonsConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniStringVectorAttribConverter</class>
    <class kind="class">IECoreHoudini::ToHoudiniStringDetailAttribConverter</class>
    <class kind="class">IECoreHoudini::TestCase</class>
    <class kind="class">IECoreHoudini::TestProgram</class>
    <class kind="class">IECoreHoudini::ActiveTake</class>
    <class kind="class">IECoreHoudini::TemporaryParameterValues</class>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::FloatVectorData &gt;</type>
      <name>ToHoudiniFloatVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a2a3d18a24e4d89bc840af03879a93858</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::V2fVectorData &gt;</type>
      <name>ToHoudiniV2fVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a50127e7d30eab5f2f8326d6593f9ac6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::V3fVectorData &gt;</type>
      <name>ToHoudiniV3fVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a15aae9d47472da91f8b398b7617012d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::Color3fVectorData &gt;</type>
      <name>ToHoudiniColor3fVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a93f706832596bb19c29fcf2b4772f43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::IntVectorData &gt;</type>
      <name>ToHoudiniIntVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>aedfad06efda07af19ee9402e5ddda000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::V2iVectorData &gt;</type>
      <name>ToHoudiniV2iVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a09bbb351c88916d38da488849c71b6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericVectorAttribConverter&lt; IECore::V3iVectorData &gt;</type>
      <name>ToHoudiniV3iVectorAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a7185922bf1ae4445cbfc92ff85bfd257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::FloatData &gt;</type>
      <name>ToHoudiniFloatDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a070fd0b8faba12c689842d0a4be1291e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::V2fData &gt;</type>
      <name>ToHoudiniV2fDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>aba652694921eca8e0d88cfd670f88533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::V3fData &gt;</type>
      <name>ToHoudiniV3fDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a82aac5f27914ac345819e99267cd3995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::Color3fData &gt;</type>
      <name>ToHoudiniColor3fDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a2e432a349c32fcb63603817b78770bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::IntData &gt;</type>
      <name>ToHoudiniIntDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a576c0b97f19647005ad86181e0317951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::V2iData &gt;</type>
      <name>ToHoudiniV2iDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>af16023a5bfcd9a289c8b995f4499c74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ToHoudiniNumericDetailAttribConverter&lt; IECore::V3iData &gt;</type>
      <name>ToHoudiniV3iDetailAttribConverter</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>ac0820fd27992b52443b6426087b06e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TypeId</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a1aa2ce1988a61353b8a8377660c64740</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a47b5952c43ef1e524d2850924e8cdc2e</anchor>
      <arglist>(FromHoudiniConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a4d3682452d28d9b8a010abbabe56ef9d</anchor>
      <arglist>(FromHoudiniCurvesConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a069c993cda7eb9437d7648e2f63a2c3e</anchor>
      <arglist>(FromHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a56777d79bb6949a0ec03fd46ada71735</anchor>
      <arglist>(FromHoudiniGroupConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>add4f562fa9debc81d89a34cb124df414</anchor>
      <arglist>(FromHoudiniPointsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>ad8f1038d7c1e45316bb2b6eb9bd0c546</anchor>
      <arglist>(FromHoudiniPolygonsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a5a7ec2fb423a42719916ce5133f9d992</anchor>
      <arglist>(RATDeepImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>afe4a422f8538b603c63c91cb221f7217</anchor>
      <arglist>(RATDeepImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a8d1c577dcfb76e7e7d1b0c92aaab9ee4</anchor>
      <arglist>(ToHoudiniAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a19d1bc74edeb401866b0ab00d2640642</anchor>
      <arglist>(ToHoudiniConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a2d0981de9feb306df6047e49eb4fbf3b</anchor>
      <arglist>(ToHoudiniCurvesConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a0af0bf44900b9a1de687e5ff0736c169</anchor>
      <arglist>(ToHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a618bd20ee832d347ff92469c960dd73a</anchor>
      <arglist>(ToHoudiniGroupConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a87d109bf49e455be4a0db4442be62d46</anchor>
      <arglist>(ToHoudiniPointsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a1c4b7d4b4fb52fdef1da2c8f1a73056e</anchor>
      <arglist>(ToHoudiniPolygonsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a07a6417171dab47c99e88d5fbe3f7b9e</anchor>
      <arglist>(ToHoudiniStringVectorAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreHoudini.html</anchorfile>
      <anchor>a6aab0063bf3c03e6ff8eb9ed56938677</anchor>
      <arglist>(ToHoudiniStringDetailAttribConverter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniConverter.html</filename>
    <base>IECore::ToCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniConverter.html</anchorfile>
      <anchor>a4adc952790dc5e36d53ddd2a618d4504</anchor>
      <arglist>(FromHoudiniConverter, FromHoudiniConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromHoudiniConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniConverter.html</anchorfile>
      <anchor>a271289649634b89e091c4f40ed5b9f27</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniCurvesConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</filename>
    <base>IECoreHoudini::FromHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</anchorfile>
      <anchor>ab5fefd118f76c352be60503710475e70</anchor>
      <arglist>(FromHoudiniCurvesConverter, FromHoudiniCurvesConverterTypeId, IECoreHoudini::FromHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniCurvesConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</anchorfile>
      <anchor>ab90ead8ef7a42ef4791d15a7f964cf99</anchor>
      <arglist>(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniCurvesConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</anchorfile>
      <anchor>a15d08ab157442ee26f43a2cdd8405e05</anchor>
      <arglist>(const SOP_Node *sop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverter::Convertability</type>
      <name>canConvert</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</anchorfile>
      <anchor>a4ff779c2a20bb039414cb5fdaaa444ed</anchor>
      <arglist>(const GU_Detail *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniCurvesConverter.html</anchorfile>
      <anchor>a372e8540174f139600ba3f980d015ae5</anchor>
      <arglist>(const GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::RemappingInfo</name>
    <filename>classIECoreHoudini_1_1RemappingInfo.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classIECoreHoudini_1_1RemappingInfo.html</anchorfile>
      <anchor>a828ff39de148030775cb0144ae268ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IECore::TypeId</type>
      <name>type</name>
      <anchorfile>classIECoreHoudini_1_1RemappingInfo.html</anchorfile>
      <anchor>a7691b8daf3a8cf45e4fb916fb6e512aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IECore::PrimitiveVariable::Interpolation</type>
      <name>interpolation</name>
      <anchorfile>classIECoreHoudini_1_1RemappingInfo.html</anchorfile>
      <anchor>aee24b7ada76fcc72210d7b19c0cc0e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset</name>
      <anchorfile>classIECoreHoudini_1_1RemappingInfo.html</anchorfile>
      <anchor>af387109667a4e82425ad123afb47fa7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniGeometryConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</filename>
    <base>IECoreHoudini::FromHoudiniConverter</base>
    <class kind="class">IECoreHoudini::FromHoudiniGeometryConverter::Description</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a6ca9885fbfc5b05ecade46a2ffe19a83</anchor>
      <arglist>(FromHoudiniGeometryConverter, FromHoudiniGeometryConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a89a2f27270d8dbaa2acb5858178dd87d</anchor>
      <arglist>(const GU_DetailHandle &amp;handle, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>aae1c241efda5185483599152035274d0</anchor>
      <arglist>(const GU_DetailHandle &amp;handle, const std::set&lt; IECore::TypeId &gt; &amp;resultTypes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a6ab03cd133e4afd287bd747f71164e36</anchor>
      <arglist>(const SOP_Node *sop, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FromHoudiniGeometryConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ac4bc9bcae86f9e22b89a7e17be4e135a</anchor>
      <arglist>)(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Convertability(*</type>
      <name>ConvertabilityFn</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a6b0f7f12cc363c0cded681a7a40a2e73</anchor>
      <arglist>)(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UT_PtrArray&lt; const GEO_Vertex * &gt;</type>
      <name>VertexList</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ab1481bf6cd299bebd643a73bde67c7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, std::vector&lt; RemappingInfo &gt; &gt;</type>
      <name>MappingMap</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a9cde6d2c5d9939072b53838d1c7940b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; RemappingInfo::AttrType, MappingMap &gt;</type>
      <name>AttributeRemapping</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ae7d963e863585669904f22940d843362</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromHoudiniGeometryConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a004264d1cc39eece6eb522321fe06e7e</anchor>
      <arglist>(const GU_DetailHandle &amp;handle, const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromHoudiniGeometryConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ab7dd89a37d9c347c892ed290bda2351d</anchor>
      <arglist>(const SOP_Node *sop, const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>aece8ccaa2b02c824698f5f40bf505ed3</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a6709fc32e16390bd68d4565503ea9c14</anchor>
      <arglist>(const GU_Detail *geo) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GU_DetailHandle &amp;</type>
      <name>handle</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a3a3477ab2e132381881455ed1e520c70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferAttribs</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a1163a682ba93a3ee9ff3a6a7bf2ced7f</anchor>
      <arglist>(const GU_Detail *geo, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation vertexInterpolation=IECore::PrimitiveVariable::FaceVarying, IECore::PrimitiveVariable::Interpolation primitiveInterpolation=IECore::PrimitiveVariable::Uniform, IECore::PrimitiveVariable::Interpolation pointInterpolation=IECore::PrimitiveVariable::Vertex, IECore::PrimitiveVariable::Interpolation detailInterpolation=IECore::PrimitiveVariable::Constant) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AttributeRemapping</type>
      <name>getAttributeRemapping</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ac33fe3dd6df51e812a6ca9603ac82da6</anchor>
      <arglist>(const GU_Detail *geo) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferDetailAttribs</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>ab79cd736fa46257e99d10b37f3d3d55c</anchor>
      <arglist>(const GU_Detail *geo, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation interpolation) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferPointAttribs</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a10a78eb2f9d80447359d2e6babb8f831</anchor>
      <arglist>(const GU_Detail *geo, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation interpolation, const GEO_PointList &amp;points, AttributeRemapping &amp;attribute_remap) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferPrimitiveAttribs</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a2bf528f6cdb1d13afecf41a0cd738aee</anchor>
      <arglist>(const GU_Detail *geo, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation interpolation, const GEO_PrimList &amp;primitives, AttributeRemapping &amp;attribute_remap) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferVertexAttribs</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>aa2a79502d65ba9415e6d41b6b3aa5ce6</anchor>
      <arglist>(const GU_Detail *geo, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation interpolation, const VertexList &amp;vertices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferAttribData</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a6e0ecaab603a512da998771bf2cbbc21</anchor>
      <arglist>(const Container &amp;container, IECore::Primitive *result, IECore::PrimitiveVariable::Interpolation interpolation, const GB_Attribute *attr, const GB_AttributeRef &amp;attrRef, const RemappingInfo *remap_info=0) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::DataPtr</type>
      <name>extractData</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a190f69cdf8eefd7b5b34a8754bc21fb8</anchor>
      <arglist>(const Container &amp;container, const GB_AttributeRef &amp;attrRef, int index=-1) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::DataPtr</type>
      <name>extractData</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>acb7c9882d8cf1cb74040eb891c656d8c</anchor>
      <arglist>(const GB_AttributeTable &amp;attribs, const GB_AttributeRef &amp;attrRef) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::DataPtr</type>
      <name>extractStringVectorData</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a89274f8cfca44584f1ff3901fe18869d</anchor>
      <arglist>(const Container &amp;container, const GB_Attribute *attr, const GB_AttributeRef &amp;attrRef, IECore::IntVectorDataPtr &amp;indexData) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IECore::DataPtr</type>
      <name>extractStringData</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a17cdfff22785fbf9a6017ac4f264011c</anchor>
      <arglist>(const GU_Detail *geo, const GB_Attribute *attr) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>a486d872cc33ef07840d664d688acdbd5</anchor>
      <arglist>(IECore::TypeId resultType, CreatorFn creator, ConvertabilityFn canConvert)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const GU_DetailHandle</type>
      <name>handle</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter.html</anchorfile>
      <anchor>aab4abef64a1f7dc130bbe1f8845b7631</anchor>
      <arglist>(const SOP_Node *sop)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniGeometryConverter::Description</name>
    <filename>classIECoreHoudini_1_1FromHoudiniGeometryConverter_1_1Description.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGeometryConverter_1_1Description.html</anchorfile>
      <anchor>ab7c4c4e7faa379fcec0919e9aba452b1</anchor>
      <arglist>(IECore::TypeId resultType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniGroupConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</filename>
    <base>IECoreHoudini::FromHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>a9e06be6e6e25b9c87abfa268fa7fde77</anchor>
      <arglist>(FromHoudiniGroupConverter, FromHoudiniGroupConverterTypeId, FromHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniGroupConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>ad962d22df006352b5399573631c993b4</anchor>
      <arglist>(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniGroupConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>a2840c1d4d80c9d89858535a1934e78a9</anchor>
      <arglist>(const SOP_Node *sop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverter::Convertability</type>
      <name>canConvert</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>a9f44048bddc6fda582a2f409ef6f3554</anchor>
      <arglist>(const GU_Detail *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>a3adcbbfda7adf8034d0412d17a1c074b</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniGroupConverter.html</anchorfile>
      <anchor>ab5f4d2be7c17eb405fcccd7c47c5296d</anchor>
      <arglist>(const GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniPointsConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</filename>
    <base>IECoreHoudini::FromHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</anchorfile>
      <anchor>afce1cb827eeab88880eb4b7a79a4b416</anchor>
      <arglist>(FromHoudiniPointsConverter, FromHoudiniPointsConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniPointsConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</anchorfile>
      <anchor>a123c401b15a6b93bc524b78e41500f74</anchor>
      <arglist>(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniPointsConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</anchorfile>
      <anchor>ad1c2e57c5c993216938811384e069e4d</anchor>
      <arglist>(const SOP_Node *sop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverter::Convertability</type>
      <name>canConvert</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</anchorfile>
      <anchor>a391d841a03f38a9d5a4ecab9fcb6eef2</anchor>
      <arglist>(const GU_Detail *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPointsConverter.html</anchorfile>
      <anchor>ac9ab81fc8e5834d5d05c5ed17161b6df</anchor>
      <arglist>(const GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::FromHoudiniPolygonsConverter</name>
    <filename>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</filename>
    <base>IECoreHoudini::FromHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</anchorfile>
      <anchor>a8b12299edfcf8b8686f6346bf722e843</anchor>
      <arglist>(FromHoudiniPolygonsConverter, FromHoudiniPolygonsConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniPolygonsConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</anchorfile>
      <anchor>a927ace2f3dc969ff83089c31df82cdeb</anchor>
      <arglist>(const GU_DetailHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromHoudiniPolygonsConverter</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</anchorfile>
      <anchor>a55de5395dfe9ddd8b73cbd983badcdf5</anchor>
      <arglist>(const SOP_Node *sop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromHoudiniGeometryConverter::Convertability</type>
      <name>canConvert</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</anchorfile>
      <anchor>abe3611675c75b3fc44966178dba98d0f</anchor>
      <arglist>(const GU_Detail *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreHoudini_1_1FromHoudiniPolygonsConverter.html</anchorfile>
      <anchor>acdffe9162ac32101c660519855a0c4c2</anchor>
      <arglist>(const GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::GEO_CobIOTranslator</name>
    <filename>classIECoreHoudini_1_1GEO__CobIOTranslator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>formatName</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>a13c3bd1eba5c81ed01fcb0f24b9f0571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>checkExtension</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>a052a60aa486bf52b722e6679de7caeb2</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>checkMagicNumber</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>ace4219577870cda15c9602171c11a69e</anchor>
      <arglist>(unsigned magic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>fileLoad</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>af6ac66fd3c85c04a8b19b50931135299</anchor>
      <arglist>(GEO_Detail *geo, UT_IStream &amp;is, int ate_magic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fileSave</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>a9d1bff465062e85af1f670597081becf</anchor>
      <arglist>(const GEO_Detail *geo, ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>fileSaveToFile</name>
      <anchorfile>classIECoreHoudini_1_1GEO__CobIOTranslator.html</anchorfile>
      <anchor>a85db30a6f39de2aa91592826eaf4f216</anchor>
      <arglist>(const GEO_Detail *geo, ostream &amp;os, const char *fileName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::GR_Cortex</name>
    <filename>classIECoreHoudini_1_1GR__Cortex.html</filename>
    <member kind="function">
      <type></type>
      <name>GR_Cortex</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>abdb5217732713c0d963abd06ae3542d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GR_Cortex</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a15a3b9ae21824f2067ef8ef363140bb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWireMask</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a547c82b22c97bc0b4d995b4a3105d8d2</anchor>
      <arglist>(GU_Detail *gdp, const GR_DisplayOption *dopt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getShadedMask</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a2def4bd65fb5327410cdc396c176383a</anchor>
      <arglist>(GU_Detail *gdp, const GR_DisplayOption *dopt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>renderWire</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a50bfee5c56600071e4a6c7e12bc77bbb</anchor>
      <arglist>(GU_Detail *gdp, RE_Render &amp;ren, const GR_AttribOffset &amp;ptinfo, const GR_DisplayOption *dopt, float lod, const GU_PrimGroupClosure *hidden_geometry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>renderShaded</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>aa72dd60a093f8aa84fa11f56796c19fd</anchor>
      <arglist>(GU_Detail *gdp, RE_Render &amp;ren, const GR_AttribOffset &amp;ptinfo, const GR_DisplayOption *dopt, float lod, const GU_PrimGroupClosure *hidden_geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a4909bb3d7a3b8def3bef42ba91527226</anchor>
      <arglist>(GU_Detail *gdp, IECoreGL::ConstStatePtr displayState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderObject</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>aad4afd861a3fcd4e9033b091bb496453</anchor>
      <arglist>(const IECore::Object *object, IECoreGL::ConstStatePtr displayState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderScene</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>a1d21572f4ef32184bf353da8a2521bb3</anchor>
      <arglist>(IECoreGL::ConstScenePtr scene, IECoreGL::ConstStatePtr displayState)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classIECoreHoudini_1_1GR__Cortex.html</anchorfile>
      <anchor>ac584a62e8ff707125873d23c1289d16b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::NodeHandle</name>
    <filename>classIECoreHoudini_1_1NodeHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classIECoreHoudini_1_1NodeHandle.html</anchorfile>
      <anchor>abc3e378c6d85e81dce9151c1fff07489</anchor>
      <arglist>(const OP_Node *node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alive</name>
      <anchorfile>classIECoreHoudini_1_1NodeHandle.html</anchorfile>
      <anchor>ac461bbe1cc4bb227f835b08fb6789b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OP_Node *</type>
      <name>node</name>
      <anchorfile>classIECoreHoudini_1_1NodeHandle.html</anchorfile>
      <anchor>a967e399f54442b2551783bcc5bb58ce6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::NodePassData</name>
    <filename>classIECoreHoudini_1_1NodePassData.html</filename>
    <member kind="function">
      <type></type>
      <name>NodePassData</name>
      <anchorfile>classIECoreHoudini_1_1NodePassData.html</anchorfile>
      <anchor>aee1c250afe244e730d75ac4f3e57d0d8</anchor>
      <arglist>(OP_Node *node, NodeType type)</arglist>
    </member>
    <member kind="function">
      <type>const OP_Node *</type>
      <name>nodePtr</name>
      <anchorfile>classIECoreHoudini_1_1NodePassData.html</anchorfile>
      <anchor>aa4de49e8a47730bcadd152616c4933ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeType</type>
      <name>type</name>
      <anchorfile>classIECoreHoudini_1_1NodePassData.html</anchorfile>
      <anchor>a29611272f08d2f8dbae997c6650ec03d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::RATDeepImageReader</name>
    <filename>classIECoreHoudini_1_1RATDeepImageReader.html</filename>
    <base>IECore::DeepImageReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>ad0beefdf2e41e8419845f2276df81089</anchor>
      <arglist>(RATDeepImageReader, RATDeepImageReaderTypeId, IECore::DeepImageReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RATDeepImageReader</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>abe9b478f69e472408adb885cff1bcaac</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelNames</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>ac42dde3b9f6adff6a930dc9cabe33c50</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplete</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>a7a873e5e7327808d50dfd9bf1825fe6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>dataWindow</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>a99c72098a4f0f2af3edd9ec5d72abbd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::Box2i</type>
      <name>displayWindow</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>afe76fe9031e87828e36fd434577468c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>a1000b879b2fa93c28bc7a3d3f42012f0</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::DeepPixelPtr</type>
      <name>doReadPixel</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageReader.html</anchorfile>
      <anchor>a7254af54dcff578666e3f8546c8961db</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::RATDeepImageWriter</name>
    <filename>classIECoreHoudini_1_1RATDeepImageWriter.html</filename>
    <base>IECore::DeepImageWriter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageWriter.html</anchorfile>
      <anchor>a857392de10f936b45334db68265fd451</anchor>
      <arglist>(RATDeepImageWriter, RATDeepImageWriterTypeId, IECore::DeepImageWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RATDeepImageWriter</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageWriter.html</anchorfile>
      <anchor>ab3aab6ff7f55cf6bee36750e3eaea4c0</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canWrite</name>
      <anchorfile>classIECoreHoudini_1_1RATDeepImageWriter.html</anchorfile>
      <anchor>a100742fe8103297341384b935b4a282d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::SOP_InterpolatedCacheReader</name>
    <filename>classIECoreHoudini_1_1SOP__InterpolatedCacheReader.html</filename>
    <member kind="function">
      <type></type>
      <name>SOP_InterpolatedCacheReader</name>
      <anchorfile>classIECoreHoudini_1_1SOP__InterpolatedCacheReader.html</anchorfile>
      <anchor>ab9d5af9dca2871104ad04425c1e6ca3d</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OP_Node *</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1SOP__InterpolatedCacheReader.html</anchorfile>
      <anchor>ac433e52c099d3fb7487826103e30105b</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Template</type>
      <name>parameters</name>
      <anchorfile>classIECoreHoudini_1_1SOP__InterpolatedCacheReader.html</anchorfile>
      <anchor>a931525e52cbbee061f92661c3b3d4096</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual OP_ERROR</type>
      <name>cookMySop</name>
      <anchorfile>classIECoreHoudini_1_1SOP__InterpolatedCacheReader.html</anchorfile>
      <anchor>a515eb857cd80272b14c92a7f247d915e</anchor>
      <arglist>(OP_Context &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::SOP_OpHolder</name>
    <filename>classIECoreHoudini_1_1SOP__OpHolder.html</filename>
    <base>IECoreHoudini::SOP_ParameterisedHolder</base>
    <member kind="function" static="yes">
      <type>static OP_Node *</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1SOP__OpHolder.html</anchorfile>
      <anchor>ae2ccb91258d8340da32fbcc406e703dc</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SOP_OpHolder</name>
      <anchorfile>classIECoreHoudini_1_1SOP__OpHolder.html</anchorfile>
      <anchor>a5cce2aba46ee2edb31ec77c5b98572e1</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual OP_ERROR</type>
      <name>cookMySop</name>
      <anchorfile>classIECoreHoudini_1_1SOP__OpHolder.html</anchorfile>
      <anchor>a817eec79c4ce8eed049dae9030220ebb</anchor>
      <arglist>(OP_Context &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::SOP_ParameterisedHolder</name>
    <filename>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>SOP_ParameterisedHolder</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a228442ab377dc3b2e5f3ebd9252d58b1</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>inputLabel</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>af2d87072844d66297a69c66db1e8c791</anchor>
      <arglist>(unsigned pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>minInputs</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a1bf0decaac78dcb47aed9ca52cb8e0c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>maxInputs</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a8f7983ca5e3f12c6fced069124f2f605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParameterised</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ab0e33a09170644619976887d89583057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a263fb166f5124d9d5da7629fa14a0054</anchor>
      <arglist>(IECore::RunTimeTypedPtr p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a109d01890d912fac9c47f08fa5fbabc6</anchor>
      <arglist>(const std::string &amp;className, int classVersion, const std::string &amp;searchPathEnvVar)</arglist>
    </member>
    <member kind="function">
      <type>IECore::RunTimeTypedPtr</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a3c14a69fa992f9236d092db50570fb48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildClassCategoryMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a10af3a6d0de9bb604b46497d262a3a61</anchor>
      <arglist>(void *data, PRM_Name *menu, int maxSize, const PRM_SpareData *, PRM_Parm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildClassNameMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a6d7886661cd9b8907b4f922f1186293d</anchor>
      <arglist>(void *data, PRM_Name *menu, int maxSize, const PRM_SpareData *, PRM_Parm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildVersionMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ad83f79d93fa129b89df1559c2fecf151</anchor>
      <arglist>(void *data, PRM_Name *menu, int maxSize, const PRM_SpareData *, PRM_Parm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reloadClassCallback</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a59c196a547466ede09c33672222c9667</anchor>
      <arglist>(void *data, int index, float time, const PRM_Template *tplate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reloadButtonCallback</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a17fa9b42e343085ac13bbc8b45241b3f</anchor>
      <arglist>(void *data, int index, float time, const PRM_Template *tplate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>classNames</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ac441cf9f01aa3d562833752f21054ec6</anchor>
      <arglist>(const std::string searchPathEnvVar, const std::string &amp;matchString, std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>classVersions</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a0f33c7f78a8b5e9a8b7c10025f29a6fe</anchor>
      <arglist>(const std::string className, const std::string searchPathEnvVar, std::vector&lt; int &gt; &amp;versions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>defaultClassVersion</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>aea8698201db8239da259fbb380c32367</anchor>
      <arglist>(const std::string className, const std::string searchPathEnvVar)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Template</type>
      <name>parameters</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a16c173c922f33f0c1ae14569af50afc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CH_LocalVariable</type>
      <name>variables</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ab46f477ad902e65f2d2943318e6f6c17</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pParameterisedClassCategory</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>aaac9688c5a86916013d273241fe27eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pParameterisedClassName</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a14ff88880dbd92921c19fa1e5df9c039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pParameterisedVersion</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>aa620d3d4287e928c67b12b378301ab99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pParameterisedSearchPathEnvVar</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a9312037795d8d03ae010ea65aa636b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pMatchString</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a194e1070dec325ac772671ffb988c17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pReloadButton</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a3986a29cd9d62c1ad3710c85fe353860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pEvaluateParameters</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>af899879085d1c95cbccc78507b114ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Name</type>
      <name>pSwitcher</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>aaeec598755f34598c0fc355c58a539d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Default</type>
      <name>matchStringDefault</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a3f8ed62ab04ce0d97485d4e4200a7c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Default</type>
      <name>switcherDefaults</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>adeb0d73356b1da041b13e1ceee00d41e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_ChoiceList</type>
      <name>classCategoryMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a1e73354a96d591e0ed5dce00eb67caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_ChoiceList</type>
      <name>classNameMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a027d98ca50eca9ce9ae272b7bce0c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_ChoiceList</type>
      <name>classVersionMenu</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ab94229e9843609f07d3cc22b5b4fa201</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>load</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ac6177b19e2366aa6637bceaaa01c75a3</anchor>
      <arglist>(UT_IStream &amp;is, const char *ext, const char *path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateParameter</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ab9fd2c531e5a6cafaa7160cf741deff2</anchor>
      <arglist>(IECore::ParameterPtr parm, float now, std::string prefix=&quot;&quot;, bool top_level=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInputParameterValues</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a98f766635b8d9df337d8b767e6ae9180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::CompoundParameter::ParameterVector</type>
      <name>m_inputParameters</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>a3984d532d3f1431bf0cf3a9596c3bd6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dirty</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ParameterisedHolder.html</anchorfile>
      <anchor>ad102bcd74c95c4b28e503c7dcfbd9a29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::SOP_ProceduralHolder</name>
    <filename>classIECoreHoudini_1_1SOP__ProceduralHolder.html</filename>
    <base>IECoreHoudini::SOP_ParameterisedHolder</base>
    <member kind="function">
      <type>IECoreGL::ConstScenePtr</type>
      <name>scene</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ProceduralHolder.html</anchorfile>
      <anchor>a7c880172b0a79c02686ba6435ea253ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OP_Node *</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ProceduralHolder.html</anchorfile>
      <anchor>a915b424710082ab0ce43f74933d6b97b</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SOP_ProceduralHolder</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ProceduralHolder.html</anchorfile>
      <anchor>a01985098055e1cb0e0bff07faa126af6</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual OP_ERROR</type>
      <name>cookMySop</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ProceduralHolder.html</anchorfile>
      <anchor>af468c8baba3df03b569fbb7b59d1a76a</anchor>
      <arglist>(OP_Context &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::SOP_ToHoudiniConverter</name>
    <filename>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</filename>
    <member kind="function" static="yes">
      <type>static OP_Node *</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>afe60eeab74466dafe83525c43b4299a1</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PRM_Template</type>
      <name>parameters</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>a6c4eadf317f5192c2b60e5f3fac76f2f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CH_LocalVariable</type>
      <name>variables</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>ae28305ff52a68d4d59079d9061db99c4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SOP_ToHoudiniConverter</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>a7410df7d393957f2f6fda9672bf9a217</anchor>
      <arglist>(OP_Network *net, const char *name, OP_Operator *op)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual OP_ERROR</type>
      <name>cookMySop</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>a3f182333c7600f2dd268f8b72cc94f05</anchor>
      <arglist>(OP_Context &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>inputLabel</name>
      <anchorfile>classIECoreHoudini_1_1SOP__ToHoudiniConverter.html</anchorfile>
      <anchor>aa38739cb87221d0656b4a8aef1f65597</anchor>
      <arglist>(unsigned pos) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniAttribConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniConverter</base>
    <class kind="class">IECoreHoudini::ToHoudiniAttribConverter::Description</class>
    <member kind="typedef">
      <type>UT_PtrArray&lt; GEO_Vertex * &gt;</type>
      <name>VertexList</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>ab0753cef83ea94fcdaf26642d4077889</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>abea00b0476d1acbd357f977da65e7c8d</anchor>
      <arglist>(ToHoudiniAttribConverter, ToHoudiniAttribConverterTypeId, ToHoudiniConverter)</arglist>
    </member>
    <member kind="function">
      <type>GB_AttributeRef</type>
      <name>convert</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a6987571a942978645e692a95d86e6ba1</anchor>
      <arglist>(std::string name, GU_Detail *geo) const </arglist>
    </member>
    <member kind="function">
      <type>GB_AttributeRef</type>
      <name>convert</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>acec36fc8a1f08b88f36f21c4857900ba</anchor>
      <arglist>(std::string name, GU_Detail *geo, GEO_PointList *points) const </arglist>
    </member>
    <member kind="function">
      <type>GB_AttributeRef</type>
      <name>convert</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a295bc07d4414728436b69a3b7d7a4b9a</anchor>
      <arglist>(std::string name, GU_Detail *geo, GEO_PrimList *primitives) const </arglist>
    </member>
    <member kind="function">
      <type>GB_AttributeRef</type>
      <name>convert</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a0fa2a8e2a66ee04df10a73ea5f5d529e</anchor>
      <arglist>(std::string name, GU_Detail *geo, VertexList *vertices) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToHoudiniAttribConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a16fa41e16c4814b364279d8a9d5723a0</anchor>
      <arglist>(const IECore::Data *data)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToHoudiniAttribConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a301ef1468ad8009283ff50bd1c8cf76f</anchor>
      <arglist>)(const IECore::Data *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToHoudiniAttribConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a631e456e63aa5fc6a4c671cde6f427ec</anchor>
      <arglist>(const IECore::Data *data, const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a05d3653bb9ad8902ca585ab34926fbf2</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>a8d99f2fa70211a5fd102f3a51022c9a0</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PointList *points) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>ace07530917858ca51e29242399e0657c</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PrimList *primitives) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>ae9e6c25623eba8df0334c9a789a89c3e</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, VertexList *vertices) const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter.html</anchorfile>
      <anchor>abeb088cd5c372bc9a729054ac27487fb</anchor>
      <arglist>(IECore::TypeId fromType, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniAttribConverter::Description</name>
    <filename>classIECoreHoudini_1_1ToHoudiniAttribConverter_1_1Description.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniAttribConverter_1_1Description.html</anchorfile>
      <anchor>a0afa447c50e39d06a0185b9032598e00</anchor>
      <arglist>(IECore::TypeId fromType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniConverter.html</filename>
    <base>IECore::FromCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniConverter.html</anchorfile>
      <anchor>ac7cc0cfd0a5c72a7b1a81807bd8a9da4</anchor>
      <arglist>(ToHoudiniConverter, ToHoudiniConverterTypeId, IECore::FromCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToHoudiniConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniConverter.html</anchorfile>
      <anchor>a9b19dc7a40f66a91599360a383f4b219</anchor>
      <arglist>(const std::string &amp;description, IECore::TypeId supportedType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniCurvesConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniCurvesConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniCurvesConverter.html</anchorfile>
      <anchor>a91b08f8a5f89dae9830391879a2a7e74</anchor>
      <arglist>(ToHoudiniCurvesConverter, ToHoudiniCurvesConverterTypeId, IECoreHoudini::ToHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniCurvesConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniCurvesConverter.html</anchorfile>
      <anchor>a4fdc55b959574de3f272e81ac2aa3619</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniCurvesConverter.html</anchorfile>
      <anchor>a21f044c277aada748ca400b9ac3391a8</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniGeometryConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniConverter</base>
    <class kind="class">IECoreHoudini::ToHoudiniGeometryConverter::Description</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>af7068954bedc874646734f41b7955629</anchor>
      <arglist>(ToHoudiniGeometryConverter, ToHoudiniGeometryConverterTypeId, ToHoudiniConverter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>a97913c51dcbb3612ef48a270593461b7</anchor>
      <arglist>(GU_DetailHandle handle) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToHoudiniGeometryConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>a0a6d370ee72a646a03a5619a1db74bc1</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToHoudiniGeometryConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>aecfda31cfa34680ddfd1d4cb4c162e03</anchor>
      <arglist>)(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToHoudiniGeometryConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>ac17fba57b45c98cdef75be65fe95eb80</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>a70e11bb147d2c089fb189177ede89c61</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, GU_Detail *geo) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GEO_PointList</type>
      <name>appendPoints</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>ae97c77526adaf032dba7e149472f6777</anchor>
      <arglist>(GU_Detail *geo, const IECore::V3fVectorData *positions) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>transferAttribs</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>a90228fdeb680392a83992294751ebb74</anchor>
      <arglist>(const IECore::Primitive *primitive, GU_Detail *geo, GEO_PointList *newPoints=0, GEO_PrimList *newPrims=0, IECore::PrimitiveVariable::Interpolation vertexInterpolation=IECore::PrimitiveVariable::FaceVarying, IECore::PrimitiveVariable::Interpolation primitiveInterpolation=IECore::PrimitiveVariable::Uniform, IECore::PrimitiveVariable::Interpolation pointInterpolation=IECore::PrimitiveVariable::Vertex, IECore::PrimitiveVariable::Interpolation detailInterpolation=IECore::PrimitiveVariable::Constant) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter.html</anchorfile>
      <anchor>a4c8156ce37f44827f1938e19064cbcf0</anchor>
      <arglist>(IECore::TypeId fromType, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniGeometryConverter::Description</name>
    <filename>classIECoreHoudini_1_1ToHoudiniGeometryConverter_1_1Description.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGeometryConverter_1_1Description.html</anchorfile>
      <anchor>a0e7936208d1537abb88f8ec20f6774f0</anchor>
      <arglist>(IECore::TypeId fromType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniGroupConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</anchorfile>
      <anchor>a0d3f89ce0f2657e78baf183c772643ba</anchor>
      <arglist>(ToHoudiniGroupConverter, ToHoudiniGroupConverterTypeId, IECoreHoudini::ToHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniGroupConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</anchorfile>
      <anchor>a486881941fc8ff3960493a685d02feb3</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="function">
      <type>IECore::M44fParameter *</type>
      <name>transformParameter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</anchorfile>
      <anchor>a6e775d71e9692cd32c36b94053ecc702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::M44fParameter *</type>
      <name>transformParameter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</anchorfile>
      <anchor>a531d93cf41ff64dab22415a8ee2bf6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniGroupConverter.html</anchorfile>
      <anchor>a0d13880cf78a089983f90d5e5de68024</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniNumericVectorAttribConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</filename>
    <templarg></templarg>
    <base>IECoreHoudini::ToHoudiniAttribConverter</base>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>af4e6c7e33a265a9bd7fda4a7d4e1dedf</anchor>
      <arglist>(ToHoudiniNumericVectorAttribConverter, ToHoudiniAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniNumericVectorAttribConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>adbe4519e90007fbac60e8e278a599b70</anchor>
      <arglist>(const IECore::Data *data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>a8d07db6543ebad9b39113aa4cf3b7422</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>a412879d7014a6943d048e3ee001600f2</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PointList *points) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>a64dbb0a7d08e8261420be247f9868a7b</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PrimList *primitives) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>af1b58082b500f12b1fe35e7bdc36f0e3</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, VertexList *vertices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GB_AttributeRef</type>
      <name>doVectorConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericVectorAttribConverter.html</anchorfile>
      <anchor>aa52334a24c19331a3667dea8af18e8dc</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, Container *container, GEO_AttributeOwner owner) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniNumericDetailAttribConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</filename>
    <templarg></templarg>
    <base>IECoreHoudini::ToHoudiniAttribConverter</base>
    <member kind="function">
      <type></type>
      <name>IECORE_RUNTIMETYPED_DECLARETEMPLATE</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>a821b8aff47d896e5c0061d9e2609d671</anchor>
      <arglist>(ToHoudiniNumericDetailAttribConverter, ToHoudiniAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniNumericDetailAttribConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>a53316f7558efbeb27e460e420e303ec2</anchor>
      <arglist>(const IECore::Data *data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>a740e7749c1494e666f1fce8657b0bd38</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>af76d2516c1f8bfe6908a1a74a39e2e35</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PointList *points) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>ac2935e20a5bab469f343ed0e77beca8f</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PrimList *primitives) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniNumericDetailAttribConverter.html</anchorfile>
      <anchor>aae8663ba6f3883b96d8e6473c45b3d26</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, VertexList *vertices) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniPointsConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniPointsConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPointsConverter.html</anchorfile>
      <anchor>a626000c0e3be51b01e84e3c3c711ece9</anchor>
      <arglist>(ToHoudiniPointsConverter, ToHoudiniPointsConverterTypeId, IECoreHoudini::ToHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniPointsConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPointsConverter.html</anchorfile>
      <anchor>ac512dd0c3cb69e5a5ab889cbed0b3014</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPointsConverter.html</anchorfile>
      <anchor>ad0f1a580f68c335217e1ceac8f082e84</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniPolygonsConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniPolygonsConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPolygonsConverter.html</anchorfile>
      <anchor>ac13628f920fbb59873171631c6b71486</anchor>
      <arglist>(ToHoudiniPolygonsConverter, ToHoudiniPolygonsConverterTypeId, IECoreHoudini::ToHoudiniGeometryConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniPolygonsConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPolygonsConverter.html</anchorfile>
      <anchor>a886939190318ae0319a8a71aedd84000</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniPolygonsConverter.html</anchorfile>
      <anchor>ae70d43d31a31ce6f223b3f753110185d</anchor>
      <arglist>(const IECore::VisibleRenderable *renderable, GU_Detail *geo) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniStringVectorAttribConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniAttribConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>aabdbd6e8f482a0b7883e8e6d64c84e8e</anchor>
      <arglist>(ToHoudiniStringVectorAttribConverter, ToHoudiniStringVectorAttribConverterTypeId, ToHoudiniAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniStringVectorAttribConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a045a617812cdda3da7bd1a5955f83a1f</anchor>
      <arglist>(const IECore::Data *data)</arglist>
    </member>
    <member kind="function">
      <type>IECore::IntVectorParameterPtr</type>
      <name>indicesParameter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>ad53575e10679b4b8a7922caa277da92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntVectorParameterPtr</type>
      <name>indicesParameter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a4bca80547b4507bce37d46386ef9cd2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>ac7f91e65fea703220325065a175ec79d</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a1a39abefc987f13fcd3c5bb6da7899c3</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PointList *points) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a300edb6df0527f14dec9c2424bf57f0d</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PrimList *primitives) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a26916ea3aa37fa4b91ad7f7600c9a982</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, VertexList *vertices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GB_AttributeRef</type>
      <name>doVectorConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringVectorAttribConverter.html</anchorfile>
      <anchor>a3bf2abf04ebf78a37ea8f27e168e5fb2</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, Container *container, GEO_AttributeOwner owner) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ToHoudiniStringDetailAttribConverter</name>
    <filename>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</filename>
    <base>IECoreHoudini::ToHoudiniAttribConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>a6ae06f111e5bf3ce5f10b8c4f2eafafe</anchor>
      <arglist>(ToHoudiniStringDetailAttribConverter, ToHoudiniStringDetailAttribConverterTypeId, ToHoudiniAttribConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToHoudiniStringDetailAttribConverter</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>a1179c88357ed785cf2de075d2d34d9eb</anchor>
      <arglist>(const IECore::Data *data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>a99c7c3d8114c4312c9284d2356e7aee5</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>ae6a3423ccde29dd2068719db47360a42</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PointList *points) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>acbe2870b5f9945cd70ab48a41e728110</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, GEO_PrimList *primitives) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GB_AttributeRef</type>
      <name>doConversion</name>
      <anchorfile>classIECoreHoudini_1_1ToHoudiniStringDetailAttribConverter.html</anchorfile>
      <anchor>aff8441b565729a2bc4535b67e1ba9d5e</anchor>
      <arglist>(const IECore::Data *data, std::string name, GU_Detail *geo, VertexList *vertices) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::TestCase</name>
    <filename>classIECoreHoudini_1_1TestCase.html</filename>
    <member kind="function">
      <type>def</type>
      <name>setUp</name>
      <anchorfile>classIECoreHoudini_1_1TestCase.html</anchorfile>
      <anchor>a018803258f973b46e4e444c71d80d9dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::TestProgram</name>
    <filename>classIECoreHoudini_1_1TestProgram.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreHoudini_1_1TestProgram.html</anchorfile>
      <anchor>abb4f2a9652d9ac89e57beb4bfb58f8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>runTests</name>
      <anchorfile>classIECoreHoudini_1_1TestProgram.html</anchorfile>
      <anchor>ab0808282ec65c4e6b91b9a54366840c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>testRunner</name>
      <anchorfile>classIECoreHoudini_1_1TestProgram.html</anchorfile>
      <anchor>ac0314a70468d8cd17976dac4176b2a49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::ActiveTake</name>
    <filename>classIECoreHoudini_1_1ActiveTake.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreHoudini_1_1ActiveTake.html</anchorfile>
      <anchor>a88ff02edb1a435caa800b4d54a183183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreHoudini_1_1ActiveTake.html</anchorfile>
      <anchor>ab43fef8ef6ccd58c5d8e91fc092b0bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreHoudini_1_1ActiveTake.html</anchorfile>
      <anchor>a4568b874e928db97fa9e3ffb8e70c643</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>name</name>
      <anchorfile>classIECoreHoudini_1_1ActiveTake.html</anchorfile>
      <anchor>afdc0d4a376200fa395ca9c0e6358dafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>ls</name>
      <anchorfile>classIECoreHoudini_1_1ActiveTake.html</anchorfile>
      <anchor>a4e8b42edcf36c5fedaf685d6740d7f5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreHoudini::TemporaryParameterValues</name>
    <filename>classIECoreHoudini_1_1TemporaryParameterValues.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreHoudini_1_1TemporaryParameterValues.html</anchorfile>
      <anchor>af345e04e09b4cfbfb3fc60c3e51813fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreHoudini_1_1TemporaryParameterValues.html</anchorfile>
      <anchor>ae26e9e5ca18b31e2e1b1ddd9c283039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreHoudini_1_1TemporaryParameterValues.html</anchorfile>
      <anchor>a384751efeca13e8bb15957ff677ca528</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsDetailGbAttribFloatTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsDetailGbAttribFloatTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsDetailGbAttribIntTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsDetailGbAttribIntTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsVectorGbAttribFloatTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsVectorGbAttribFloatTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsVectorGbAttribIntTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsVectorGbAttribIntTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsDetailGbAttribTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsDetailGbAttribTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IECoreHoudini::TypeTraits::IsVectorGbAttribTypedData</name>
    <filename>structIECoreHoudini_1_1TypeTraits_1_1IsVectorGbAttribTypedData.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>IECoreMaya</name>
    <filename>namespaceIECoreMaya.html</filename>
    <class kind="class">IECoreMaya::BoolParameterHandler</class>
    <class kind="class">IECoreMaya::Box3Manipulator</class>
    <class kind="class">IECoreMaya::BoxParameterHandler</class>
    <class kind="class">IECoreMaya::CacheSet</class>
    <class kind="class">IECoreMaya::CallbackId</class>
    <class kind="class">IECoreMaya::ClassParameterHandler</class>
    <class kind="class">IECoreMaya::ClassVectorParameterHandler</class>
    <class kind="class">IECoreMaya::ColorSplineParameterHandler</class>
    <class kind="class">IECoreMaya::CompoundNumericParameterHandler</class>
    <class kind="class">IECoreMaya::CompoundParameterHandler</class>
    <class kind="class">IECoreMaya::ConverterHolder</class>
    <class kind="class">IECoreMaya::CurveCombiner</class>
    <class kind="class">IECoreMaya::DateTimeParameterHandler</class>
    <class kind="class">IECoreMaya::DelightProceduralCacheCommand</class>
    <class kind="class">IECoreMaya::DisplayStyle</class>
    <class kind="class">IECoreMaya::FloatSplineParameterHandler</class>
    <class kind="class">IECoreMaya::FromMayaArrayDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaConverter</class>
    <class kind="class">IECoreMaya::FromMayaCurveConverter</class>
    <class kind="class">IECoreMaya::FromMayaDagNodeConverter</class>
    <class kind="class">IECoreMaya::FromMayaFluidConverter</class>
    <class kind="class">IECoreMaya::FromMayaGroupConverter</class>
    <class kind="class">IECoreMaya::FromMayaImageConverter</class>
    <class kind="class">IECoreMaya::FromMayaMatrixDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaMatrixVectorDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaMeshConverter</class>
    <class kind="class">IECoreMaya::FromMayaNumericDataConverter</class>
    <class kind="class">IECoreMaya::FromMayaObjectConverter</class>
    <class kind="class">IECoreMaya::FromMayaParticleConverter</class>
    <class kind="class">IECoreMaya::FromMayaPlugConverter</class>
    <class kind="class">IECoreMaya::FromMayaShapeConverter</class>
    <class kind="class">IECoreMaya::FromMayaSkinClusterConverter</class>
    <class kind="class">IECoreMaya::FromMayaTransformationMatrixConverter</class>
    <class kind="class">IECoreMaya::FromMayaTransformConverter</class>
    <class kind="class">IECoreMaya::GeometryCombiner</class>
    <class kind="class">IECoreMaya::ImagePlaneHolder</class>
    <class kind="class">IECoreMaya::ImageViewportPostProcess</class>
    <class kind="struct">IECoreMaya::MArrayIter</class>
    <class kind="class">IECoreMaya::MayaAppendIterator</class>
    <class kind="class">IECoreMaya::MayaAppendIterator&lt; MStringArray &gt;</class>
    <class kind="struct">IECoreMaya::MArrayTraits</class>
    <class kind="class">IECoreMaya::MayaMeshBuilder</class>
    <class kind="class">IECoreMaya::MayaTime</class>
    <class kind="struct">IECoreMaya::MDataHandleAccessor</class>
    <class kind="class">IECoreMaya::MeshParameterHandler</class>
    <class kind="struct">IECoreMaya::MFnDataTypeTraits</class>
    <class kind="struct">IECoreMaya::MImageAccessor</class>
    <class kind="class">IECoreMaya::NumericParameterHandler</class>
    <class kind="struct">IECoreMaya::NumericTraits</class>
    <class kind="class">IECoreMaya::ObjectData</class>
    <class kind="class">IECoreMaya::ObjectMFnDataParameterHandler</class>
    <class kind="class">IECoreMaya::ObjectVectorParameterHandler</class>
    <class kind="class">IECoreMaya::OpHolder</class>
    <class kind="class">IECoreMaya::ParameterHandler</class>
    <class kind="class">IECoreMaya::ParameterisedHolder</class>
    <class kind="class">IECoreMaya::ParameterisedHolderInterface</class>
    <class kind="class">IECoreMaya::ParameterisedHolderManipContext</class>
    <class kind="class">IECoreMaya::ParameterisedHolderManipContextCommand</class>
    <class kind="class">IECoreMaya::ParameterisedHolderSetValueCmd</class>
    <class kind="class">IECoreMaya::ParameterManipContainer</class>
    <class kind="class">IECoreMaya::PlaybackFrameList</class>
    <class kind="class">IECoreMaya::PostLoadCallback</class>
    <class kind="class">IECoreMaya::ProceduralHolder</class>
    <class kind="class">IECoreMaya::PythonCmd</class>
    <class kind="class">IECoreMaya::StatusException</class>
    <class kind="class">IECoreMaya::StringParameterHandler</class>
    <class kind="class">IECoreMaya::StringVectorParameterHandler</class>
    <class kind="class">IECoreMaya::ToMayaArrayDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaConverter</class>
    <class kind="class">IECoreMaya::ToMayaGroupConverter</class>
    <class kind="class">IECoreMaya::ToMayaImageConverter</class>
    <class kind="class">IECoreMaya::ToMayaMatrixDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaMatrixVectorDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaMeshConverter</class>
    <class kind="class">IECoreMaya::ToMayaNumericDataConverter</class>
    <class kind="class">IECoreMaya::ToMayaObjectConverter</class>
    <class kind="class">IECoreMaya::ToMayaParticleConverter</class>
    <class kind="class">IECoreMaya::ToMayaPlugConverter</class>
    <class kind="class">IECoreMaya::ToMayaSkinClusterConverter</class>
    <class kind="class">IECoreMaya::TransformationMatrixManipulator</class>
    <class kind="class">IECoreMaya::TransformationMatrixParameterHandler</class>
    <class kind="class">IECoreMaya::TransientParameterisedHolderNode</class>
    <class kind="class">IECoreMaya::V3Manipulator</class>
    <class kind="class">IECoreMaya::ViewportPostProcess</class>
    <class kind="class">IECoreMaya::ViewportPostProcessCallback</class>
    <class kind="class">IECoreMaya::UIElement</class>
    <class kind="class">IECoreMaya::ParameterUI</class>
    <class kind="class">IECoreMaya::StringParameterUI</class>
    <class kind="class">IECoreMaya::NoteParameterUI</class>
    <class kind="class">IECoreMaya::DAGPathParameter</class>
    <class kind="class">IECoreMaya::Menu</class>
    <class kind="class">IECoreMaya::ScopedSelection</class>
    <class kind="class">IECoreMaya::FnParameterisedHolder</class>
    <class kind="class">IECoreMaya::ParameterPanel</class>
    <class kind="class">IECoreMaya::AttributeEditorControl</class>
    <class kind="class">IECoreMaya::FnProceduralHolder</class>
    <class kind="class">IECoreMaya::OpWindow</class>
    <class kind="class">IECoreMaya::UndoDisabled</class>
    <class kind="class">IECoreMaya::ModalDialogue</class>
    <class kind="class">IECoreMaya::Panel</class>
    <class kind="class">IECoreMaya::WaitCursor</class>
    <class kind="class">IECoreMaya::UITemplate</class>
    <class kind="class">IECoreMaya::FnParameterisedHolderSet</class>
    <class kind="class">IECoreMaya::TemporaryAttributeValues</class>
    <class kind="class">IECoreMaya::FnDagNode</class>
    <class kind="class">IECoreMaya::ClassVectorParameterUI</class>
    <class kind="class">IECoreMaya::PresetsOnlyParameterUI</class>
    <class kind="class">IECoreMaya::TestCase</class>
    <class kind="class">IECoreMaya::TestProgram</class>
    <class kind="class">IECoreMaya::FileBrowser</class>
    <class kind="class">IECoreMaya::FileDialog</class>
    <class kind="class">IECoreMaya::StringVectorParameterUI</class>
    <class kind="class">IECoreMaya::TransformationMatrixParameterUI</class>
    <class kind="class">IECoreMaya::_CollapsibleMotif</class>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MIntArray, IECore::IntVectorData &gt;</type>
      <name>FromMayaArrayDataConverterii</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae8c0f8a3f605bc2518d5fd7c96c84a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MIntArray, IECore::BoolVectorData &gt;</type>
      <name>FromMayaArrayDataConverterib</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae1c3ce12b9bfb1d49b83d1aa17614b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MDoubleArray, IECore::DoubleVectorData &gt;</type>
      <name>FromMayaArrayDataConverterdd</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ab85b07d14dd5d2d373f1427208467818</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MDoubleArray, IECore::FloatVectorData &gt;</type>
      <name>FromMayaArrayDataConverterdf</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae28be629f5e9a563da9287228b03c93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MStringArray, IECore::StringVectorData &gt;</type>
      <name>FromMayaArrayDataConverterss</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>acd234eefb1861155784fea6159ae2fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MVectorArray, IECore::V3fVectorData &gt;</type>
      <name>FromMayaArrayDataConverterVV3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>af67b9ab3b37e6671f22209508664ec10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MVectorArray, IECore::V3dVectorData &gt;</type>
      <name>FromMayaArrayDataConverterVV3d</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4a11dc04c675a02338470aad3dac36c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaArrayDataConverter&lt; MVectorArray, IECore::Color3fVectorData &gt;</type>
      <name>FromMayaArrayDataConverterVC3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a89e10d532b275cc64e25c0a683530ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2f, IECore::V2iData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2fV2i</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>af66b93a161228d046d4b14874930b1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2f, IECore::V2fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2fV2f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a948d7c11767f6d7ca491e147c6cd6833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2f, IECore::V2dData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2fV2d</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7301c4aa29ae5eaf905d8d4c31c35214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2d, IECore::V2iData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2dV2i</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>af8a4c90354b43c2338f253d5098476ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2d, IECore::V2fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2dV2f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a9770bc22070acc5008750f389d16d04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V2d, IECore::V2dData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV2dV2d</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a920e458626a8d7e58a5dd61e0696c6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3f, IECore::V3iData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3fV3i</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a28ba3669e038561a164fda6e73ecffb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3f, IECore::V3fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3fV3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4aba67fcb54ed66eb46fa51123a6bbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3f, IECore::V3dData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3fV3d</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae9783f62bbd0d66f40776b9533b82944</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3f, IECore::Color3fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3fC3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a2e6155e28a656c577caa9a9226a715e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3d, IECore::V3iData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3dV3i</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a130bc695ecd76fed8c255401ba498338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3d, IECore::V3fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3dV3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7a07ebc848ab691f73259771b10beccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3d, IECore::V3dData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3dV3d</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a338eff5a8ea1b8df38680d0f72b8e26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaCompoundNumericPlugConverter&lt; Imath::V3d, IECore::Color3fData &gt;</type>
      <name>FromMayaCompoundNumericPlugConverterV3dC3f</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad61d5579a2e9e7f9c008cc443feb6ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; bool, IECore::BoolData &gt;</type>
      <name>FromMayaNumericPlugConverterbb</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad7918fb64de39e1099a3b0e09d7a6791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; bool, IECore::IntData &gt;</type>
      <name>FromMayaNumericPlugConverterbi</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a70696a68df3e166f90f1034bbe68758d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; int, IECore::IntData &gt;</type>
      <name>FromMayaNumericPlugConverterii</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a8003e5322850ad80cbaa41ba4bf5df93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; int, IECore::FloatData &gt;</type>
      <name>FromMayaNumericPlugConverterif</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a23306ec4c98aaa566ffebe919fe3b3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; int, IECore::DoubleData &gt;</type>
      <name>FromMayaNumericPlugConverterid</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7659f8d2ec11ec7511eb24ffb6a2fae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; float, IECore::IntData &gt;</type>
      <name>FromMayaNumericPlugConverterfi</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a71e7d6b489e3a3cadba9fa3fe073c8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; float, IECore::FloatData &gt;</type>
      <name>FromMayaNumericPlugConverterff</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a343f931f52675d29c4bb5c86b0d49379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; float, IECore::DoubleData &gt;</type>
      <name>FromMayaNumericPlugConverterfd</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aaee18ff385d846873056ac303e7b5533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; double, IECore::IntData &gt;</type>
      <name>FromMayaNumericPlugConverterdi</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a91cc5f5903e692f32488e2e7bd733163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; double, IECore::FloatData &gt;</type>
      <name>FromMayaNumericPlugConverterdf</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae80b09a4fcf90a667067fe814b7854af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaNumericPlugConverter&lt; double, IECore::DoubleData &gt;</type>
      <name>FromMayaNumericPlugConverterdd</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4e41ec2edf6ae7fc96ab8781b7d1b1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaTransformationMatrixConverter&lt; IECore::TransformationMatrixfData &gt;</type>
      <name>FromMayaTransformationMatrixfConverter</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>abcb5dbc72ccbc0f1efb4a9583ca35721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaTransformationMatrixConverter&lt; IECore::TransformationMatrixdData &gt;</type>
      <name>FromMayaTransformationMatrixdConverter</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7f9aace302f232c881b5956abd8e5de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaUnitPlugConverter&lt; float &gt;</type>
      <name>FromMayaUnitPlugConverterf</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a89a6cc2819cd7af6c460908ec86bb268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FromMayaUnitPlugConverter&lt; double &gt;</type>
      <name>FromMayaUnitPlugConverterd</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad2b8d15cb3019cc16f3d024ca71ac0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; MFloatPoint * &gt;</type>
      <name>MPointTree</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aa3c70c415ab30961713026298b1bf302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree&lt; MFloatVector * &gt;</type>
      <name>MFloatVectorTree</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aed1357950e78b36319c63d985e78c3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IECore::KDTree&lt; MArrayIter&lt; MVectorArray &gt;::ConstIterator &gt;</type>
      <name>MVectorTree</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae1bc975b104f4da2781e3209a58a021a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OpHolder&lt; MPxNode &gt;</type>
      <name>OpHolderNode</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a8f9f21e2bedb4ced8c8d6243cd82c195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxNode &gt;</type>
      <name>ParameterisedHolderNode</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad508d8345a15af88cf609cc88e0d9b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxLocatorNode &gt;</type>
      <name>ParameterisedHolderLocator</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7435400a4dc2117413ad2dd3d3e92df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxDeformerNode &gt;</type>
      <name>ParameterisedHolderDeformer</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae3bc2413d404726dd0f5bf58364e7a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxFieldNode &gt;</type>
      <name>ParameterisedHolderField</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a15f30159ac8f6fd1a9a01124e4de2aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxObjectSet &gt;</type>
      <name>ParameterisedHolderSet</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a0b84d670b1ad512acdb1afbad0d87354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxSurfaceShape &gt;</type>
      <name>ParameterisedHolderSurfaceShape</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a649fb6a730cd97c7f8dd43c625252932</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxComponentShape &gt;</type>
      <name>ParameterisedHolderComponentShape</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a38917f006f852ebaa67fd511120e658b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; MPxImagePlane &gt;</type>
      <name>ParameterisedHolderImagePlane</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ac00774343a83948a213132f4615dba60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MayaTypeId</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a37940377ebfa6e5796fe01db10601c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LastId</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a37940377ebfa6e5796fe01db10601c39a8f7cc47c21ce38af36b2158d269d1200</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a5ee47bea41e6482b84fb320ea3ed7c35</anchor>
      <arglist>(FromMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a8f6e546a779febb621010012e38aada9</anchor>
      <arglist>(FromMayaCurveConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aef722e6d6fb665dcde5b0b749f5017a2</anchor>
      <arglist>(FromMayaDagNodeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a9a8bcd615cb14bb5839879fbce4af3d8</anchor>
      <arglist>(FromMayaGroupConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a955b836a57fa63d2ea20be0d643d6d7a</anchor>
      <arglist>(FromMayaImageConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ae1d41cc51e62997fa4f3f68c08a940b1</anchor>
      <arglist>(FromMayaMeshConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a9aaa3ce8af588d8e5fe694bef3b5a94a</anchor>
      <arglist>(FromMayaNumericDataConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ac10282ca10135c5dbcf586e9f9058acf</anchor>
      <arglist>(FromMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aec84b3382711b7e73f31c8fa00dbfeb5</anchor>
      <arglist>(FromMayaObjectDataConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>adbc676073bdc59201938b19e855dacdc</anchor>
      <arglist>(FromMayaParticleConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>afb3d657bd187907ac702853f3f734522</anchor>
      <arglist>(FromMayaPlugConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4403dc6381de3a008252d1296f5d0f39</anchor>
      <arglist>(FromMayaShapeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a715d92603b00ca181eadb20c1f7ae562</anchor>
      <arglist>(FromMayaSkinClusterConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a81ed602f3fdb11a953469157062f0e72</anchor>
      <arglist>(FromMayaSkinClusterConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a382040948d7dd53669a60e3ca78d4d2f</anchor>
      <arglist>(FromMayaTransformationMatrixfConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a54661022d5b9718e894e283a37722cb1</anchor>
      <arglist>(FromMayaTransformConverter)</arglist>
    </member>
    <member kind="function">
      <type>MStatus</type>
      <name>initialize</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a59a8b87e525970f8d39d7782b4d9714f</anchor>
      <arglist>(MFnPlugin &amp;plugin)</arglist>
    </member>
    <member kind="function">
      <type>MStatus</type>
      <name>uninitialize</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a8ca48d90df3a6a5cecc475f46ec3e613</anchor>
      <arglist>(MFnPlugin &amp;plugin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a024765145291d95c19ddabed9d99cfaf</anchor>
      <arglist>(ImageViewportPostProcess)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator&lt; T &gt;</type>
      <name>MArrayInserter</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a744776a3e55c6209b15c5d2b6e3d2616</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ObjectPtr</type>
      <name>mayaMesh</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a48cc3dd1da04e08647e6426d83458d85</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>executeMel</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>af99140eae7d775f03d0d6b181f1ee8f6</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a2680473ed437d35f6bfedcd1ed27fc8f</anchor>
      <arglist>(MessageHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a412e59cd1610275f9a453a666be4adba</anchor>
      <arglist>(ParameterHandler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>af2bc2723183564d74b85dad12bad88ea</anchor>
      <arglist>(PlaybackFrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a250ee88a36aac4935e93614f4d9da91d</anchor>
      <arglist>(PostLoadCallback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad5bf6328489fe08f89349eebe03736e7</anchor>
      <arglist>(ToMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4255683073f6e98410f6732fde8a717d</anchor>
      <arglist>(ToMayaGroupConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a3dc5061185a53a6a09c7172063cb3c7e</anchor>
      <arglist>(ToMayaImageConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a46868508f9cc7752de41c42be2c1e96a</anchor>
      <arglist>(ToMayaMeshConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a39714977af04f301abed32b070507f3f</anchor>
      <arglist>(ToMayaNumericDataConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aad68d32671f0f4f722c1e3fa14d211cb</anchor>
      <arglist>(ToMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a3736a6c45db87c8aac791fe7f4fe56ee</anchor>
      <arglist>(ToMayaPlugConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a9094d0967d41102a544b082adb321725</anchor>
      <arglist>(ToMayaSkinClusterConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a3d8cf524dfd05602bb84b85eee249b79</anchor>
      <arglist>(ToMayaSkinClusterConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>abcf4851442bb3388791dad270db99538</anchor>
      <arglist>(ViewportPostProcess)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>mayaDo</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4ff65f1b15d9fe828b1838e61fd78ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>createMenu</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a402933728df2de1cd877ce4ae8f77f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aefcf32d0537d0ab828267b29a417ee7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>createUI</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a40666bfe374eefd6666a1ae7ed2ea3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dependencyNodeFromString</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a86ff6c1f131d9f537379e5a341e63117</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parentFromString</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ac3c57a201d978bb980f6bfc8986ed776</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dagPathFromString</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a5b70f1889adb2f32784ea6c83a019688</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plugFromString</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a29b1a014ce4cbbf28ba97e7077b2d538</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pathFromPlug</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a0a440a3525c595a3ab7a6acabedced68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>nodeFromAttributePath</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aee8b4810a2d4d4c4e672718195658d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>SavePresetUI</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a14d4aa4fb6b1b2011882e9fa295201aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>LoadPresetUI</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a70e3f9e63a7a9fa5bb710212b04e795f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>copy</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a40528fbd9dd9b9daa3b5217c747add04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>copyClass</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a972050821b8ba704dddb0583fd27ffe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>paste</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ab738c1cd5b7dc546cc439fd22c00f5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pasteLinked</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a048ba0c2ca8139ec03e560df2d12d1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>manipulateParameter</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aafc7349080bfad8ce7b324d51ca18837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>__all__</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ac21b0ef82c2f6bc9fe99518d6429d110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>_ieCoreParameterClipboardUIBuffer</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>ad88b1eb2f27f65367fd9b77f29773db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>_ieCoreParameterClipboardUILastParameterList</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a653ccfadd74a9c306fb3e7bfd10bfeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>_ieCoreParameterClipboardUILastNode</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a14eeef6efc81fb090f9719447656b6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>_ieCoreParameterClipboardUILastRoot</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a030e310d7607f1d7918c41f8edd3b037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>_ieCoreParameterClipboardCallbacks</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aa6da1af366ed06084febc3e27e64f320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Collapsible</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a692058699694e70f0247845776e192a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meshNodeTransform</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a9a9693c05b74ae1d7c4e5588b8b214f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meshNodeShape</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a1523a5bd58a35037e3825c404791e88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meshNodeDestPlug</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a4b0dae9fc959a6ac773a71514ba17b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>meshNodeDestAttr</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a6072ed0bab38653bc220465a814dfb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>upstreamNodeTransform</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a7223d64527ea1049dfb6608edf603cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>upstreamNodeShape</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a1593bff7bfc8a1926fe4420b771e294f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>upstreamNodeSrcPlug</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>aef6a4d9396045b23d2504e1771ea7b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>upstreamNodeSrcAttr</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>acac8692643b37b1e94b5d15fdf978adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>modifierNodeSrcAttr</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a8bd89451c743ebd793d1a8dd88522f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>modifierNodeDestAttr</name>
      <anchorfile>namespaceIECoreMaya.html</anchorfile>
      <anchor>a056b366161b3f8166472e88f5ba07d47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::BoolParameterHandler</name>
    <filename>classIECoreMaya_1_1BoolParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1BoolParameterHandler.html</anchorfile>
      <anchor>af9fcf850fafd66bbd338b7a364c4f942</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1BoolParameterHandler.html</anchorfile>
      <anchor>af8200c5c7d5526b7ec07b36250dea667</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1BoolParameterHandler.html</anchorfile>
      <anchor>a4c19a4f1c9857a5aeca43f48c2ae2243</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1BoolParameterHandler.html</anchorfile>
      <anchor>a691bfe82a95b3837cf688ea12e760412</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::Box3Manipulator</name>
    <filename>classIECoreMaya_1_1Box3Manipulator.html</filename>
    <base>IECoreMaya::ParameterManipContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>createChildren</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>aa401d214e34e13c412a957d68e97cf71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>connectToDependNode</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>af64e1ae5d59431e22a06b75199273191</anchor>
      <arglist>(const MObject &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>ae31466549bf4ed037fa2022ad34768ac</anchor>
      <arglist>(M3dView &amp;view, const MDagPath &amp;path, M3dView::DisplayStyle style, M3dView::DisplayStatus status)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>vectorPlugToManipConversion</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a121cdfdfab8695b4915dad00501559aa</anchor>
      <arglist>(unsigned int manipIndex)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>vectorManipToPlugConversion</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>aa8b7dd9c33c1d8214746a9805d928529</anchor>
      <arglist>(unsigned int plugIndex)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>updateCenteredManipPosition</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a82b6d365c6d7104dda699ad6c225fdfc</anchor>
      <arglist>(unsigned int manipIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a915d5943da53c7e932d75f7420a65a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a21e4ea832bc90ce2547b870bb7b43287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a956adee51f7b79d31b8a2c5218cb0987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1Box3Manipulator.html</anchorfile>
      <anchor>a92770f8f5327a6b14decf9bbc0c3bdbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::BoxParameterHandler</name>
    <filename>classIECoreMaya_1_1BoxParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1BoxParameterHandler.html</anchorfile>
      <anchor>a091c105f1e5bb870b590ec3fb81dff77</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1BoxParameterHandler.html</anchorfile>
      <anchor>a8179b5a94aee8acf39a769e057398015</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1BoxParameterHandler.html</anchorfile>
      <anchor>aca6b70b0b7713279d097e4321f514e3d</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1BoxParameterHandler.html</anchorfile>
      <anchor>a97248e5cea9d96eb3df686be72064992</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::CacheSet</name>
    <filename>classIECoreMaya_1_1CacheSet.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstractClass</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a7a9c88be319d1a576bfbb24a69e55cd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>aa64954c5c57778e8b239ae94395a6943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a74c4f55f6c8b7708a9855e835a71e5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a175ec38568323d4aa79d1d99ff4262f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aActive</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a0f2c07e1cd10dea126cd42d3fdcc3567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aFrameRate</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a06dc0ba02383ee09489d2ec4e3d50fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aOversamples</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>aa09a081adc6ba4d24e366eb3efb755a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aOutFrameMel</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a7b74a9cb06fa81a6f5277dba32b622b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MString</type>
      <name>melFromStringArray</name>
      <anchorfile>classIECoreMaya_1_1CacheSet.html</anchorfile>
      <anchor>a1fdddeddbbc5ee584e6baefb61cb93f8</anchor>
      <arglist>(const MStringArray &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::CallbackId</name>
    <filename>classIECoreMaya_1_1CallbackId.html</filename>
    <member kind="function">
      <type></type>
      <name>CallbackId</name>
      <anchorfile>classIECoreMaya_1_1CallbackId.html</anchorfile>
      <anchor>a13d461ef21728514408f9b0b3fe972d8</anchor>
      <arglist>(MCallbackId id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CallbackId</name>
      <anchorfile>classIECoreMaya_1_1CallbackId.html</anchorfile>
      <anchor>acddd6128c8c33bce389f79d7f819719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CallbackId &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECoreMaya_1_1CallbackId.html</anchorfile>
      <anchor>afc6beaf4092f18b9ba19a70ca8de0cea</anchor>
      <arglist>(MCallbackId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ClassParameterHandler</name>
    <filename>classIECoreMaya_1_1ClassParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>setClass</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>af654f4812e86a8e44bed91a5f4351678</anchor>
      <arglist>(IECore::ParameterPtr parameter, const MString &amp;className, int classVersion, const MString &amp;searchPathEnvVar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>getClass</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a872d69b7167d3adfae2aa8eb5284678d</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MString &amp;className, int &amp;classVersion, MString &amp;searchPathEnvVar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>currentClass</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a632c81e39c9d1691b303dc46ed412347</anchor>
      <arglist>(const MPlug &amp;plug, MString &amp;className, int &amp;classVersion, MString &amp;searchPathEnvVar)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a1b0f0d063cdc88eeb65870657eb06c61</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a93294714def4162380b51694fc6c9192</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a75ea30353659e869ba309ba05f9593d8</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a6cffc7bf3af4438c1a5c9089b665298e</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doRestore</name>
      <anchorfile>classIECoreMaya_1_1ClassParameterHandler.html</anchorfile>
      <anchor>a7a413cb28eb03542541871cf615aba9d</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ClassVectorParameterHandler</name>
    <filename>classIECoreMaya_1_1ClassVectorParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>setClasses</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a018d25ad0020b8b7d952d7ee52363157</anchor>
      <arglist>(IECore::ParameterPtr parameter, const MStringArray &amp;parameterNames, const MStringArray &amp;classNames, const MIntArray &amp;classVersions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>getClasses</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a97d4543787ef8fa6d04e2333e5241139</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MStringArray &amp;parameterNames, MStringArray &amp;classNames, MIntArray &amp;classVersions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>currentClasses</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>afe02688770d97ea9b7e102b77c3b0d75</anchor>
      <arglist>(const MPlug &amp;plug, MStringArray &amp;parameterNames, MStringArray &amp;classNames, MIntArray &amp;classVersions)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>aa61e7e5b8a282a503a3765c3c77c52fc</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a129c7dd9065b5f7a0e0a517cf59ba046</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a4d35fbf577e0453f6eafffcb0798f711</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a762de412b8a8f1c7be13ccca5385270a</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doRestore</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterHandler.html</anchorfile>
      <anchor>a63bc532eef416833f189e2cb6335a286</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ColorSplineParameterHandler</name>
    <filename>classIECoreMaya_1_1ColorSplineParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ColorSplineParameterHandler.html</anchorfile>
      <anchor>a37613fd6fcff8c4648f1df326ea06fa1</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ColorSplineParameterHandler.html</anchorfile>
      <anchor>ab50f4efa92b6d7aaef62334c1f4a9e24</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ColorSplineParameterHandler.html</anchorfile>
      <anchor>aaa8adfed2b5fd7fc175e188fca347057</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ColorSplineParameterHandler.html</anchorfile>
      <anchor>a46e1c1e68d99c7a938e93aa6505c7a09</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::CompoundNumericParameterHandler</name>
    <filename>classIECoreMaya_1_1CompoundNumericParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1CompoundNumericParameterHandler.html</anchorfile>
      <anchor>a8105a07dc5064bd9e401b291e1245a2e</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1CompoundNumericParameterHandler.html</anchorfile>
      <anchor>a8716093a52bebf9c21fa660e55a961ec</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1CompoundNumericParameterHandler.html</anchorfile>
      <anchor>a4bd1c6fc02072e238cad9a8dcae6560a</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1CompoundNumericParameterHandler.html</anchorfile>
      <anchor>ab0aeb0ad77dc55a6e6dbb9811a08e92d</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::CompoundParameterHandler</name>
    <filename>classIECoreMaya_1_1CompoundParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1CompoundParameterHandler.html</anchorfile>
      <anchor>a31c8f2135b949591932033176dde4cec</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1CompoundParameterHandler.html</anchorfile>
      <anchor>a1b5bf1b8608306eb4456323b95ad9197</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1CompoundParameterHandler.html</anchorfile>
      <anchor>a71a119dc4015991fee7824189beb1ab9</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1CompoundParameterHandler.html</anchorfile>
      <anchor>a48344a6cfcea5d1d9d63c47de44f9953</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ConverterHolder</name>
    <filename>classIECoreMaya_1_1ConverterHolder.html</filename>
    <base>IECoreMaya::ParameterisedHolder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>connectionMade</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>acfc5ff2c45b759e0b7e75d1ebda0aa92</anchor>
      <arglist>(const MPlug &amp;plug, const MPlug &amp;otherPlug, bool asSrc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>connectionBroken</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>a51cf09a64ad236b5c346749cf7ec3ba4</anchor>
      <arglist>(const MPlug &amp;plug, const MPlug &amp;otherPlug, bool asSrc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>aa99f173e70ad70aa78c508923bc04e22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>af8dfd02f3d85d44e8707bebb7122bbc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>a928e2db0d42e4185df03acf6b274cd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aIn</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>a62d41890b98f0819c4300db5e5baea6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aFileName</name>
      <anchorfile>classIECoreMaya_1_1ConverterHolder.html</anchorfile>
      <anchor>afa790b1c294955932e0a08aa4a81cf48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::CurveCombiner</name>
    <filename>classIECoreMaya_1_1CurveCombiner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>compute</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>ad9d674a02a242b8da37529311349368b</anchor>
      <arglist>(const MPlug &amp;plug, MDataBlock &amp;dataBlock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a8869102740884e91c337be5eee5f79e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a8ce74358015d3d05842d5557be6250ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a7035ee9d3efd7a97e2f6ac52051019ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a35b1f639ffcd438f555b053c895d7ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aInputCurves</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a8e401c2b720f997f5599a0cb41dff08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aOutputCurves</name>
      <anchorfile>classIECoreMaya_1_1CurveCombiner.html</anchorfile>
      <anchor>a1b53149601603cc494a124756b24f6bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::DateTimeParameterHandler</name>
    <filename>classIECoreMaya_1_1DateTimeParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1DateTimeParameterHandler.html</anchorfile>
      <anchor>a982c34e5e4ff2f15773b5bd19016b39c</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1DateTimeParameterHandler.html</anchorfile>
      <anchor>a674315d1875058f2e28a8311aa84de89</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1DateTimeParameterHandler.html</anchorfile>
      <anchor>ac624fdbd4a2dd073c95a0900e1ef0d77</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1DateTimeParameterHandler.html</anchorfile>
      <anchor>ad631fa1d73cdfdc8362a3a1fb963849e</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::DelightProceduralCacheCommand</name>
    <filename>classIECoreMaya_1_1DelightProceduralCacheCommand.html</filename>
    <member kind="function">
      <type>MStatus</type>
      <name>doIt</name>
      <anchorfile>classIECoreMaya_1_1DelightProceduralCacheCommand.html</anchorfile>
      <anchor>a2ab80a95d8a7dcc242fff527c587dc50</anchor>
      <arglist>(const MArgList &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1DelightProceduralCacheCommand.html</anchorfile>
      <anchor>ae77d09fcb1804a867bb7a64feb3fb1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MSyntax</type>
      <name>newSyntax</name>
      <anchorfile>classIECoreMaya_1_1DelightProceduralCacheCommand.html</anchorfile>
      <anchor>aa83d5544576066509339efc88428da66</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::DisplayStyle</name>
    <filename>classIECoreMaya_1_1DisplayStyle.html</filename>
    <member kind="function">
      <type>IECoreGL::ConstStatePtr</type>
      <name>baseState</name>
      <anchorfile>classIECoreMaya_1_1DisplayStyle.html</anchorfile>
      <anchor>ac456e0c5c6976a49741cf56ab6e24e54</anchor>
      <arglist>(M3dView::DisplayStyle style, bool transferCurrentColor=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FloatSplineParameterHandler</name>
    <filename>classIECoreMaya_1_1FloatSplineParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1FloatSplineParameterHandler.html</anchorfile>
      <anchor>a63daac9c1e7c73e27a222e9e0369c395</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1FloatSplineParameterHandler.html</anchorfile>
      <anchor>a6f086b73143588bf6ae5d00304a84f67</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1FloatSplineParameterHandler.html</anchorfile>
      <anchor>ad1a7b054a971c5c918918813838b71cd</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1FloatSplineParameterHandler.html</anchorfile>
      <anchor>a4224ec36be8636661a741b42ebd2f59d</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaArrayDataConverter</name>
    <filename>classIECoreMaya_1_1FromMayaArrayDataConverter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaArrayDataConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaArrayDataConverter.html</anchorfile>
      <anchor>ada19ff2ddf7565792856e54901a94249</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaArrayDataConverter.html</anchorfile>
      <anchor>a16c569e225933ad4b952199065a40293</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static FromMayaObjectConverterDescription&lt; FromMayaArrayDataConverter &gt;</type>
      <name>m_description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaArrayDataConverter.html</anchorfile>
      <anchor>a3d8e11a1ffd989ea7510df38f30aad8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaConverter</name>
    <filename>classIECoreMaya_1_1FromMayaConverter.html</filename>
    <base>IECore::ToCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaConverter.html</anchorfile>
      <anchor>afdf19b4e298c2bfcaedfd9c5b090fba4</anchor>
      <arglist>(FromMayaConverter, FromMayaConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaConverter.html</anchorfile>
      <anchor>a21fa16e5ca185c8835469484d6dd2634</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaCurveConverter</name>
    <filename>classIECoreMaya_1_1FromMayaCurveConverter.html</filename>
    <base>IECoreMaya::FromMayaShapeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>a6d03acdf1780863214364b128a402dd5</anchor>
      <arglist>(FromMayaCurveConverter, FromMayaCurveConverterTypeId, FromMayaShapeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaCurveConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>a719b93c4b655e225b5f8ede6654a3195</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaCurveConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>a031530b8dbbb340c8c18a048161454d0</anchor>
      <arglist>(const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>linearParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>ada2e50f60d9952c3a7db31b5447e374d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>linearParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>aef446b1cb17233a401726474b340a4a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>a13f37a29939857e28860be4410cd8c56</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaCurveConverter.html</anchorfile>
      <anchor>afda091fcc94adafe5bbe1a9709f1b0ac</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaDagNodeConverter</name>
    <filename>classIECoreMaya_1_1FromMayaDagNodeConverter.html</filename>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <class kind="class">IECoreMaya::FromMayaDagNodeConverter::Description</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter.html</anchorfile>
      <anchor>a2fb69767a3715ac4853a21d22584e538</anchor>
      <arglist>(FromMayaDagNodeConverter, FromMayaDagNodeConverterTypeId, FromMayaObjectConverter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromMayaDagNodeConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter.html</anchorfile>
      <anchor>a2936a527872de102b06f814322394398</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaDagNodeConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter.html</anchorfile>
      <anchor>a345f1b6d74e62a601db1ee0beb30eb51</anchor>
      <arglist>(const std::string &amp;description, const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter.html</anchorfile>
      <anchor>a57a9435cbe2b147d1cf9e9d73dd2b9b2</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter.html</anchorfile>
      <anchor>a6749fe991e51e0ae7c3fc895778bedcb</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaDagNodeConverter::Description</name>
    <filename>classIECoreMaya_1_1FromMayaDagNodeConverter_1_1Description.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaDagNodeConverter_1_1Description.html</anchorfile>
      <anchor>a4b2cc3062fb891235ca7f66f08850cc4</anchor>
      <arglist>(MFn::Type fromType, IECore::TypeId resultType, bool defaultConversion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaFluidConverter</name>
    <filename>classIECoreMaya_1_1FromMayaFluidConverter.html</filename>
    <base>IECoreMaya::FromMayaShapeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaFluidConverter.html</anchorfile>
      <anchor>a148692b94acaef05b6d5d248cf508493</anchor>
      <arglist>(FromMayaFluidConverter, FromMayaFluidConverterTypeId, FromMayaShapeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaFluidConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaFluidConverter.html</anchorfile>
      <anchor>ab895387108651826032de28e36ecd8c1</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaFluidConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaFluidConverter.html</anchorfile>
      <anchor>afe2e3db243a1ee57cd641c8e5ba678a2</anchor>
      <arglist>(const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaFluidConverter.html</anchorfile>
      <anchor>a5d979ae25550f1d22464bd5b010e4033</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaFluidConverter.html</anchorfile>
      <anchor>a66cbebdf5cda6a54f11d55ae9f221542</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaGroupConverter</name>
    <filename>classIECoreMaya_1_1FromMayaGroupConverter.html</filename>
    <base>IECoreMaya::FromMayaDagNodeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaGroupConverter.html</anchorfile>
      <anchor>a1ed44da619b4416fa3b9064b31e050e7</anchor>
      <arglist>(FromMayaGroupConverter, FromMayaGroupConverterTypeId, FromMayaDagNodeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaGroupConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaGroupConverter.html</anchorfile>
      <anchor>a03bf624e7b135997d07819638d27db76</anchor>
      <arglist>(const MDagPath &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaGroupConverter.html</anchorfile>
      <anchor>a125fa7a0ef241af2e62d170f2b50224b</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::CompoundParameterPtr</type>
      <name>m_meshParameters</name>
      <anchorfile>classIECoreMaya_1_1FromMayaGroupConverter.html</anchorfile>
      <anchor>add9a3a4a1ad59992eed91c1ef613beec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaImageConverter</name>
    <filename>classIECoreMaya_1_1FromMayaImageConverter.html</filename>
    <base>IECoreMaya::FromMayaConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a6487ab79d8297f5d27992d819cd172ca</anchor>
      <arglist>(FromMayaImageConverter, FromMayaImageConverterTypeId, FromMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaImageConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a5c0db265730d77219b0b9b7ef822ca36</anchor>
      <arglist>(MImage &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>const MImage &amp;</type>
      <name>image</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>ac08bfd3c9d144c253872a6c9b758268c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>depthParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a9f52c57044ef71cb77369da6e8776d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>depthParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a056ab9e235b31ccedf5feffe78bf5889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a83ad2ec62133063efe06129a10a676fb</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::BoolParameterPtr</type>
      <name>m_depthParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaImageConverter.html</anchorfile>
      <anchor>a126688db7b5311957fb588d90ebc0391</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaMatrixDataConverter</name>
    <filename>classIECoreMaya_1_1FromMayaMatrixDataConverter.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaMatrixDataConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixDataConverter.html</anchorfile>
      <anchor>a08a8702a465bdeb6cfbf618cd2623c16</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixDataConverter.html</anchorfile>
      <anchor>aa5c8311be9eb432a2e33b4c3f6bcda87</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static FromMayaObjectConverterDescription&lt; FromMayaMatrixDataConverter &gt;</type>
      <name>m_description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixDataConverter.html</anchorfile>
      <anchor>aa2614e7182d524bed5ab99cc522b01d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaMatrixVectorDataConverter</name>
    <filename>classIECoreMaya_1_1FromMayaMatrixVectorDataConverter.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaMatrixVectorDataConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>a5cc3b5b3969c3d36094a1ba8b94ce6bf</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>a2f7d3df23bfdfe9962ab87f67efbccbd</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static FromMayaObjectConverterDescription&lt; FromMayaMatrixVectorDataConverter &gt;</type>
      <name>m_description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>a39f70ccfd139d8c11e0115c34709e28c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaMeshConverter</name>
    <filename>classIECoreMaya_1_1FromMayaMeshConverter.html</filename>
    <base>IECoreMaya::FromMayaShapeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a82b8bb209d01b69061e0b3f9e8d46fde</anchor>
      <arglist>(FromMayaMeshConverter, FromMayaMeshConverterTypeId, FromMayaShapeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaMeshConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a75c15ae4f6a3616e3ef355d40f49332e</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaMeshConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>ae2b5739a5cf3af9c5cef39b303d052e3</anchor>
      <arglist>(const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function">
      <type>IECore::V3fVectorDataPtr</type>
      <name>points</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a47eb2089b1bc3c7ad0d380f430f3a1b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::V3fVectorDataPtr</type>
      <name>normals</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a57fd7bfc6fe69a4bb3b3ed6703c71a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::FloatVectorDataPtr</type>
      <name>s</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a864338461c6935f948c51c81136eed80</anchor>
      <arglist>(const MString &amp;uvSet=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::FloatVectorDataPtr</type>
      <name>t</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>adb16c91732f26de19ab422c699136bb1</anchor>
      <arglist>(const MString &amp;uvSet=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::IntVectorDataPtr</type>
      <name>stIndices</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a93aac3886a687be655bb39c81c45c28d</anchor>
      <arglist>(const MString &amp;uvSet=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::DataPtr</type>
      <name>colors</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a82e07980b950834a22776b064593efe5</anchor>
      <arglist>(const MString &amp;colorSet=&quot;&quot;, bool forceRgb=false) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::TypedData&lt; T &gt;::Ptr</type>
      <name>colors</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a13faaf06eb54790ddf8eef93f468d099</anchor>
      <arglist>(const MString &amp;colorSet=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameterPtr</type>
      <name>interpolationParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a1efeba69c9b2b75740a8a14e59a1f3cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameterPtr</type>
      <name>interpolationParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a4c88f4b14b579cfab4f9e698e14093ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>pointsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a13cc2f97d3afc98a64e477c2170e6d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>pointsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a0382e520b6d30f35dd4cdf2160d7799c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>normalsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a579e3671802fce6f96c5a4b92bfaf116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>normalsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a83c44c789bc8aeeb6fd01d2b80b6c545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>stParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>af785a647b8dd4d33c6e7ab7a24f90d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>stParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a112d21bf0f7bb7e654bf10b9d772a751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>extraSTParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>ad9c076727693bdcde0761100de18fd77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>extraSTParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a37965d882ead15025378fc1a712186ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>colorsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a2c2def49f34c848ad239eea986765ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>colorsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a2eb40f620e1a3c96e2a7f7d0b3925497</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>extraColorsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a62661feb2e76178ef079c0f89e9fe8cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>extraColorsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a2a78c63642a310a477780dcbd4724099</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>ac5a7424a9d82fb0030ed75f3929fe351</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaMeshConverter.html</anchorfile>
      <anchor>a3ecf3c10df0af4c406abe990688a9d80</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaNumericDataConverter</name>
    <filename>classIECoreMaya_1_1FromMayaNumericDataConverter.html</filename>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaNumericDataConverter.html</anchorfile>
      <anchor>aea40dc0cd1ac9366affa5fff992bd945</anchor>
      <arglist>(FromMayaNumericDataConverter, FromMayaNumericDataConverterTypeId, FromMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaNumericDataConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaNumericDataConverter.html</anchorfile>
      <anchor>a82cd5d5d68f6614a5eebda47c7bc2073</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaNumericDataConverter.html</anchorfile>
      <anchor>a2d82bf25ded80e7c38aae714f737a6f2</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaObjectConverter</name>
    <filename>classIECoreMaya_1_1FromMayaObjectConverter.html</filename>
    <base>IECoreMaya::FromMayaConverter</base>
    <class kind="class">IECoreMaya::FromMayaObjectConverter::FromMayaObjectConverterDescription</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a49c8f864c666d3a1d36464f6ce1d1f23</anchor>
      <arglist>(FromMayaObjectConverter, FromMayaObjectConverterTypeId, FromMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type>const MObject &amp;</type>
      <name>object</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a9ab8f575ef765e70728fdaece417cd75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>objectIsAlive</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>aa1c49c1cf4e798eed0c8d92738eb7b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameterPtr</type>
      <name>blindDataAttrPrefixParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a99478a1068f95668d5e8ac85de3b5b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstStringParameterPtr</type>
      <name>blindDataAttrPrefixParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>ab935040fc256d4df3b6c9fc3f08f03a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>blindDataRemoveNamespaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a9787e6b2c41e5c84a2d773bd01ed6a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>blindDataRemoveNamespaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a39edb39a6f9d14d0a6e43d592c54a85a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromMayaObjectConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a53382f742da46308e662484a12c838e9</anchor>
      <arglist>(const MObject &amp;object, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FromMayaObjectConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>aef387ea2fce108c916106eb1477bfc1d</anchor>
      <arglist>)(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaObjectConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>a25960cb2e5c65b7038b4210f971d616c</anchor>
      <arglist>(const std::string &amp;description, const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>ad8081d080257b2e426f38bfc45abfe8d</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>ac1bec7b4788c1ede1a1d91796bd623a3</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter.html</anchorfile>
      <anchor>af048cfb7491c3f935464361eeb46e5d1</anchor>
      <arglist>(const MFn::Type fromType, IECore::TypeId resultType, bool defaultConversion, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaObjectConverter::FromMayaObjectConverterDescription</name>
    <filename>classIECoreMaya_1_1FromMayaObjectConverter_1_1FromMayaObjectConverterDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FromMayaObjectConverterDescription</name>
      <anchorfile>classIECoreMaya_1_1FromMayaObjectConverter_1_1FromMayaObjectConverterDescription.html</anchorfile>
      <anchor>a2f41ffa5e6885ece0e0e4ddaa924a356</anchor>
      <arglist>(MFn::Type fromType, IECore::TypeId resultType, bool defaultConversion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaParticleConverter</name>
    <filename>classIECoreMaya_1_1FromMayaParticleConverter.html</filename>
    <base>IECoreMaya::FromMayaShapeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>abe11d1844751218b55b60105ce767db0</anchor>
      <arglist>(FromMayaParticleConverter, FromMayaParticleConverterTypeId, FromMayaShapeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaParticleConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>a2713b1c71bef92e1fac4532373e6c241</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromMayaParticleConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>ab3009e0cad6f0dab5ab517d844dbf844</anchor>
      <arglist>(const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function">
      <type>IECore::StringVectorParameterPtr</type>
      <name>attributeNamesParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>a509e9529e2c8d1de099a0fcb9e3c242d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstStringVectorParameterPtr</type>
      <name>attributeNamesParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>a349465a348309e62e010d81e21d1d3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>aa0c019c3d7f730d5501c11c59e2928dd</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>ac376e63a3bcae55bb2e559465dd682aa</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::StringVectorParameterPtr</type>
      <name>m_attributeNamesParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaParticleConverter.html</anchorfile>
      <anchor>ad6ab489483e55313c24ee5a0495df453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaPlugConverter</name>
    <filename>classIECoreMaya_1_1FromMayaPlugConverter.html</filename>
    <base>IECoreMaya::FromMayaConverter</base>
    <class kind="class">IECoreMaya::FromMayaPlugConverter::Description</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter.html</anchorfile>
      <anchor>a94e70989dd0e580b0e7414a6b50ccb19</anchor>
      <arglist>(FromMayaPlugConverter, FromMayaPlugConverterTypeId, FromMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type>const MPlug &amp;</type>
      <name>plug</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter.html</anchorfile>
      <anchor>a72c7c33fcd124fd27c30ea049a6ef341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromMayaConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter.html</anchorfile>
      <anchor>a8079270133f30088dafd85316df2962c</anchor>
      <arglist>(const MPlug &amp;plug, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaPlugConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter.html</anchorfile>
      <anchor>a72fa502321ffe1223c09b5a178a9c785</anchor>
      <arglist>(const MPlug &amp;plug)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaPlugConverter::Description</name>
    <filename>classIECoreMaya_1_1FromMayaPlugConverter_1_1Description.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter_1_1Description.html</anchorfile>
      <anchor>a8b9f3199e43664d6889451f0e7ed11bc</anchor>
      <arglist>(MFnData::Type fromType, IECore::TypeId resultType, bool isDefaultConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter_1_1Description.html</anchorfile>
      <anchor>ad53130a2b766cab125efd54c8f8df51b</anchor>
      <arglist>(MFnNumericData::Type fromType, IECore::TypeId resultType, bool isDefaultConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaPlugConverter_1_1Description.html</anchorfile>
      <anchor>ad4884878d40580aab120e63552433c60</anchor>
      <arglist>(MFnUnitAttribute::Type fromType, IECore::TypeId resultType, bool isDefaultConverter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaShapeConverter</name>
    <filename>classIECoreMaya_1_1FromMayaShapeConverter.html</filename>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <class kind="class">IECoreMaya::FromMayaShapeConverter::Description</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>ae75829ded72377f97878d4498c3a684e</anchor>
      <arglist>(FromMayaShapeConverter, FromMayaShapeConverterTypeId, FromMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type>IECore::IntParameterPtr</type>
      <name>spaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>ad4cca4653e007a45176477bc56a5fcf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntParameterPtr</type>
      <name>spaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>ab911beae4442d9512d0da908b1e95a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameterPtr</type>
      <name>primVarAttrPrefixParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a5a1df67c0c0a06d0e3be809251081707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstStringParameterPtr</type>
      <name>primVarAttrPrefixParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a31f0845039a5819100feda3d5f7391f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FromMayaShapeConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a8e885fcd9d7175e2dcf96fd8a5e5939c</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::TypeId resultType=IECore::InvalidTypeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaShapeConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a72b4a2be4adee3ce5390a8509953dcab</anchor>
      <arglist>(const std::string &amp;description, const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromMayaShapeConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>aaadd407bd4658cda45cd45db1226432f</anchor>
      <arglist>(const std::string &amp;description, const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a39073ada2da292269b1b6cf10ad7c542</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>abb7aae96bdf0f16083263bceb4bda859</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual IECore::PrimitivePtr</type>
      <name>doPrimitiveConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a5ef0de39102f6e292fad3766ddbadfd5</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MSpace::Space</type>
      <name>space</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>afd8f2eff1680fc653d1dab2597eacbae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MDagPath *</type>
      <name>dagPath</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter.html</anchorfile>
      <anchor>a478a30f408cf0fc7b2be612839f517e0</anchor>
      <arglist>(bool emitSpaceWarnings=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaShapeConverter::Description</name>
    <filename>classIECoreMaya_1_1FromMayaShapeConverter_1_1Description.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1FromMayaShapeConverter_1_1Description.html</anchorfile>
      <anchor>aa2df9795591674646c9aac0c7cee0229</anchor>
      <arglist>(MFn::Type fromType, IECore::TypeId resultType, bool defaultConversion)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaSkinClusterConverter</name>
    <filename>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</filename>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaSkinClusterConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</anchorfile>
      <anchor>a825b6b1daeda0aec4b45d7fb33beb04a</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</anchorfile>
      <anchor>ae04b99350fca6d9567b7931923ac23b5</anchor>
      <arglist>(FromMayaSkinClusterConverter, FromMayaSkinClusterConverterTypeId, FromMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type>IECore::IntParameterPtr</type>
      <name>influenceNameParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</anchorfile>
      <anchor>ab5046509865ebcec6f493b04f8ede437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntParameterPtr</type>
      <name>influenceNameParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</anchorfile>
      <anchor>a56da8ac1cfdbb8ed5bd8f39c406cd380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaSkinClusterConverter.html</anchorfile>
      <anchor>ae2eafda45c1668660c4ae847c55b11d6</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaTransformationMatrixConverter</name>
    <filename>classIECoreMaya_1_1FromMayaTransformationMatrixConverter.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::FromMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaTransformationMatrixConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformationMatrixConverter.html</anchorfile>
      <anchor>aed33e9f45fe933d8e8bc6f39c8c5cf3c</anchor>
      <arglist>(const MObject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformationMatrixConverter.html</anchorfile>
      <anchor>a806144066be3fda2da68d57b347a8df3</anchor>
      <arglist>(const MObject &amp;object, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FromMayaTransformConverter</name>
    <filename>classIECoreMaya_1_1FromMayaTransformConverter.html</filename>
    <base>IECoreMaya::FromMayaDagNodeConverter</base>
    <member kind="function">
      <type></type>
      <name>FromMayaTransformConverter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a107f959d9631d04268e9eb139fe339d4</anchor>
      <arglist>(const MDagPath &amp;dagPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>ad2e855fbe7f76c4e49e297339f066fb8</anchor>
      <arglist>(FromMayaTransformConverter, FromMayaTransformConverterTypeId, FromMayaDagNodeConverter)</arglist>
    </member>
    <member kind="function">
      <type>IECore::IntParameterPtr</type>
      <name>spaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a4f90495e4066b55bd7a9724e617a8956</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntParameterPtr</type>
      <name>spaceParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a4f32b9a624d38a2c623659fdb117eb33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>eulerFilterParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a41a874c8dcb04239129a12130655d136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>eulerFilterParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>ae1988cf3757d98983d27746be8e43744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>zeroPivotsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a3a04e21f479b755f3b6df127e4cc8547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>zeroPivotsParameter</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>a41aa6150df454061c1cf1214bbfcba17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1FromMayaTransformConverter.html</anchorfile>
      <anchor>ace2a790783779f56f95c2eee5d9fd4ec</anchor>
      <arglist>(const MDagPath &amp;dagPath, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::GeometryCombiner</name>
    <filename>classIECoreMaya_1_1GeometryCombiner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>compute</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>aa53a63c77a8f88248d760c3b4a7c26a4</anchor>
      <arglist>(const MPlug &amp;plug, MDataBlock &amp;dataBlock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>ac2aa6955d075dd9fd14893d1c8be552a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>a18e7c28c3c471544e3ba9893fa177c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>aad258e0102ce62616348eb4e5a0cf05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>a1cbfe4568ab173bd6d0327a67c8bf468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aConvertPrimVars</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>a790bb42bf7dd6b13740201738c41926a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aConvertBlindData</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>a87cb2aff6a12a2bdd95c7f6383a55281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aInputGeometry</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>a6299ec24f040d4115b55e4c48f3ba139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aOutputGroup</name>
      <anchorfile>classIECoreMaya_1_1GeometryCombiner.html</anchorfile>
      <anchor>adade985b778b4a81850cbd7ae85a7e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ImagePlaneHolder</name>
    <filename>classIECoreMaya_1_1ImagePlaneHolder.html</filename>
    <base>IECoreMaya::ParameterisedHolder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postConstructor</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>a82c9ba3e83368652792717f36cc5cb36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setDependentsDirty</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>adec4eb6b7d055dacc723f9ea45dcdeca</anchor>
      <arglist>(const MPlug &amp;plug, MPlugArray &amp;plugArray)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>loadImageMap</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>ac554a7ab6a73e6fa4b64c6b2482402f7</anchor>
      <arglist>(const MString &amp;fileName, int frame, MImage &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>MStatus</type>
      <name>setOp</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>a81f95b81a01de7ff108624723da4a96c</anchor>
      <arglist>(const std::string &amp;className, int classVersion)</arglist>
    </member>
    <member kind="function">
      <type>IECore::OpPtr</type>
      <name>getOp</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>ae5293429c6cd347b47cdd358f17d4f9d</anchor>
      <arglist>(std::string *className=0, int *classVersion=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>a69c263ecbbdd0b091fca64877ca24605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>a0eedea5ecb25f1aa8def4e5c9853a8ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1ImagePlaneHolder.html</anchorfile>
      <anchor>a094412456bd7b84b680708caa3979b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ImageViewportPostProcess</name>
    <filename>classIECoreMaya_1_1ImageViewportPostProcess.html</filename>
    <base>IECoreMaya::ViewportPostProcess</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>postRender</name>
      <anchorfile>classIECoreMaya_1_1ImageViewportPostProcess.html</anchorfile>
      <anchor>a592a62a0938c07f224898ae66a0736e4</anchor>
      <arglist>(const std::string &amp;panelName, IECore::ImagePrimitivePtr image)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::MArrayIter</name>
    <filename>structIECoreMaya_1_1MArrayIter.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>MArrayTraits&lt; T &gt;::ValueType *</type>
      <name>Iterator</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a1c0e793661ad90616f6ee43f63260ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const MArrayTraits&lt; T &gt;::ValueType *</type>
      <name>ConstIterator</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a832ba67c836f19a74c3772fbd8792a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; Iterator &gt;</type>
      <name>ReverseIterator</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a0c44483d8c1e3c4772f59608b6a4715c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a96a7927fb1481d0c1462d61c029e6769</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>begin</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a5fa06a63b49ffe1eec83ee55e1cf67ac</anchor>
      <arglist>(T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstIterator</type>
      <name>begin</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a177375a611866654531d3fbe8946cec6</anchor>
      <arglist>(const T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>end</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a2941ee93ec1718aee93fe78009a63b35</anchor>
      <arglist>(T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstIterator</type>
      <name>end</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>aeada9be9978937c3ca0178d50e2799d1</anchor>
      <arglist>(const T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReverseIterator</type>
      <name>reverseBegin</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>addd17f7c1c9727c445d062f1a53f6cd5</anchor>
      <arglist>(T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstReverseIterator</type>
      <name>reverseBegin</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a6f6dc3ae68b43c74b5da072cc5e63cf0</anchor>
      <arglist>(const T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReverseIterator</type>
      <name>reverseEnd</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a24cfd265a92c4351d121011b830452a6</anchor>
      <arglist>(T &amp;array)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstReverseIterator</type>
      <name>reverseEnd</name>
      <anchorfile>structIECoreMaya_1_1MArrayIter.html</anchorfile>
      <anchor>a20a6c9f23c7f062b557bef485c330be3</anchor>
      <arglist>(const T &amp;array)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::MayaAppendIterator</name>
    <filename>classIECoreMaya_1_1MayaAppendIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ContainerType</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a2d73cce3343939b9ef996a6ed7286f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MayaAppendIterator</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a521dfc0213a7c4ee25a904e229f97ea0</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a7b110a0a0d902bef7e66760ba25a3487</anchor>
      <arglist>(const typename IECoreMaya::MArrayTraits&lt; T &gt;::ValueType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator*</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a93759eb24c38352512ddf56d414ac50d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>ad6ca2f4ea539f10fdf99bf38aa73ed25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator</type>
      <name>operator++</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a706d42e9b5f42474db0871f84d2a5793</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>m_container</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator.html</anchorfile>
      <anchor>a73573da7ca6d3253c653347d891d6a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::MayaAppendIterator&lt; MStringArray &gt;</name>
    <filename>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</filename>
    <member kind="typedef">
      <type>MStringArray</type>
      <name>ContainerType</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>ada3adc37b50b8b975f375faf7f16e757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MayaAppendIterator</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>ac82aa7d5524ad19c8ea058c04b4b393c</anchor>
      <arglist>(MStringArray &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>a3220d4e5133d642e52f06ca5520b6e81</anchor>
      <arglist>(const MString &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>a9a421c6190a045af10f81dc8f29258bb</anchor>
      <arglist>(const std::string &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator*</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>a12e1fd3244aac35ee9f306d3f4f272ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>aefe6a75dc6c42f4d646699e46a1f6c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MayaAppendIterator</type>
      <name>operator++</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>a0ca83a0ce0f3eba90b972e77094dedba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MStringArray *</type>
      <name>m_container</name>
      <anchorfile>classIECoreMaya_1_1MayaAppendIterator_3_01MStringArray_01_4.html</anchorfile>
      <anchor>a230478e5a3f6b7a1f75604aa5a001664</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::MArrayTraits</name>
    <filename>structIECoreMaya_1_1MArrayTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>ValueType</name>
      <anchorfile>structIECoreMaya_1_1MArrayTraits.html</anchorfile>
      <anchor>ab161cceef9bb846cd4fc136f93e45cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>DataFn</name>
      <anchorfile>structIECoreMaya_1_1MArrayTraits.html</anchorfile>
      <anchor>aee05bf9d519663ff8dfe02e43dfb8457</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MFn::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1MArrayTraits.html</anchorfile>
      <anchor>afc05565aa8fa9ce6e0b4bd8b1748f048</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::MayaMeshBuilder</name>
    <filename>classIECoreMaya_1_1MayaMeshBuilder.html</filename>
    <templarg></templarg>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>T</type>
      <name>BaseType</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a1da04125106063679e3d2b9c5e366c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IECore::IntrusivePtr&lt; MayaMeshBuilder&lt; T &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>aa5a9fb4272276e03c604dad09d49424d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IECore::IntrusivePtr&lt; const MayaMeshBuilder&lt; T &gt; &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>ac0826bc15a846dbffb1e411ed46ac5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MayaMeshBuilder</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a2d9493353f51c7707c7e26471ce04068</anchor>
      <arglist>(MObject parentOrOwner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a54f3bc59c6444f62cde4d25da3dcc6f1</anchor>
      <arglist>(const Imath::Vec3&lt; T &gt; &amp;p, const Imath::Vec3&lt; T &gt; &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangle</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>aae0db31a5c1392ab895419bf456fd5f8</anchor>
      <arglist>(int v0, int v1, int v2)</arglist>
    </member>
    <member kind="function">
      <type>MObject</type>
      <name>mesh</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a104a5e32e74b76b68092bb598db5fdf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MObject</type>
      <name>m_parentOrOwner</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a0a2db21fb3fa6ecf06188d74212dd048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data *</type>
      <name>m_data</name>
      <anchorfile>classIECoreMaya_1_1MayaMeshBuilder.html</anchorfile>
      <anchor>a929a40948754fa90d6d1101eb7aeb7b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::MayaTime</name>
    <filename>classIECoreMaya_1_1MayaTime.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>fps</name>
      <anchorfile>classIECoreMaya_1_1MayaTime.html</anchorfile>
      <anchor>a15d68810347b4ce1bb3561c22a6bff64</anchor>
      <arglist>(MTime::Unit unit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MTime::Unit</type>
      <name>unit</name>
      <anchorfile>classIECoreMaya_1_1MayaTime.html</anchorfile>
      <anchor>a075a26fc4a1391c6c249221886d49346</anchor>
      <arglist>(double fps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::MDataHandleAccessor</name>
    <filename>structIECoreMaya_1_1MDataHandleAccessor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>ReturnType</name>
      <anchorfile>structIECoreMaya_1_1MDataHandleAccessor.html</anchorfile>
      <anchor>af24201e33a4d8735f563dcf4f9cea2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECoreMaya_1_1MDataHandleAccessor.html</anchorfile>
      <anchor>a875204fbd7ac476610c7533d048109c7</anchor>
      <arglist>(sizeof(T)==0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>get</name>
      <anchorfile>structIECoreMaya_1_1MDataHandleAccessor.html</anchorfile>
      <anchor>afc9f03cdb75d03f1ddffcd1cfe18b73d</anchor>
      <arglist>(const MDataHandle &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::MeshParameterHandler</name>
    <filename>classIECoreMaya_1_1MeshParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1MeshParameterHandler.html</anchorfile>
      <anchor>a51825cff3be607a4a53b99d07baeac99</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1MeshParameterHandler.html</anchorfile>
      <anchor>a81eb91401f728d1991d18b96d04c206f</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1MeshParameterHandler.html</anchorfile>
      <anchor>a6da63367125aaabd40594731fb5872c3</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1MeshParameterHandler.html</anchorfile>
      <anchor>a7f201072d77967e96a94462cbaff74b0</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::MFnDataTypeTraits</name>
    <filename>structIECoreMaya_1_1MFnDataTypeTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>ValueType</name>
      <anchorfile>structIECoreMaya_1_1MFnDataTypeTraits.html</anchorfile>
      <anchor>a2b7b1dfae610db5741b5944252535e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MFn::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1MFnDataTypeTraits.html</anchorfile>
      <anchor>aecbb2ec80299b4c01a5d83b2caade5ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::MImageAccessor</name>
    <filename>structIECoreMaya_1_1MImageAccessor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>ReturnType</name>
      <anchorfile>structIECoreMaya_1_1MImageAccessor.html</anchorfile>
      <anchor>a1478e8460d9e0baec414aa25abe04884</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structIECoreMaya_1_1MImageAccessor.html</anchorfile>
      <anchor>a818175a8e21c4ef21f2604f0f769d632</anchor>
      <arglist>(sizeof(T)==0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>getPixels</name>
      <anchorfile>structIECoreMaya_1_1MImageAccessor.html</anchorfile>
      <anchor>a03ea7af8ededb9d3e0de51c52c51f0c1</anchor>
      <arglist>(MImage &amp;i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::NumericParameterHandler</name>
    <filename>classIECoreMaya_1_1NumericParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1NumericParameterHandler.html</anchorfile>
      <anchor>a7ceaf6abf0cc616dcb72eb4683dd21ff</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1NumericParameterHandler.html</anchorfile>
      <anchor>a9fd699b9022cd317054cfd34f8efdcfe</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1NumericParameterHandler.html</anchorfile>
      <anchor>adfca1a935c2415a330aea5c5b2ab123c</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1NumericParameterHandler.html</anchorfile>
      <anchor>a1f92879960f925d270c8ca4fb84292e8</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::NumericTraits</name>
    <filename>structIECoreMaya_1_1NumericTraits.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>af79175a705dc1af74f49a15d106fc836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a9164057ff860a4418b0cb02d0e7613f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a32f5dfa6bc231248f9eaf2107e3b5cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>ae91c74a2bfbbd8c58aae4c2cf86e0290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>ad8de694f0330b187569637644a180fd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a3e241213a4959f2becb71e59652b1287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a3b5f7c508064e85ad5863c318e804af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a73f6aa84b197ac8b566ced09dd0213ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a0c5f695dabec619bc9bb872dbbdcf2df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a3f0d085e20ad5b43209a084d6f884bc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a8c86c6b7fcb55cec7d267a098e4de458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a14894ff0ba039ebf9c033cf9e079cd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>aaf9414abc03f95f9f93da985a3e75e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a4df6575a78cc941332590ff2f746ca99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>aac751ce6bfb9c8cbe954409245ea048b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a9ce297057fc8b02e64f0c201d55342ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>af29dd5eb0bd4ee6545b128f7244a5920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>ac28c49cc0c79b1d0a090f95d0cad4043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColor</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a4feda3ab8ce8999207249d29a41ef7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MFnNumericData::Type</type>
      <name>dataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a6a7fb7f51a9c3466c4d4e47361f0b3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MFnNumericData::Type</type>
      <name>baseDataType</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a65348b24d3c3764a9a3a2ff624c72a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isColor</name>
      <anchorfile>structIECoreMaya_1_1NumericTraits.html</anchorfile>
      <anchor>a6a5192e2f30e0741b9fad8c5ccfd0907</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ObjectData</name>
    <filename>classIECoreMaya_1_1ObjectData.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>readASCII</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a4690665fc6621d00223e290d97375de6</anchor>
      <arglist>(const MArgList &amp;argList, unsigned int &amp;endOfTheLastParsedElement)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>readBinary</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a4150608fcbeee8b9ed7ba0b65d4079fe</anchor>
      <arglist>(istream &amp;in, unsigned length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>writeASCII</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>acc3cf5d6ba2c19fbe148b6aee96327ab</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>writeBinary</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a9b6650b89f4b0714d1c6c37cf53d8d44</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a2bcce8e7afe967a47e6a86fd663a9931</anchor>
      <arglist>(const MPxData &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MTypeId</type>
      <name>typeId</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a48ba93b43a2b438c9591f61bda24ac97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MString</type>
      <name>name</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>ae387655a58edb2088b9491ac7d527b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCopyMode</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>ad9319605be7a4804ad93730d2a5ffe95</anchor>
      <arglist>(CopyMode mode)</arglist>
    </member>
    <member kind="function">
      <type>CopyMode</type>
      <name>getCopyMode</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>ab2081759b5b281eab02c0411ec846dad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::ObjectPtr</type>
      <name>getObject</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a0ef66e563c07b1295b580fc2f6822ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstObjectPtr</type>
      <name>getObject</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a6c299d5eb68226cf8bf4e7766d0f7383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObject</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a53bb4f2f2430fb6a98f565bfa6aead27</anchor>
      <arglist>(IECore::ObjectPtr object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a56a8a5c10763d14fdc945af0091d0af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>aea4c61a767ff445a169ae1ffd644409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a96ff424f226cb60bfca8d70b235144c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CopyMode</type>
      <name>m_copyMode</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>ac3e8290fbee99a06fb6c272b241b4495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::ObjectPtr</type>
      <name>m_object</name>
      <anchorfile>classIECoreMaya_1_1ObjectData.html</anchorfile>
      <anchor>a595d5682468124c537de97bb1de30cd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ObjectMFnDataParameterHandler</name>
    <filename>classIECoreMaya_1_1ObjectMFnDataParameterHandler.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ObjectMFnDataParameterHandler.html</anchorfile>
      <anchor>a226de875adbfffe390ca31cdea1278e9</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ObjectMFnDataParameterHandler.html</anchorfile>
      <anchor>a5ffb94fa249e100292d3feb10b590af7</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ObjectMFnDataParameterHandler.html</anchorfile>
      <anchor>ade1a84f056bc3b5f14ef3492bdf02b1f</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ObjectMFnDataParameterHandler.html</anchorfile>
      <anchor>a004c7e69fcd07a0d8e56b317f5997781</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ObjectVectorParameterHandler</name>
    <filename>classIECoreMaya_1_1ObjectVectorParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ObjectVectorParameterHandler.html</anchorfile>
      <anchor>a43cea9469606eb3ffdad6b8f8adfb247</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ObjectVectorParameterHandler.html</anchorfile>
      <anchor>a06e18500e4e94aea7383dda81cebe519</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ObjectVectorParameterHandler.html</anchorfile>
      <anchor>a4e8b59c49908b77050de94aa1737c599</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ObjectVectorParameterHandler.html</anchorfile>
      <anchor>a1e2f0ccfe06dab428ace3b11e2252b4b</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::OpHolder</name>
    <filename>classIECoreMaya_1_1OpHolder.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterisedHolder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setDependentsDirty</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>adeb0807ff9d19d6e976a5fb9e9c5d055</anchor>
      <arglist>(const MPlug &amp;plug, MPlugArray &amp;plugArray)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>compute</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>a9529a45af76c0394c18da11ac3288057</anchor>
      <arglist>(const MPlug &amp;plug, MDataBlock &amp;block)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>ae1e22a3a6e7e05c372fd965f8610b349</anchor>
      <arglist>(IECore::RunTimeTypedPtr p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>ad9bde194a06f455ea78900a29d9e04ee</anchor>
      <arglist>(std::string *className=0, int *classVersion=0, std::string *searchPathEnvVar=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setOp</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>a02140d02a3301a69d097b982a222d997</anchor>
      <arglist>(const std::string &amp;className, int classVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::OpPtr</type>
      <name>getOp</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>ad30101d08a053f8a5b55695c54b64c8c</anchor>
      <arglist>(std::string *className=0, int *classVersion=0, std::string *searchPathEnvVar=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>a6581921205bd275ba49e7a71121108f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>a9a1ffc875ae103a52733c85fe9749688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1OpHolder.html</anchorfile>
      <anchor>a9ce8b6f483d41eecc0fd9f0237cdbd8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterHandler</name>
    <filename>classIECoreMaya_1_1ParameterHandler.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function" static="yes">
      <type>static MPlug</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a6427d0fd62962dad0ba8aee6158f523d</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>update</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a70a5423e9eb703b26d8533a17cd7955e</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>setValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a6a20058068a3731deaf33cb50cff92e0</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>setValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a51ddb44e46e22a97f689784f37d23ee1</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>restore</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a32fc3600b51a9e677e47d73727c53150</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MPlug</type>
      <name>finishCreating</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>adf96e857bdac3efd5cc1912f01a7a346</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MPlug</type>
      <name>finishCreating</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>adabf51aeec50dff60772f62179194f11</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MObject &amp;attribute, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MStatus</type>
      <name>finishUpdating</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a6d2445642cc841f89859f5f32185dedd</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MStatus</type>
      <name>finishUpdating</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a5c768c62417d7ac7feb02c11679a7222</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MObject &amp;attribute, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>ab26f3683f5c7ae7d26f892185090a959</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a6e0873dbd934b5e46059a1ded9428332</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a71999338244bd732bc403145455ed978</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a32ff3352dd230279c4f0e2134b50c994</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doRestore</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>af6825ea73cd11c6bd059f46cdfafc489</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstParameterHandlerPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>aece3a5d94798f0bfc4239613693aa6be</anchor>
      <arglist>(IECore::ConstParameterPtr parameter)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstParameterHandlerPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>adf7fdde38e0ec558a500296cc41debdc</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstParameterHandlerPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a563f7bd04d27acddd45cdb3873eb871c</anchor>
      <arglist>(IECore::TypeId id)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ObjectParameterHandler</name>
      <anchorfile>classIECoreMaya_1_1ParameterHandler.html</anchorfile>
      <anchor>a65202907cf3958d16cb641917d792327</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterisedHolder</name>
    <filename>classIECoreMaya_1_1ParameterisedHolder.html</filename>
    <templarg>BaseType</templarg>
    <base>IECoreMaya::ParameterisedHolderInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postConstructor</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>acaa016db6fc2681f070b5c463da236e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setDependentsDirty</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a2b008623886b1722c999161f5326b75c</anchor>
      <arglist>(const MPlug &amp;plug, MPlugArray &amp;plugArray)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>shouldSave</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>aa8f5c05a4852aa2b3c94031f2ba5f2a4</anchor>
      <arglist>(const MPlug &amp;plug, bool &amp;isSaving)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>aab1f21df61a9f3bad63d68368258d573</anchor>
      <arglist>(IECore::RunTimeTypedPtr p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>adf37674ebedced079a0b5ce7158f579b</anchor>
      <arglist>(const std::string &amp;className, int classVersion, const std::string &amp;searchPathEnvVar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>updateParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>acec9200a9996e1b7d1c7c955ce549383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a2d4489c05d39e6d6bef2454f59b07b6e</anchor>
      <arglist>(std::string *className=0, int *classVersion=0, std::string *searchPathEnvVar=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setNodeValues</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a68180e60faafe73b3b1720560bf9ba5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setNodeValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>abbff64ef51ff06bade92c83ccaf48302</anchor>
      <arglist>(IECore::ParameterPtr pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setParameterisedValues</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>af1fcdf3d842ea3fe70be30637ee77d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setParameterisedValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>ab21568a451d415bc33a35066d5006987</anchor>
      <arglist>(IECore::ParameterPtr pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>parameterPlug</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>aba6e9421f0a6069fa14983435d817aad</anchor>
      <arglist>(IECore::ConstParameterPtr parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ParameterPtr</type>
      <name>plugParameter</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a3760d68b60628bb8d2e02111af660c63</anchor>
      <arglist>(const MPlug &amp;plug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a7b9518e44e842bd4fdb35479567bee68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a91e73ba8e1adb13f8b6fc1c2a8813d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a247fd15eff4ea280e112093e3f0a1324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>ab20e55cfbb2701ba116156fb40b24bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aParameterisedClassName</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a0ff05ee74591b3b82c4ba84f0dd53990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aParameterisedVersion</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a193524c7a6e1c4cdf7bb9a7b9710e015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aParameterisedSearchPathEnvVar</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>af7c811e8c31ad68f3d980b6ccbad9685</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MStatus</type>
      <name>setParameterisedValues</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a6924a0b6c789b006ac7cf75a635dcdde</anchor>
      <arglist>(bool lazy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MStatus</type>
      <name>createOrUpdateAttribute</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a668f643a5193538c343bd8bdab9b43e3</anchor>
      <arglist>(IECore::ParameterPtr parameter, const MString &amp;attributeName, bool callRestore=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IECore::RunTimeTypedPtr</type>
      <name>m_parameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>a62560b666edf420f347dadcbc4f765c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_failedToLoad</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>affe8d980386cc684d98c4582e9e11eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>g_attributeNamePrefix</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolder.html</anchorfile>
      <anchor>aeb11c80f238ee09eec8314b4198031d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterisedHolderInterface</name>
    <filename>classIECoreMaya_1_1ParameterisedHolderInterface.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>acc5db19608b8f9a6d4157081c713ff59</anchor>
      <arglist>(const std::string &amp;className, int classVersion, const std::string &amp;searchPathEnvVar)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>acbeea33b229a552c9250673a39d0d077</anchor>
      <arglist>(IECore::RunTimeTypedPtr p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>updateParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>af61abedc33bb62406444431a803af4b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IECore::RunTimeTypedPtr</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>ac915cdb4a88f536898ee8f42db6302cc</anchor>
      <arglist>(std::string *className=0, int *classVersion=0, std::string *searchPathEnvVar=0)=0</arglist>
    </member>
    <member kind="function">
      <type>IECore::ParameterisedInterface *</type>
      <name>getParameterisedInterface</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a5bf8272e5beaa11b2e46801778c2e096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ParameterisedInterface *</type>
      <name>getParameterisedInterface</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>afd0da7fbdece58701d1e031eea80f6ab</anchor>
      <arglist>(std::string *className, int *classVersion=0, std::string *searchPathEnvVar=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setNodeValues</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a40a387fe5c120377dc52d2a7020550b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setNodeValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a816ac5cccd0eb12c97c213315ede6601</anchor>
      <arglist>(IECore::ParameterPtr pa)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setParameterisedValues</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a8f755d6269604060ad3936d5588d0514</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MStatus</type>
      <name>setParameterisedValue</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>abaf9a3a3e3e44cbc1f377ec6d2635faf</anchor>
      <arglist>(IECore::ParameterPtr pa)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MPlug</type>
      <name>parameterPlug</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a2e6265bbab4d6cc9cfe708cfd3738026</anchor>
      <arglist>(IECore::ConstParameterPtr parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IECore::ParameterPtr</type>
      <name>plugParameter</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderInterface.html</anchorfile>
      <anchor>a3dcbc5a6799f651584f6e2b2e4a5b534</anchor>
      <arglist>(const MPlug &amp;plug)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterisedHolderManipContext</name>
    <filename>classIECoreMaya_1_1ParameterisedHolderManipContext.html</filename>
    <member kind="enumeration">
      <name>Mode</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a539336fb537566955803307128ca18bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a539336fb537566955803307128ca18bba827fc5f77a8202f697314a75b2783f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>First</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a539336fb537566955803307128ca18bbaea62266b339daefb154bf0b4c1c29621</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Targeted</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a539336fb537566955803307128ca18bba1d39fea5e0314f96e79689f7d6e47baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>aac01ecabf2d5567a1d7a8b34136a32af</anchor>
      <arglist>(MString &amp;plugName)</arglist>
    </member>
    <member kind="function">
      <type>MString</type>
      <name>getTarget</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a96729cc42baf4108004e95a3507185c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a8e525414d56e07e673afbdbfd9c45d20</anchor>
      <arglist>(Mode m)</arglist>
    </member>
    <member kind="function">
      <type>Mode</type>
      <name>getMode</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>ac521478c5ecd4600d27226914989b9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toolOnSetup</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>af841216a65a12927d30eddf5646c6ae7</anchor>
      <arglist>(MEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>toolOffCleanup</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>a07e9dd98d227bbb929ded9db43a98262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateManipulators</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContext.html</anchorfile>
      <anchor>afc6de4a1788cd8949696a715fa7bc3b1</anchor>
      <arglist>(void *blindData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterisedHolderManipContextCommand</name>
    <filename>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doEditFlags</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>a6687aea2fdb243f43df207b936d4be94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doQueryFlags</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>a35eba3cd93ff3e93bced306eee665155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MPxContext *</type>
      <name>makeObj</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>a45735fa0b013b9b33f4b4ecc28521dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>appendSyntax</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>a0f31f703957723fe303e8875e33cef01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>ac222596ea5f5495cbd33408d74decef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterisedHolderManipContext *</type>
      <name>m_context</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderManipContextCommand.html</anchorfile>
      <anchor>a404454eb508273a366a3bc588e75ad71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterisedHolderSetValueCmd</name>
    <filename>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUndoable</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>aa9700e61c27906b374658926c8966ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doIt</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>a9f78cb2faeb9bfed7a2156f75edd9e73</anchor>
      <arglist>(const MArgList &amp;argList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>undoIt</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>ae9e68576d1d6b97a9233221513f2157c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>redoIt</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>addfa4cbb86e094e83a86b5b42763e334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>a51cefdd6bc6c136db938b27be2b42af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MSyntax</type>
      <name>newSyntax</name>
      <anchorfile>classIECoreMaya_1_1ParameterisedHolderSetValueCmd.html</anchorfile>
      <anchor>a7cf733dd6f174c2e83b7043d7a3495eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterManipContainer</name>
    <filename>classIECoreMaya_1_1ParameterManipContainer.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setPlug</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>a4b1ae546a31e84964fef434574a04ecc</anchor>
      <arglist>(MPlug &amp;plug)</arglist>
    </member>
    <member kind="function">
      <type>MPlug</type>
      <name>getPlug</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>ab9d62c188d65807c226dd9a18fc30dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLabel</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>a9770816bee5a862a29c356aa03da3baa</anchor>
      <arglist>(MString &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>MString</type>
      <name>getLabel</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>a0575e9f237357992ce24a2e2d4a3d4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MPlug</type>
      <name>m_plug</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>a93381d8dbd19d7b91b8df6d550d2b45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MString</type>
      <name>m_label</name>
      <anchorfile>classIECoreMaya_1_1ParameterManipContainer.html</anchorfile>
      <anchor>adfc3bcddc9da35b55d18b1b32480055f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::PlaybackFrameList</name>
    <filename>classIECoreMaya_1_1PlaybackFrameList.html</filename>
    <base>IECore::FrameList</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a687974e6b947cadc4a7cb90b6e676df7</anchor>
      <arglist>(PlaybackFrameList, PlaybackFrameListTypeId, IECore::FrameList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlaybackFrameList</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>af1b4f4580e19f773eefa50b33ee6700f</anchor>
      <arglist>(Range r)</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getRange</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a60f6fde9633283b1bc8949df70f7b868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a31f1f9cb22d74c7828fc3867af708b5f</anchor>
      <arglist>(Range r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>asList</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a5f744353d5dbcfb5f317db28af8f69f3</anchor>
      <arglist>(std::vector&lt; Frame &gt; &amp;frames) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>asString</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a329058bd0935abd5b14ac23b9a14f196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEqualTo</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a2709229ea195e61c7a72f86cff3d7bf8</anchor>
      <arglist>(IECore::ConstFrameListPtr other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::FrameListPtr</type>
      <name>copy</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a54d26b84311fb52dd8d5af2a5817ce5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IECore::FrameListPtr</type>
      <name>parse</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a37e57c2afc16a606c95406fefe89a5d7</anchor>
      <arglist>(const std::string &amp;frameList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Range</type>
      <name>m_range</name>
      <anchorfile>classIECoreMaya_1_1PlaybackFrameList.html</anchorfile>
      <anchor>a8d5fe4e1166c1b9155d809debcc39f8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::PostLoadCallback</name>
    <filename>classIECoreMaya_1_1PostLoadCallback.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>PostLoadCallback</name>
      <anchorfile>classIECoreMaya_1_1PostLoadCallback.html</anchorfile>
      <anchor>aa6d3eb9496303154ef5aefb659cccf3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>postLoad</name>
      <anchorfile>classIECoreMaya_1_1PostLoadCallback.html</anchorfile>
      <anchor>a92d6917eb21d7ed6c4826fc0d693211e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostLoadCallbackData *</type>
      <name>m_data</name>
      <anchorfile>classIECoreMaya_1_1PostLoadCallback.html</anchorfile>
      <anchor>a07f047f99966e2d8a93c44e7cc2bad7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PostLoadCallbackData</name>
      <anchorfile>classIECoreMaya_1_1PostLoadCallback.html</anchorfile>
      <anchor>afe758a5b5f351e99f9762e1a087d01c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ProceduralHolder</name>
    <filename>classIECoreMaya_1_1ProceduralHolder.html</filename>
    <base>IECoreMaya::ParameterisedHolder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postConstructor</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a70e287b2dbc3c64084a03493e83d8b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBounded</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>abb6bb97074e54214b5e5f65ff7fb4c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MBoundingBox</type>
      <name>boundingBox</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a5cc4f338a66cefbdc6ab5d77aa923c34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>setDependentsDirty</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a5501aa2d47b95329cfe00190e15345d5</anchor>
      <arglist>(const MPlug &amp;plug, MPlugArray &amp;plugArray)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>compute</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a5e4d25c56115c5d0d9e27486f1e3473d</anchor>
      <arglist>(const MPlug &amp;plug, MDataBlock &amp;dataBlock)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentToPlugs</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a43291c72bfbd47fd7dd80ee918dd6238</anchor>
      <arglist>(MObject &amp;component, MSelectionList &amp;selectionList) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatchResult</type>
      <name>matchComponent</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ab8ed55b8c2ab885a5babdf5ded1a0adf</anchor>
      <arglist>(const MSelectionList &amp;item, const MAttributeSpecArray &amp;spec, MSelectionList &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>MStatus</type>
      <name>setProcedural</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>acb126ffab4d2e5b4c105cdeef4bf3a74</anchor>
      <arglist>(const std::string &amp;className, int classVersion)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ParameterisedProceduralPtr</type>
      <name>getProcedural</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a30101d8dbc28f53ae2dc288e40c32e2a</anchor>
      <arglist>(std::string *className=0, int *classVersion=0)</arglist>
    </member>
    <member kind="function">
      <type>IECoreGL::ConstScenePtr</type>
      <name>scene</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a3df02a2f1cf27605f2df89077ffa7a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a7d7d59fa75b35cfe13a292671831a897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ac06d4c2777f9027305eb8686ee55782c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a9f6edb44fc44168cd017cba5a66e78d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aGLPreview</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a663e7bdb6ac15ed49b88f3ebfd955b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aTransparent</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a105adb5eb0662a4b2a4055c67873a561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aDrawBound</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a161b3cad6047b550fffbdbd93c7d5290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aDrawCoordinateSystems</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>afa978edc900282723976d5290310085e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aProceduralComponents</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a0d9ad80b318964b9be8f8d1471cace29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentQueries</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a1ef833a6f6e944e63512a0c2095aa1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentTransform</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a4cfc4c4cd7b0db010c0fd017f0252d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentTranslate</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ad8cdf74765230415a83949ca8a240c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentTranslateX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a8573c463397080b13dc551d96777cb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentTranslateY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>acdcc65749f87280a7e4df4a92b5fcee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentTranslateZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a29c343bd0d9f55436c433f12f3a2dbd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentRotate</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>abacc943ee10bead94c3f1d4258c88d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentRotateX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a85a4817567d2b9d57b2a538f1dadfd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentRotateY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a62655243f4c2ae008e5d048594afb56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentRotateZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a02a59ae8c6ff88e3b198643c4b9a71b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentScale</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ac945efdac86bc6a8dcd115cebcdebdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentScaleX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ade63662d0ccabc56afb2fa3902c768cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentScaleY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a7cb0d3ef37197e6631eec10c9412c206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentScaleZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ad88c50c00e13629c2772d8d734cc65c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBound</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a4e16e154b81a6eda7acbe16e2f524c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMin</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a93eb481465d641b6ff511a996d4036cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMinX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a3467bad036e51d8af579622ff5661379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMinY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a452d25ab8a21f5f3fdbb0bdc3ef49b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMinZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>afb0ebe6a51dba709654340150e532023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMax</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ab07889f09ec0be54a00bc04c0b313a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMaxX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ae8275600862cbf58ac0eb14c803a06c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMaxY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ab51bfcd8daaf1896722e9bc8ce09f6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundMaxZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a7c0498ddb8dfdd9e101eabb39da6cf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundCenter</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>ab1455270421dbb28d535dbe998494c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundCenterX</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a9618ca719596fe78c7f677a665af6f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundCenterY</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a0cf4dd30c1f3bfb2528c919c30f1d9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MObject</type>
      <name>aComponentBoundCenterZ</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a37ab9c1866cb899bc51db482cf42a61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ProceduralHolderUI</name>
      <anchorfile>classIECoreMaya_1_1ProceduralHolder.html</anchorfile>
      <anchor>a6c1e11d3fe521c1625030be3039e740d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::PythonCmd</name>
    <filename>classIECoreMaya_1_1PythonCmd.html</filename>
    <member kind="function">
      <type>MStatus</type>
      <name>doIt</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a7338217d225a62479c0ec54aa0486caf</anchor>
      <arglist>(const MArgList &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a567cca200024bbed74c42deb314ab85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MSyntax</type>
      <name>newSyntax</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>af00c0c8dab9cef376cb0e00b4200a0e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>import</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a93b3b4c6a3cdef4ff1917c66e4b5a76d</anchor>
      <arglist>(const std::string &amp;moduleName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a05b146662916e667f4604de33ab656fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>uninitialize</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a089aa7f354007e7bf87c1db3810f9d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::python::object &amp;</type>
      <name>globalContext</name>
      <anchorfile>classIECoreMaya_1_1PythonCmd.html</anchorfile>
      <anchor>a9c78f52a8d1820b8c4952b63d9ef73da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::StatusException</name>
    <filename>classIECoreMaya_1_1StatusException.html</filename>
    <base>IECore::Exception</base>
    <member kind="function">
      <type></type>
      <name>StatusException</name>
      <anchorfile>classIECoreMaya_1_1StatusException.html</anchorfile>
      <anchor>a43810c43208fc635311ed01cc3b47f01</anchor>
      <arglist>(const MStatus &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>type</name>
      <anchorfile>classIECoreMaya_1_1StatusException.html</anchorfile>
      <anchor>a0b1abdbf85e0891d7b8c92b0fbf86732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>throwIfError</name>
      <anchorfile>classIECoreMaya_1_1StatusException.html</anchorfile>
      <anchor>a3d3573f9331b3bc39a7eb0f640a4c424</anchor>
      <arglist>(const MStatus &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::StringParameterHandler</name>
    <filename>classIECoreMaya_1_1StringParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1StringParameterHandler.html</anchorfile>
      <anchor>aea1fe904503256787683b9e121a6fd9f</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1StringParameterHandler.html</anchorfile>
      <anchor>ac5abd1a083de3097b32f0058ead5e300</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1StringParameterHandler.html</anchorfile>
      <anchor>a11a1d16af17a6205b9adf7effca95833</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1StringParameterHandler.html</anchorfile>
      <anchor>aa1b19ce79cd81d5eadfd1ac721e8b2f5</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::StringVectorParameterHandler</name>
    <filename>classIECoreMaya_1_1StringVectorParameterHandler.html</filename>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterHandler.html</anchorfile>
      <anchor>a836ae01239673ad2791bf4d5a8b57fd3</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterHandler.html</anchorfile>
      <anchor>a0d9d9b5b55c95296db65a7512605935b</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterHandler.html</anchorfile>
      <anchor>ae9328a6e4fe55e63d1bb1d56938a9d0d</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterHandler.html</anchorfile>
      <anchor>acc0be94c93b645c8856d78bc1e495f1e</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaArrayDataConverter</name>
    <filename>classIECoreMaya_1_1ToMayaArrayDataConverter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaArrayDataConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaArrayDataConverter.html</anchorfile>
      <anchor>a00d3ca3085c2910f6d1597e15c07f675</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterDescription&lt; ToMayaArrayDataConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaArrayDataConverter.html</anchorfile>
      <anchor>a6e1431ca34b8671aa5622d086d8768c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaArrayDataConverter.html</anchorfile>
      <anchor>a10a58feee66c0c6e011ffc4e46fceffc</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaArrayDataConverter.html</anchorfile>
      <anchor>a6227a7ba4e5721c1d95cb33fcbdc304e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaConverter</name>
    <filename>classIECoreMaya_1_1ToMayaConverter.html</filename>
    <base>IECore::FromCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaConverter.html</anchorfile>
      <anchor>a8bafd05905b621b15a7643e639464098</anchor>
      <arglist>(ToMayaConverter, ToMayaConverterTypeId, IECore::FromCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToMayaConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaConverter.html</anchorfile>
      <anchor>a048550632ca20180c8f35d318c539028</anchor>
      <arglist>(const std::string &amp;description, IECore::TypeId supportedType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaGroupConverter</name>
    <filename>classIECoreMaya_1_1ToMayaGroupConverter.html</filename>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaGroupConverter.html</anchorfile>
      <anchor>a47648447d09830ee3c2ffc4e98b25246</anchor>
      <arglist>(ToMayaGroupConverter, ToMayaGroupConverterTypeId, ToMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToMayaGroupConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaGroupConverter.html</anchorfile>
      <anchor>ae4ae76fe69317088454302c1d649257f</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaGroupConverter.html</anchorfile>
      <anchor>a8088744d2ee612807881eafee0c7543e</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static ToMayaObjectConverterDescription&lt; ToMayaGroupConverter &gt;</type>
      <name>g_registrar</name>
      <anchorfile>classIECoreMaya_1_1ToMayaGroupConverter.html</anchorfile>
      <anchor>a0bcaa88d389233baa5fbaab7d7272ff9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaImageConverter</name>
    <filename>classIECoreMaya_1_1ToMayaImageConverter.html</filename>
    <base>IECoreMaya::ToMayaConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaImageConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaImageConverter.html</anchorfile>
      <anchor>a1a0f2e59b865bc7fdf86104ae51992f5</anchor>
      <arglist>(IECore::ConstImagePrimitivePtr image)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaImageConverter.html</anchorfile>
      <anchor>a45b7eaa0929707dbad53376809f9fa0f</anchor>
      <arglist>(ToMayaImageConverter, ToMayaImageConverterTypeId, ToMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type>MStatus</type>
      <name>convert</name>
      <anchorfile>classIECoreMaya_1_1ToMayaImageConverter.html</anchorfile>
      <anchor>a0c6a4006fb16c551b0f32abec485dd31</anchor>
      <arglist>(MImage &amp;image) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::IntParameterPtr</type>
      <name>typeParameter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaImageConverter.html</anchorfile>
      <anchor>ad4b0793819a477b2368bdbeac8091ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstIntParameterPtr</type>
      <name>typeParameter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaImageConverter.html</anchorfile>
      <anchor>a3f5080b4f7583b396ff70e9942940013</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaMatrixDataConverter</name>
    <filename>classIECoreMaya_1_1ToMayaMatrixDataConverter.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaMatrixDataConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixDataConverter.html</anchorfile>
      <anchor>ad0f9db9013ac6a4148fdb997c5b8eb32</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterDescription&lt; ToMayaMatrixDataConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixDataConverter.html</anchorfile>
      <anchor>a07a31453b500103cab0941e45fa08ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixDataConverter.html</anchorfile>
      <anchor>a73c198514794a1743da1f9b2a942e782</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixDataConverter.html</anchorfile>
      <anchor>a66b8a59efe468cc7af6053f07aa31abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaMatrixVectorDataConverter</name>
    <filename>classIECoreMaya_1_1ToMayaMatrixVectorDataConverter.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaMatrixVectorDataConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>a14f782869dfb4536eaa510a241daf8c2</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterDescription&lt; ToMayaMatrixVectorDataConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>aae9f1235670a994f5d9d07351b7be84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>a80b92a8f9aac9bd3f867bc85b62c6092</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMatrixVectorDataConverter.html</anchorfile>
      <anchor>abd2b0c89f380af721964bd90291b76b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaMeshConverter</name>
    <filename>classIECoreMaya_1_1ToMayaMeshConverter.html</filename>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>aaedd83d5259cdc399fabeb409a211569</anchor>
      <arglist>(ToMayaMeshConverter, ToMayaMeshConverterTypeId, ToMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToMayaMeshConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>aa62eca60cddb71a2624fa4735c295c88</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterDescription&lt; ToMayaMeshConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>ab549f075e55cc90dabd8420f1656fdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>a5e4ca70a0c95035913360f5a34169246</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_meshDataDescription</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>ae0406caeecc6cf7f05742e695e2d4b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_meshDescription</name>
      <anchorfile>classIECoreMaya_1_1ToMayaMeshConverter.html</anchorfile>
      <anchor>a08baf5f20503cca61bf55e1d05741ed0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaNumericDataConverter</name>
    <filename>classIECoreMaya_1_1ToMayaNumericDataConverter.html</filename>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaNumericDataConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaNumericDataConverter.html</anchorfile>
      <anchor>a706026d203ff7c9ea19a2d996bd3026e</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaNumericDataConverter.html</anchorfile>
      <anchor>ac7da2b81e3e1655fbe54e20836bebae9</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaObjectConverter</name>
    <filename>classIECoreMaya_1_1ToMayaObjectConverter.html</filename>
    <base>IECoreMaya::ToMayaConverter</base>
    <class kind="class">IECoreMaya::ToMayaObjectConverter::ToMayaObjectConverterDescription</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>a3652fa6c1cce08c51c713efe719c552c</anchor>
      <arglist>(ToMayaObjectConverter, ToMayaObjectConverterTypeId, ToMayaConverter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convert</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>af762202450164ea3d3a60802e0bd9a0d</anchor>
      <arglist>(MObject &amp;object) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToMayaObjectConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>a30e69f38dae5d3f24bd62d4666ad4300</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToMayaObjectConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>a81f4e7b4eaca664a01649166c5059357</anchor>
      <arglist>(IECore::ConstObjectPtr object, MFn::Type resultType)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>aa729dd51218784d1f8cbbaab7aabd821</anchor>
      <arglist>)(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToMayaObjectConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>a3b2aafebfc1b9cd60ce28fa7c4dca961</anchor>
      <arglist>(const std::string &amp;description, IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>a4f79ef513c563c316af0bb6cc5298051</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter.html</anchorfile>
      <anchor>aa1edf33a98a30eff539ad93bb59d1521</anchor>
      <arglist>(IECore::TypeId fromType, const MFn::Type resultType, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaObjectConverter::ToMayaObjectConverterDescription</name>
    <filename>classIECoreMaya_1_1ToMayaObjectConverter_1_1ToMayaObjectConverterDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ToMayaObjectConverterDescription</name>
      <anchorfile>classIECoreMaya_1_1ToMayaObjectConverter_1_1ToMayaObjectConverterDescription.html</anchorfile>
      <anchor>a94e3b0d3d203201aa71906aff3011906</anchor>
      <arglist>(IECore::TypeId fromType, const MFn::Type resultType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaParticleConverter</name>
    <filename>classIECoreMaya_1_1ToMayaParticleConverter.html</filename>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaParticleConverter.html</anchorfile>
      <anchor>afd7b18da414e151f1bfdef57d345460b</anchor>
      <arglist>(ToMayaParticleConverter, ToMayaParticleConverterTypeId, ToMayaObjectConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToMayaParticleConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaParticleConverter.html</anchorfile>
      <anchor>a42bd025b23811aa824d589ba791dcb20</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaParticleConverter.html</anchorfile>
      <anchor>a6a6af22373dd0c8007ddb3a20df7d6ee</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaPlugConverter</name>
    <filename>classIECoreMaya_1_1ToMayaPlugConverter.html</filename>
    <base>IECoreMaya::ToMayaConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaPlugConverter.html</anchorfile>
      <anchor>a2b7024c5056c2414ea4165c4ffab63a0</anchor>
      <arglist>(ToMayaPlugConverter, ToMayaPlugConverterTypeId, ToMayaConverter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>convert</name>
      <anchorfile>classIECoreMaya_1_1ToMayaPlugConverter.html</anchorfile>
      <anchor>a459b021bcafe6f2daecbee70e78ef831</anchor>
      <arglist>(MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToMayaPlugConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ToMayaPlugConverter.html</anchorfile>
      <anchor>ab8f59f482c157aed309733e04bdeb717</anchor>
      <arglist>(const IECore::ObjectPtr src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ToMayaSkinClusterConverter</name>
    <filename>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</filename>
    <base>IECoreMaya::ToMayaObjectConverter</base>
    <member kind="function">
      <type></type>
      <name>ToMayaSkinClusterConverter</name>
      <anchorfile>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</anchorfile>
      <anchor>a4c079ee535419b3850c34b949b3597b1</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</anchorfile>
      <anchor>a55168249698df8937867151508698b9e</anchor>
      <arglist>(ToMayaSkinClusterConverter, ToMayaSkinClusterConverterTypeId, ToMayaObjectConverter)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToMayaObjectConverterDescription&lt; ToMayaSkinClusterConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</anchorfile>
      <anchor>ab08c5d97f887cc4aea54bbf76ef773fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConversion</name>
      <anchorfile>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</anchorfile>
      <anchor>a14ce8a0aa711aa2f770293f75cb3fd6d</anchor>
      <arglist>(IECore::ConstObjectPtr from, MObject &amp;to, IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_skinClusterDescription</name>
      <anchorfile>classIECoreMaya_1_1ToMayaSkinClusterConverter.html</anchorfile>
      <anchor>a8b6749bfc6f1e49c2b0ae090e5715a68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TransformationMatrixManipulator</name>
    <filename>classIECoreMaya_1_1TransformationMatrixManipulator.html</filename>
    <base>IECoreMaya::ParameterManipContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>createChildren</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>aa0d81c6737739039dfc20388fe45e4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>connectToDependNode</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>a771d459ec314d09daaeb13ce307352a3</anchor>
      <arglist>(const MObject &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>a507a46c2090a7dcd3708a7014b989ef3</anchor>
      <arglist>(M3dView &amp;view, const MDagPath &amp;path, M3dView::DisplayStyle style, M3dView::DisplayStatus status)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>rotationToPlugConversion</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>aebf4f01851b4f3d1df84d6aff75f9930</anchor>
      <arglist>(unsigned int plugIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>aef1fb25685f04a80492fedef81b0dac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>a0fe9d157862c35b6302ae13e30ff5501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>ac4401fbb211bb68727a19602bd73adec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixManipulator.html</anchorfile>
      <anchor>a34476e9c381879651e5f430f2fb79387</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TransformationMatrixParameterHandler</name>
    <filename>classIECoreMaya_1_1TransformationMatrixParameterHandler.html</filename>
    <templarg></templarg>
    <base>IECoreMaya::ParameterHandler</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MPlug</type>
      <name>doCreate</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterHandler.html</anchorfile>
      <anchor>a2cb79e64ee91ce1dd4d37eabf7ebd99d</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, const MString &amp;plugName, MObject &amp;node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doUpdate</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterHandler.html</anchorfile>
      <anchor>a729b3b1ff2b85973658320fed5dbd5dd</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterHandler.html</anchorfile>
      <anchor>a8ff006aee983a8203e93610205642d84</anchor>
      <arglist>(IECore::ConstParameterPtr parameter, MPlug &amp;plug) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>doSetValue</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterHandler.html</anchorfile>
      <anchor>a5300c4655ced656b6dd0b21cb8b2dc02</anchor>
      <arglist>(const MPlug &amp;plug, IECore::ParameterPtr parameter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TransientParameterisedHolderNode</name>
    <filename>classIECoreMaya_1_1TransientParameterisedHolderNode.html</filename>
    <base>IECoreMaya::ParameterisedHolder</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>aa999e3b266263708635717746308017b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>acda5303668655f0e60a52c4f0d051811</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>a4384ad37637e2ac5cb7701ee5e2b5181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>a65015c4349bb6826561c74242c508b53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>ac8af228bfe8761063ad49c9f9578b99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MString</type>
      <name>typeName</name>
      <anchorfile>classIECoreMaya_1_1TransientParameterisedHolderNode.html</anchorfile>
      <anchor>a30f2ea3d4411a5373bdda0fa3ac3d830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::V3Manipulator</name>
    <filename>classIECoreMaya_1_1V3Manipulator.html</filename>
    <base>IECoreMaya::ParameterManipContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>createChildren</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a4fc4adacfc95cb2b4f561568fded865d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MStatus</type>
      <name>connectToDependNode</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a4c39f3d57d98d01b339b49527e0242d4</anchor>
      <arglist>(const MObject &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a2377c5effbc0ef06f2c2fa7a558e9a20</anchor>
      <arglist>(M3dView &amp;view, const MDagPath &amp;path, M3dView::DisplayStyle style, M3dView::DisplayStatus status)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>vectorPlugToManipConversion</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a8c92a450df5abfdb34a8bedc9f16c526</anchor>
      <arglist>(unsigned int manipIndex)</arglist>
    </member>
    <member kind="function">
      <type>MManipData</type>
      <name>vectorManipToPlugConversion</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a561571151217708b599107c203089d06</anchor>
      <arglist>(unsigned int plugIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>creator</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>ab8609da0c07e7ce1af05bed744bdfcc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>initialize</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>a0ef9eabe71372c0bb69593dbc5ef96bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MTypeId</type>
      <name>id</name>
      <anchorfile>classIECoreMaya_1_1V3Manipulator.html</anchorfile>
      <anchor>aa9eac96df3057eeab393904d42f47203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ViewportPostProcess</name>
    <filename>classIECoreMaya_1_1ViewportPostProcess.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcess.html</anchorfile>
      <anchor>a5e1da1c452dbe03cbac5f07eebda60b8</anchor>
      <arglist>(ViewportPostProcess)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>needsDepth</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcess.html</anchorfile>
      <anchor>ad1a5ceddc986e8c8dd0167906148cf62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preRender</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcess.html</anchorfile>
      <anchor>a91e134ef21a2003ae6c86626a450d007</anchor>
      <arglist>(const std::string &amp;panelName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>postRender</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcess.html</anchorfile>
      <anchor>a8f6eb888c94de8d0e9a0427f298202f2</anchor>
      <arglist>(const std::string &amp;panelName, MImage &amp;image)=0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ViewportPostProcessCallback</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcess.html</anchorfile>
      <anchor>aa8ae68d3ca16b8fedd91de941d2383bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ViewportPostProcessCallback</name>
    <filename>classIECoreMaya_1_1ViewportPostProcessCallback.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREMEMBERPTR</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>af89b77352d3949b71001cfb216a67bf1</anchor>
      <arglist>(ViewportPostProcessCallback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>registerCallback</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a27aa05798e3b045b3a89a43cf2c97cfe</anchor>
      <arglist>(const MString &amp;panelName, ViewportPostProcessPtr postProcess)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MStatus</type>
      <name>deregisterCallback</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>ada643f683a924cfe52546585e0b4076e</anchor>
      <arglist>(const MString &amp;panelName)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, ViewportPostProcessCallback::Ptr &gt;</type>
      <name>Instances</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>afc6cdec0daf7701665d66a366d696cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ViewportPostProcessCallback</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a785df86c36a332e2bc5c1ab52a7ad293</anchor>
      <arglist>(const MString &amp;panelName, ViewportPostProcessPtr postProcess)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>viewPreRender</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>ad320ab9e0bc8008562f752e76fc9aa8b</anchor>
      <arglist>(const MString &amp;panelName, void *clientData)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>viewPostRender</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>af9954671e8feb5400e0ee8ca4a722720</anchor>
      <arglist>(const MString &amp;panelName, void *clientData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCallbackId</type>
      <name>m_viewPreRenderId</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>ad9c50ac48d834e649735fd19d2bde248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCallbackId</type>
      <name>m_viewPostRenderId</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a79bd08b742d0fd109c0bfed3aa2c2bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCallbackId</type>
      <name>m_idleId</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a1bbbc0bbab0658e21715b9a2292a4dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewportPostProcessPtr</type>
      <name>m_postProcess</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>abf8cb96714d54ada8756c1cb01a89705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MString</type>
      <name>m_panelName</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>ad39e8d5ea83d987bcdc588b4cd069571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Instances</type>
      <name>g_instances</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a839dc99b1ce50a5fdebbe7a8ac24d00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static size_t</type>
      <name>g_numInstances</name>
      <anchorfile>classIECoreMaya_1_1ViewportPostProcessCallback.html</anchorfile>
      <anchor>a78b4d85ce10bb143313bb064fdbf154c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::UIElement</name>
    <filename>classIECoreMaya_1_1UIElement.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1UIElement.html</anchorfile>
      <anchor>afab9d9a00447fab161462bd259f9fd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parent</name>
      <anchorfile>classIECoreMaya_1_1UIElement.html</anchorfile>
      <anchor>a7a41b5f24560a52da653b42a612ac80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>instances</name>
      <anchorfile>classIECoreMaya_1_1UIElement.html</anchorfile>
      <anchor>ae82163f9a4608f14a4bc14d53eb271e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterUI</name>
    <filename>classIECoreMaya_1_1ParameterUI.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>ac6b4811e1e61185c307262755da4eb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>ad4ff1092d64f6edc00f4846fcdb8bb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>node</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a70d96924ffee7965e70f96d226672d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>nodeName</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a4a6ea9b56649c0f295ddeeae3d9c47d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plug</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a35cd07375ad265bcb9afacc3e8c0f064</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plugName</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a3f86c5df987737c67b540c0cf9659f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>layout</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a276c86abe42edefa238ddc6dafcc5a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>label</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a3ed30f266173dbc7e7e2be04c87a048c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>description</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>aa4e3e29eddc93d6ec693f87b9496a809</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addDragCallback</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a6a9a799b3dec470dd0662ce419f363fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerUI</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>aec6a882fccf3bdf3791e37a4442073a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a14f0c22d4b4fd4a94045fe97f753376d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerPopupMenuCallback</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a6f9ff53f33bd42e58fd8b14f5a675270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>parameter</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a80f6b4b4f6530575d09783ef6c846892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>textColumnWidthIndex</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a924e112a1ce7cf179d3784b5d096542c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>singleWidgetWidthIndex</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a21b477eb557a258b1908990c6328f0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>sliderWidgetWidthIndex</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a4229ed9fed477b65793a559e1a01c2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>dictionary</type>
      <name>handlers</name>
      <anchorfile>classIECoreMaya_1_1ParameterUI.html</anchorfile>
      <anchor>a8a5c47a4f4eaed68c0fed5552dd7abbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::StringParameterUI</name>
    <filename>classIECoreMaya_1_1StringParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1StringParameterUI.html</anchorfile>
      <anchor>a36fec5583ab9e56c5f541358346b0ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1StringParameterUI.html</anchorfile>
      <anchor>add4ffd5bc83288df73d2ce38f0e0ac7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::NoteParameterUI</name>
    <filename>classIECoreMaya_1_1NoteParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1NoteParameterUI.html</anchorfile>
      <anchor>a47a76424902b73b3845ccc2811022d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1NoteParameterUI.html</anchorfile>
      <anchor>a2552a7ed12d01ecbfe76abc91ad86d74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::NodeParameter::CheckType</name>
    <filename>classIECoreMaya_1_1NodeParameter_1_1CheckType.html</filename>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>DontCare</name>
      <anchorfile>classIECoreMaya_1_1NodeParameter_1_1CheckType.html</anchorfile>
      <anchor>a3af78d163f47a9cf86e5adb251d562c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>MustExist</name>
      <anchorfile>classIECoreMaya_1_1NodeParameter_1_1CheckType.html</anchorfile>
      <anchor>a8ba756d9b731830a66cd3c6968549911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>MustNotExist</name>
      <anchorfile>classIECoreMaya_1_1NodeParameter_1_1CheckType.html</anchorfile>
      <anchor>a01dbf9e1ffce8493575520a41b8892c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::DAGPathParameter</name>
    <filename>classIECoreMaya_1_1DAGPathParameter.html</filename>
    <base>IECore::TypedParameter</base>
    <class kind="class">IECoreMaya::DAGPathParameter::CheckType</class>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a7b9174898997b78528bd9faae29179f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__getattr__</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a47516f36669225856a2aedff09c4420b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pathValidator</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a51f519208a32baa0c2a70f6676af87b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>valueValid</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a752c146a427b92e0d2ff11742c186ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setDAGPathValue</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a042ea0effc173934f8e0214ea065bcf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getDAGPathValue</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>afa567a463809aecdfdf861caf478ca22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>typeRegex</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a588f85c45fd4f776fc11ae291ade34aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>typeRegexDesc</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter.html</anchorfile>
      <anchor>a9d05db418a0002dfbdc2b36d30efdf10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::DAGPathParameter::CheckType</name>
    <filename>classIECoreMaya_1_1DAGPathParameter_1_1CheckType.html</filename>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>DontCare</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter_1_1CheckType.html</anchorfile>
      <anchor>ac119e14a6ea27d173bcb470843a03c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>MustExist</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter_1_1CheckType.html</anchorfile>
      <anchor>a5608a2379055f2cd5b9a30c561dd6603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>int</type>
      <name>MustNotExist</name>
      <anchorfile>classIECoreMaya_1_1DAGPathParameter_1_1CheckType.html</anchorfile>
      <anchor>aba8908fe588865473487695b2d5b742c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::Menu</name>
    <filename>classIECoreMaya_1_1Menu.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1Menu.html</anchorfile>
      <anchor>a95ce9b7ae0f413cec8fb19c8eb19bca8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ScopedSelection</name>
    <filename>classIECoreMaya_1_1ScopedSelection.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1ScopedSelection.html</anchorfile>
      <anchor>a0e6507d274eb4d11c621f599809c6b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FnParameterisedHolder</name>
    <filename>classIECoreMaya_1_1FnParameterisedHolder.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ab6bccba3cd8b8953492f8ef88966b5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setParameterised</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a2ab7ad811a45c5dc597bb9e9ee955edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getParameterised</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ad5eb4de710570447968a5b65766a741e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parameterModificationContext</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ac6ea5fe265f0258ce299a53af108e6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setNodeValues</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a6c525104f12a8673b7d66021b1dee2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setNodeValue</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ace62975d45020e616e4fc4ed6eb107e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setParameterisedValues</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a61ddd1a5ae50f9152ab83dd7599646f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setParameterisedValue</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a591e1ff1f149908bd6f714a2caa0c9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parameterPlug</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a2c92ceda45550ac5a7bafe71eb81e603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parameterPlugPath</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a1ed5ee340ae323381519d68cf5d9a4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plugParameter</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ac8d06f5f2ccbd59f59d20a367f8093fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>fullPathName</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a9e38877712d1d5dc5db18c36690532af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addSetParameterisedCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>ae48d2936f54c55c7f0714ef6bcb7f721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removeSetParameterisedCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a55d3312bd1ef6b99145c22e65575067d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addSetClassVectorParameterClassesCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a60fc693bbf5fd552b8d6f66bb8c04f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removeSetClassVectorParameterClassesCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a3fb7dd73812656ffe806169f8e3f9f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addSetClassParameterClassCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>a4ae1424af2034ec4bfef3ef31dd9ee5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removeSetClassParameterClassCallback</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolder.html</anchorfile>
      <anchor>af0f6e1dbf31ad91081956b595e0b9509</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ParameterPanel</name>
    <filename>classIECoreMaya_1_1ParameterPanel.html</filename>
    <member kind="function">
      <type>def</type>
      <name>trashDropCallback</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a56aa722fc69f5460599c62300c623fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>newControlDropCallback</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a00b39ff72090e6becf92d2a076395fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>aa4c683e36bea71ae42c48517c847d564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>ad7b226756b7f8004d97c72a904545851</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a2f5e4564e9ced18516c18360bcac4a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a381a718f575e59b816140726209037e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>delete</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a4a402e92ce8f159b03d800556271e04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a1b87ce72e46883daa145ef236c0b3760</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>restore</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>a3a73e03d5ecff226f934825490b7d30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>dictionary</type>
      <name>panels</name>
      <anchorfile>classIECoreMaya_1_1ParameterPanel.html</anchorfile>
      <anchor>aa31d7c07f6aba4a20b8e379e56b34441</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::AttributeEditorControl</name>
    <filename>classIECoreMaya_1_1AttributeEditorControl.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1AttributeEditorControl.html</anchorfile>
      <anchor>a4e936424a83c2400d149d1f92b64cef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1AttributeEditorControl.html</anchorfile>
      <anchor>a493be431f9df7404290aebec5643c434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>nodeName</name>
      <anchorfile>classIECoreMaya_1_1AttributeEditorControl.html</anchorfile>
      <anchor>a36d485a87d9ce16c02d24ac76547456e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>attributeName</name>
      <anchorfile>classIECoreMaya_1_1AttributeEditorControl.html</anchorfile>
      <anchor>afb8428cae78eb1a9bb0c09705abe69bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FnProceduralHolder</name>
    <filename>classIECoreMaya_1_1FnProceduralHolder.html</filename>
    <base>IECoreMaya::FnParameterisedHolder</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>af41dc34ace5c5151e167744f8a9a5af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a710ad90af8740aa9c790cf0782ad7cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setProcedural</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a8a484253b3ff99972fba5c905407a04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getProcedural</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a716ebb2abb8e21ac7387950d31ad0c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>componentNames</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a0eb53ae81bee64e20bc2c784102390ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>selectedComponentNames</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a546c09deb471317c198e7ee3864e9c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>selectComponentNames</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>ad35e55ce92604bd9074662715980b0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>scene</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a2f7101059e741743b07971f8da5cec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>convertToGeometry</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a6a13ade45a508a9d7eee12d6129d4b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>componentTransformPlugPath</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>a7748212d9e789c188bf952d6913feed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>componentBoundPlugPath</name>
      <anchorfile>classIECoreMaya_1_1FnProceduralHolder.html</anchorfile>
      <anchor>aa9ddc49c23a036a5724d6e7a546d5b03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::OpWindow</name>
    <filename>classIECoreMaya_1_1OpWindow.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1OpWindow.html</anchorfile>
      <anchor>ab9c835776485df5be77e7e426cd62a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::UndoDisabled</name>
    <filename>classIECoreMaya_1_1UndoDisabled.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreMaya_1_1UndoDisabled.html</anchorfile>
      <anchor>a0ec66e44169cc48943a69d78bbb0f8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreMaya_1_1UndoDisabled.html</anchorfile>
      <anchor>a896fd19a3b126f264027463dea836384</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ModalDialogue</name>
    <filename>classIECoreMaya_1_1ModalDialogue.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1ModalDialogue.html</anchorfile>
      <anchor>a28c1a9c387681c71fce3405005296669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run</name>
      <anchorfile>classIECoreMaya_1_1ModalDialogue.html</anchorfile>
      <anchor>a720858364cc00381ee2f156a6ab7ff54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::Panel</name>
    <filename>classIECoreMaya_1_1Panel.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1Panel.html</anchorfile>
      <anchor>aa79fd5937514cbaad76a05bfec6358b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1Panel.html</anchorfile>
      <anchor>a229d6bdd7d1ace24d04b0247615da79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerPanel</name>
      <anchorfile>classIECoreMaya_1_1Panel.html</anchorfile>
      <anchor>af7608c721b4367654a72f18a755df716</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::WaitCursor</name>
    <filename>classIECoreMaya_1_1WaitCursor.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreMaya_1_1WaitCursor.html</anchorfile>
      <anchor>ab98874f714c0e252d3db66f5814a09ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreMaya_1_1WaitCursor.html</anchorfile>
      <anchor>a59a9b02171927c8bb5a8a4c25eda980c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::UITemplate</name>
    <filename>classIECoreMaya_1_1UITemplate.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1UITemplate.html</anchorfile>
      <anchor>ada399aa823230d01644a982e137efdc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreMaya_1_1UITemplate.html</anchorfile>
      <anchor>a07a015cc4f18288ca7811b97f1b661b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreMaya_1_1UITemplate.html</anchorfile>
      <anchor>abac2c5111787cd3369003b71ac6d6977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FnParameterisedHolderSet</name>
    <filename>classIECoreMaya_1_1FnParameterisedHolderSet.html</filename>
    <base>IECoreMaya::FnParameterisedHolder</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolderSet.html</anchorfile>
      <anchor>a5548d568734ed45f047f3b2ea0413fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIECoreMaya_1_1FnParameterisedHolderSet.html</anchorfile>
      <anchor>afa813ec259b93fa7f6b7317fe7d81bcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TemporaryAttributeValues</name>
    <filename>classIECoreMaya_1_1TemporaryAttributeValues.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1TemporaryAttributeValues.html</anchorfile>
      <anchor>a048dea0f84e87a8976ba2198c74afe0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__enter__</name>
      <anchorfile>classIECoreMaya_1_1TemporaryAttributeValues.html</anchorfile>
      <anchor>a3af229ea8ca75baf47cc8234eaa71cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__exit__</name>
      <anchorfile>classIECoreMaya_1_1TemporaryAttributeValues.html</anchorfile>
      <anchor>a5963a7a9f42935e30d7a224d2f5e1d1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FnDagNode</name>
    <filename>classIECoreMaya_1_1FnDagNode.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FnDagNode.html</anchorfile>
      <anchor>a0c8d673d2d5971cff383a87784636714</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>createShapeWithParent</name>
      <anchorfile>classIECoreMaya_1_1FnDagNode.html</anchorfile>
      <anchor>afccbf02b7e5cfda882c8862134aeda84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>isHidden</name>
      <anchorfile>classIECoreMaya_1_1FnDagNode.html</anchorfile>
      <anchor>a4fec82082d1109a413dee4ad8176522b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>hiddenPathNames</name>
      <anchorfile>classIECoreMaya_1_1FnDagNode.html</anchorfile>
      <anchor>a4cd1ca4e90954747997cdad763e0effd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::ClassVectorParameterUI</name>
    <filename>classIECoreMaya_1_1ClassVectorParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>a5023b0f34aaf78146a01d2d709ae9141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>a6c7bf8e3bda74d7fb7e00d8f2f6218f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getCollapsed</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>a42b8a3b9f9a75157f3e6833cacdc9691</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setCollapsed</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>ad66f8cb385bf741fea8f3f3d9e951093</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerClassMenuCallback</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>ad24810d945555127c5d8fa211369a73b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerAddClassMenuCallback</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>aa7fbfc6a30c8b7a1e8c0ca15362c402c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerToolsMenuCallback</name>
      <anchorfile>classIECoreMaya_1_1ClassVectorParameterUI.html</anchorfile>
      <anchor>a2b03f9eb4fc90f972062319942f6383a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::PresetsOnlyParameterUI</name>
    <filename>classIECoreMaya_1_1PresetsOnlyParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1PresetsOnlyParameterUI.html</anchorfile>
      <anchor>a5b87e71cd0b4e8ad725a7d9648ffed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1PresetsOnlyParameterUI.html</anchorfile>
      <anchor>a1f42da77347286ef4134cb06ad831f29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TestCase</name>
    <filename>classIECoreMaya_1_1TestCase.html</filename>
    <member kind="function">
      <type>def</type>
      <name>setUp</name>
      <anchorfile>classIECoreMaya_1_1TestCase.html</anchorfile>
      <anchor>ac021e27bffbb2f508de565c7a812340f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TestProgram</name>
    <filename>classIECoreMaya_1_1TestProgram.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1TestProgram.html</anchorfile>
      <anchor>a8112eef438ca1893e91c5c04bfd22834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>runTests</name>
      <anchorfile>classIECoreMaya_1_1TestProgram.html</anchorfile>
      <anchor>a639f283dc803ebea5f204f79c513b2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>testRunner</name>
      <anchorfile>classIECoreMaya_1_1TestProgram.html</anchorfile>
      <anchor>a1178c2097939a4663e7c72584fbe8e26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FileBrowser</name>
    <filename>classIECoreMaya_1_1FileBrowser.html</filename>
    <base>IECoreMaya::UIElement</base>
    <class kind="class">IECoreMaya::FileBrowser::DirectoriesOnlyFilter</class>
    <class kind="class">IECoreMaya::FileBrowser::FnMatchFilter</class>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>ab07d7769f674ce3d3a3bccbe8f69b357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setPath</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a47cabd680c39b0d006a02fa522366fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getCurrentSelection</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a7afed4a098c1b473cd74b91908f93d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>selectSignal</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>ac559bb45e9c2faaad63749315d443b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cancelSignal</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a1f509d3b50c64592a2eff26c696b5e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pathChangedSignal</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a6af3accb4324b64e032857865240e3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setButtonTitle</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a0f5bd9feeaed70035c6265519c9d4f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getButtonTitle</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>ad328b18f19c827314fd6b24fe00cdc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setCancelButtonTitle</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a8ea287036c629d5230d4b89c9d70572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getCancelButtonTitle</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser.html</anchorfile>
      <anchor>a6f39bed222e0a8fe9368006b03784199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FileBrowser::DirectoriesOnlyFilter</name>
    <filename>classIECoreMaya_1_1FileBrowser_1_1DirectoriesOnlyFilter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>filter</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser_1_1DirectoriesOnlyFilter.html</anchorfile>
      <anchor>aecda7f35b0e7d9a53c6a76f67d127a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>validate</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser_1_1DirectoriesOnlyFilter.html</anchorfile>
      <anchor>a41ca7fde3cb30ed7f739880bd177c4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FileBrowser::FnMatchFilter</name>
    <filename>classIECoreMaya_1_1FileBrowser_1_1FnMatchFilter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser_1_1FnMatchFilter.html</anchorfile>
      <anchor>a76eca28ba83668c4e707333bba86d80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>filter</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser_1_1FnMatchFilter.html</anchorfile>
      <anchor>a7a4a667a9bf0cacb8d7e044af2297745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>validate</name>
      <anchorfile>classIECoreMaya_1_1FileBrowser_1_1FnMatchFilter.html</anchorfile>
      <anchor>af6ab74de22d6036b944e31957056cc34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::FileDialog</name>
    <filename>classIECoreMaya_1_1FileDialog.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1FileDialog.html</anchorfile>
      <anchor>a040b79f1e6d1ec43fe404c9ba705ba90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setPath</name>
      <anchorfile>classIECoreMaya_1_1FileDialog.html</anchorfile>
      <anchor>ace3f848de3ff994ad0ad842de088a204</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>registerPreset</name>
      <anchorfile>classIECoreMaya_1_1FileDialog.html</anchorfile>
      <anchor>adadd7eeeff41fd537eeb4e45a3c0a558</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>removePreset</name>
      <anchorfile>classIECoreMaya_1_1FileDialog.html</anchorfile>
      <anchor>ae4952965704a67d84be60c039b63632a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::StringVectorParameterUI</name>
    <filename>classIECoreMaya_1_1StringVectorParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterUI.html</anchorfile>
      <anchor>a8bf73fcdeb8ecf6425d672f9092d8cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1StringVectorParameterUI.html</anchorfile>
      <anchor>a99dedc55f69cd5c15cb04cf909812d39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::TransformationMatrixParameterUI</name>
    <filename>classIECoreMaya_1_1TransformationMatrixParameterUI.html</filename>
    <base>IECoreMaya::ParameterUI</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterUI.html</anchorfile>
      <anchor>ac45daa903e220206afb88350f6ebf759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>replace</name>
      <anchorfile>classIECoreMaya_1_1TransformationMatrixParameterUI.html</anchorfile>
      <anchor>a9524cfb24eef49fee9c26aae0024444e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreMaya::_CollapsibleMotif</name>
    <filename>classIECoreMaya_1_1__CollapsibleMotif.html</filename>
    <base>IECoreMaya::UIElement</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a6267bce6a8fa844fab46f8025de5002d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>frameLayout</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a24c58b51caa9e2d027d24463c247e1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setLabel</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>abc0456d77e5c5d030188950dbfb78c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getLabel</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a97a6ce87b6be5c12a92fe628d6e1debe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setAnnotation</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a9e09d7d27cc5fbada2fb9e2e1dc2d751</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getAnnotation</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a8f62e5e19d5f02dd09c17af409938002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getCollapsed</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a020baae25005f7c949b5926754591bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setCollapsed</name>
      <anchorfile>classIECoreMaya_1_1__CollapsibleMotif.html</anchorfile>
      <anchor>a0c9709a9235b14a5703d6614286a520c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreMaya::TypeTraits::IsUnit</name>
    <filename>structIECoreMaya_1_1TypeTraits_1_1IsUnit.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>IECoreNuke</name>
    <filename>namespaceIECoreNuke.html</filename>
    <class kind="class">IECoreNuke::CurveLookup</class>
    <class kind="class">IECoreNuke::DrawableHolder</class>
    <class kind="class">IECoreNuke::FromNukeCameraConverter</class>
    <class kind="class">IECoreNuke::FromNukeConverter</class>
    <class kind="class">IECoreNuke::FromNukePointsConverter</class>
    <class kind="class">IECoreNuke::FromNukeTileConverter</class>
    <class kind="class">IECoreNuke::MeshFromNuke</class>
    <class kind="class">IECoreNuke::MeshToNukeGeometryConverter</class>
    <class kind="class">IECoreNuke::ObjectHolder</class>
    <class kind="class">IECoreNuke::ObjectKnob</class>
    <class kind="class">IECoreNuke::OpHolder</class>
    <class kind="class">IECoreNuke::ParameterHandler</class>
    <class kind="class">IECoreNuke::ProceduralHolder</class>
    <class kind="class">IECoreNuke::ToNukeConverter</class>
    <class kind="class">IECoreNuke::ToNukeGeometryConverter</class>
    <class kind="class">IECoreNuke::Warp</class>
    <member kind="typedef">
      <type>ParameterisedHolder&lt; DD::Image::Op &gt;</type>
      <name>ParameterisedHolderOp</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a931f0020831b0cdbfe59912335619ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a5ff2d6abfe0ba8e49dd0d7fc9b301451</anchor>
      <arglist>(FromNukeCameraConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a3c31480c4676c90a3f825d3dd5125443</anchor>
      <arglist>(FromNukePointsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>aa29f26ea58aba749f720c7f594653ea2</anchor>
      <arglist>(FromNukeTileConverter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>ab3a4a8f44380b5de2ff275c476d19a5c</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a2617521bd604977e3aead4bf0572af91</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a80d18fa30d0fa9123f8bfd13d7c4da4d</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Color4&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>acd1e104e1bcf30057f2cdcbb3065be0a</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Box&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a2e06fb9c48e0b444442e1fcc88fb7a3c</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Matrix33&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a8da94245985456019353cdf287d032ae</anchor>
      <arglist>(DD::Image::Hash &amp;hash, const Imath::Matrix44&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a301a27c952ec711764858cd012929eef</anchor>
      <arglist>(MeshFromNuke)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>aaf50f683f45990890ac612dd4a631fba</anchor>
      <arglist>(ToNukeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreNuke.html</anchorfile>
      <anchor>a2b09c7c6d43e1b1e6d37390150d3eb6a</anchor>
      <arglist>(ToNukeGeometryConverter)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::CurveLookup</name>
    <filename>classIECoreNuke_1_1CurveLookup.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>BaseType</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a5bd703dd18119396ae1f6f0a8233c785</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurveLookup</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a81d2846a09b5a7030ce833f0de03470a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;label, const std::string &amp;toolTip=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addCurve</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>ad4621cc887050bf8dd81942eb3847062</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;defaultCurve=&quot;y C 0 1&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>knob</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>aa347f96f97cd32476bcc9790f69b8253</anchor>
      <arglist>(DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>ad8da87b06ebb0e9a23643ff9b89d8c75</anchor>
      <arglist>(T xMin=0, T xMax=1, unsigned numSamples=100)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a2d4ef62a45b65dd976e1f2f710629e6f</anchor>
      <arglist>(DD::Image::Hash &amp;hash) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a0cd998bcab335c8fb1b0edd4598288b9</anchor>
      <arglist>(unsigned curveIndex, DD::Image::Hash &amp;hash) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a6143e6dc8e3d59686ace8617497a22f2</anchor>
      <arglist>(unsigned curveIndex, T xMin=0, T xMax=1, unsigned numSamples=100)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classIECoreNuke_1_1CurveLookup.html</anchorfile>
      <anchor>a3dbac8efee252a982955c5fcb218fe4f</anchor>
      <arglist>(unsigned curveIndex, T x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::DrawableHolder</name>
    <filename>classIECoreNuke_1_1DrawableHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>DrawableHolder</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a84365f38aea5276a23c0ac9aadff3942</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>IECoreGL::ConstScenePtr</type>
      <name>scene</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a86c27b6e5da3ef5a17daab3c4bf92a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>transform</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>ae00b5b452b14cf335799a4b263d0b4b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>knobs</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a4c03d22be4ca70b1c09263732ffbd2e3</anchor>
      <arglist>(DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Class</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a469b0d6d27a8af28324b804ec5353747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>node_help</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a24c31e9b4e9469e680e1fc4df543d070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>build_handles</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>a1766bf6123e6bb6f65a44bc4bf5f5a27</anchor>
      <arglist>(DD::Image::ViewerContext *ctx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>draw_handle</name>
      <anchorfile>classIECoreNuke_1_1DrawableHolder.html</anchorfile>
      <anchor>aa3700285bc3811f7410a719a8f7853ed</anchor>
      <arglist>(DD::Image::ViewerContext *ctx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::FromNukeCameraConverter</name>
    <filename>classIECoreNuke_1_1FromNukeCameraConverter.html</filename>
    <base>IECoreNuke::FromNukeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1FromNukeCameraConverter.html</anchorfile>
      <anchor>a21ee418b351dfcdcd9e50201172521e3</anchor>
      <arglist>(FromNukeCameraConverter, FromNukeCameraConverterTypeId, FromNukeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromNukeCameraConverter</name>
      <anchorfile>classIECoreNuke_1_1FromNukeCameraConverter.html</anchorfile>
      <anchor>ab5f6f0a25fde52437db47544dff5bee5</anchor>
      <arglist>(const DD::Image::CameraOp *camera)</arglist>
    </member>
    <member kind="function">
      <type>IECore::V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECoreNuke_1_1FromNukeCameraConverter.html</anchorfile>
      <anchor>a575514709b5c6de0bc48021c451adcb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::V2iParameter *</type>
      <name>resolutionParameter</name>
      <anchorfile>classIECoreNuke_1_1FromNukeCameraConverter.html</anchorfile>
      <anchor>a5125b324598171437f25ac139245c91b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1FromNukeCameraConverter.html</anchorfile>
      <anchor>ae5a4cc4f8ffc0fb19dba080c9760f2d0</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::FromNukeConverter</name>
    <filename>classIECoreNuke_1_1FromNukeConverter.html</filename>
    <base>IECore::ToCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1FromNukeConverter.html</anchorfile>
      <anchor>ada89356fa5ccea406b8ad6734d60ba3d</anchor>
      <arglist>(FromNukeConverter, FromNukeConverterTypeId, IECore::ToCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FromNukeConverter</name>
      <anchorfile>classIECoreNuke_1_1FromNukeConverter.html</anchorfile>
      <anchor>a1a724d45e25249d47d6fe1ff8b54f740</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::FromNukePointsConverter</name>
    <filename>classIECoreNuke_1_1FromNukePointsConverter.html</filename>
    <base>IECoreNuke::FromNukeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1FromNukePointsConverter.html</anchorfile>
      <anchor>a230fc304f7fa22f51ab71dc68e8395cc</anchor>
      <arglist>(FromNukePointsConverter, FromNukePointsConverterTypeId, FromNukePointsConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromNukePointsConverter</name>
      <anchorfile>classIECoreNuke_1_1FromNukePointsConverter.html</anchorfile>
      <anchor>a39650260ed7c0f0558237dcd747353d7</anchor>
      <arglist>(const DD::Image::GeoInfo *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1FromNukePointsConverter.html</anchorfile>
      <anchor>af5bddfb3eb6b89f0335d4809b896ecd4</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::FromNukeTileConverter</name>
    <filename>classIECoreNuke_1_1FromNukeTileConverter.html</filename>
    <base>IECoreNuke::FromNukeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1FromNukeTileConverter.html</anchorfile>
      <anchor>a1ce803a34510dad481e95f9081e511cc</anchor>
      <arglist>(FromNukeTileConverter, FromNukeTileConverterTypeId, FromNukeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FromNukeTileConverter</name>
      <anchorfile>classIECoreNuke_1_1FromNukeTileConverter.html</anchorfile>
      <anchor>a4400c47c0d5bde51d278aca4822377a9</anchor>
      <arglist>(const DD::Image::Tile *tile)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1FromNukeTileConverter.html</anchorfile>
      <anchor>a6267257879d76a504cd8c48e6c0c9d24</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::MeshFromNuke</name>
    <filename>classIECoreNuke_1_1MeshFromNuke.html</filename>
    <base>IECoreNuke::FromNukeConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1MeshFromNuke.html</anchorfile>
      <anchor>a175f805e8c3d27455c261f7c13e25a5b</anchor>
      <arglist>(MeshFromNuke, MeshFromNukeTypeId, FromNukeConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshFromNuke</name>
      <anchorfile>classIECoreNuke_1_1MeshFromNuke.html</anchorfile>
      <anchor>a6a92d33b84c4a411ff942af250d5a502</anchor>
      <arglist>(const DD::Image::GeoInfo *geo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1MeshFromNuke.html</anchorfile>
      <anchor>ab16510e39780d45772b5abeacfef990f</anchor>
      <arglist>(IECore::ConstCompoundObjectPtr operands) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::MeshToNukeGeometryConverter</name>
    <filename>classIECoreNuke_1_1MeshToNukeGeometryConverter.html</filename>
    <base>IECoreNuke::ToNukeGeometryConverter</base>
    <member kind="function">
      <type></type>
      <name>MeshToNukeGeometryConverter</name>
      <anchorfile>classIECoreNuke_1_1MeshToNukeGeometryConverter.html</anchorfile>
      <anchor>ae511b92bd1bd203fab4e7535545f2de8</anchor>
      <arglist>(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToNukeGeometryConverterDescription&lt; MeshToNukeGeometryConverter &gt;</type>
      <name>Description</name>
      <anchorfile>classIECoreNuke_1_1MeshToNukeGeometryConverter.html</anchorfile>
      <anchor>ac43e826d8dea472bc0c2257d5fc32071</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1MeshToNukeGeometryConverter.html</anchorfile>
      <anchor>aa6c757e30772d52513135121200d1732</anchor>
      <arglist>(const IECore::Object *from, DD::Image::GeometryList &amp;to, int objIndex, const IECore::CompoundObject *operands) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Description</type>
      <name>g_description</name>
      <anchorfile>classIECoreNuke_1_1MeshToNukeGeometryConverter.html</anchorfile>
      <anchor>a69f334d2b6c3bd5ddae839ed16d83e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ObjectHolder</name>
    <filename>classIECoreNuke_1_1ObjectHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectHolder</name>
      <anchorfile>classIECoreNuke_1_1ObjectHolder.html</anchorfile>
      <anchor>a39fd6d5c8900f27de8b1a9c916f3b002</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>knobs</name>
      <anchorfile>classIECoreNuke_1_1ObjectHolder.html</anchorfile>
      <anchor>a4a6726f1480b26ad9dc2ebfcff89aeb4</anchor>
      <arglist>(DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Class</name>
      <anchorfile>classIECoreNuke_1_1ObjectHolder.html</anchorfile>
      <anchor>ac9b852208b37cfc58228b19be1cac463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>node_help</name>
      <anchorfile>classIECoreNuke_1_1ObjectHolder.html</anchorfile>
      <anchor>a68173e876e0ec68f469ffbf86f9ff09b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ObjectKnob</name>
    <filename>classIECoreNuke_1_1ObjectKnob.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setValue</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>aba18d155b2cb9837210b7949a6558c00</anchor>
      <arglist>(IECore::ConstObjectPtr value)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstObjectPtr</type>
      <name>getValue</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>a38e1c078a44c8e2fcd7f69d50df5ca25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectKnob *</type>
      <name>objectKnob</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>ac0f9ad357b0cd21a42685f3c3518ffbe</anchor>
      <arglist>(DD::Image::Knob_Callback f, IECore::ObjectPtr *storage, const char *name, const char *label)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectKnob</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>ab97a194badeef9fdb9176b8238e22f0b</anchor>
      <arglist>(DD::Image::Knob_Closure *f, IECore::ObjectPtr *storage, const char *name, const char *label=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Class</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>aedf14b1d96db27bfbff33f790faba901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>to_script</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>a66f0fe4f84c15903580a077cb99c317c</anchor>
      <arglist>(std::ostream &amp;os, const DD::Image::OutputContext *context, bool quote) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>from_script</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>af73d40d7134fb630a4d4f78364f92634</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>not_default</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>a361b63766ed09fecded98656e5914e7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classIECoreNuke_1_1ObjectKnob.html</anchorfile>
      <anchor>a14b26c7e865c5326c39a97cd7599724d</anchor>
      <arglist>(DD::Image::StoreType storeType, void *storage, DD::Image::Hash &amp;hash, const DD::Image::OutputContext &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::OpHolder</name>
    <filename>classIECoreNuke_1_1OpHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>OpHolder</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>afe3daa78f6d1c87a03ee7c8c3b2f4bfd</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>engine</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>a9c9a1f2ca9675689ae3d0381dbc6e6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Class</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>a1539b556a0dab05909ed8c29cc06a848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>node_help</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>aab6354139b5fc3b58e009f563ecc9557</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DD::Image::Executable *</type>
      <name>executable</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>ac75261c3e0f33b4665c6421aa9e6df1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>a46d39b3d01dbd219edead21ef25e29d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExecuteThreadSafe</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>af927074c33b4e53d60496a580b1b476b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWrite</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>aa6587ebd14bec6b1628b0b22dab73441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>bindFnOpHolder</name>
      <anchorfile>classIECoreNuke_1_1OpHolder.html</anchorfile>
      <anchor>a4ca1b4cf1e61684abbcabc3265e802d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ParameterHandler</name>
    <filename>classIECoreNuke_1_1ParameterHandler.html</filename>
    <base>IECore::RefCounted</base>
    <member kind="typedef">
      <type>std::vector&lt; DD::Image::Op * &gt;::const_iterator</type>
      <name>InputIterator</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a879ca74c0a4841a750f89fa1b28c8d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>minimumInputs</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a0dfec24ba5336e52002ce2f12dd45414</anchor>
      <arglist>(const IECore::Parameter *parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>maximumInputs</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>af35967cec6e518f8dd7c7ba4898056fb</anchor>
      <arglist>(const IECore::Parameter *parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>testInput</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>aab6f32798bfd3b776d24384b2b3b0d45</anchor>
      <arglist>(const IECore::Parameter *parameter, int input, const DD::Image::Op *op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterValue</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a554ca275c386bd0d21c56d338bedf285</anchor>
      <arglist>(IECore::Parameter *parameter, InputIterator first, InputIterator last)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>knobs</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a3cfa5730388c171920ce967ee0129f1d</anchor>
      <arglist>(const IECore::Parameter *parameter, const char *knobName, DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameterValue</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a471dbc769c412d80127c91917b194544</anchor>
      <arglist>(IECore::Parameter *parameter, ValueSource valueSource=Storage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKnobValue</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a499f78c2c83d3163d07b52437ca5db08</anchor>
      <arglist>(const IECore::Parameter *parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>getState</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>aaffd81f64c33d562a05dd01f9f8db5ad</anchor>
      <arglist>(const IECore::Parameter *parameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a73d22cffd52f59e705bfd05c9eb1e00d</anchor>
      <arglist>(IECore::Parameter *parameter, const IECore::Object *state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParameterHandlerPtr</type>
      <name>create</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a50fa99a462576ed180a65a7eff5aaa6e</anchor>
      <arglist>(const IECore::Parameter *parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>knobLabel</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>aedc41ef84f9879058675cca5c11a1eb0</anchor>
      <arglist>(const IECore::Parameter *parameter) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setKnobProperties</name>
      <anchorfile>classIECoreNuke_1_1ParameterHandler.html</anchorfile>
      <anchor>a5009c05d38f69e87895d9f962052efff</anchor>
      <arglist>(const IECore::Parameter *parameter, DD::Image::Knob_Callback f, DD::Image::Knob *knob) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ProceduralHolder</name>
    <filename>classIECoreNuke_1_1ProceduralHolder.html</filename>
    <member kind="function">
      <type></type>
      <name>ProceduralHolder</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a886dc49c7879025b25b6f87768de93fa</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstParameterisedProceduralPtr</type>
      <name>procedural</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>ac6489bef8b8faf610aeadf042470462e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECoreGL::ConstScenePtr</type>
      <name>scene</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a9d9b48562e4dfe8486a40a70cdc643f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Imath::Box3f</type>
      <name>bound</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a517f28547b15f063c29a556d6e554132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Imath::M44f</type>
      <name>transform</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a1515749846e6d19a9e0a287a8f839978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>knobs</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>af57d3052c594b043642849ba25e87477</anchor>
      <arglist>(DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Class</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>acaca7c6c3d1bcaf84d8c36c379742bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>node_help</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>ac9cd774b8302d115e648ae7a4dda50e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>build_handles</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a238c14bdf137b11778c5dd3f5d0100eb</anchor>
      <arglist>(DD::Image::ViewerContext *ctx)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>draw_handle</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a80f159c3a2ca985c2deed182b5df1575</anchor>
      <arglist>(DD::Image::ViewerContext *ctx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>node_shape</name>
      <anchorfile>classIECoreNuke_1_1ProceduralHolder.html</anchorfile>
      <anchor>a0b0642258b8a6c7d303dee4319434a1c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ToNukeConverter</name>
    <filename>classIECoreNuke_1_1ToNukeConverter.html</filename>
    <base>IECore::FromCoreConverter</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1ToNukeConverter.html</anchorfile>
      <anchor>aa8071a8f3115457dd184b27d2ee34dbe</anchor>
      <arglist>(ToNukeConverter, ToNukeConverterTypeId, IECore::FromCoreConverter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToNukeConverter</name>
      <anchorfile>classIECoreNuke_1_1ToNukeConverter.html</anchorfile>
      <anchor>a03b4d72a0cc947dd9fa1282550bbfd6f</anchor>
      <arglist>(const std::string &amp;description, IECore::TypeId supportedType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ToNukeGeometryConverter</name>
    <filename>classIECoreNuke_1_1ToNukeGeometryConverter.html</filename>
    <base>IECoreNuke::ToNukeConverter</base>
    <class kind="class">IECoreNuke::ToNukeGeometryConverter::ToNukeGeometryConverterDescription</class>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>a0c53b23ea9404df5f9c737117ceaef09</anchor>
      <arglist>(ToNukeGeometryConverter, ToNukeGeometryConverterTypeId, ToNukeConverter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>a034abf3e7e803962f7ea6a450dc548ad</anchor>
      <arglist>(DD::Image::GeometryList &amp;geoList) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToNukeGeometryConverterPtr</type>
      <name>create</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>a762773f5e14d1ad5f57156640399ade7</anchor>
      <arglist>(IECore::ConstObjectPtr src)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ToNukeGeometryConverterPtr(*</type>
      <name>CreatorFn</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>a1ace780d6735a41af37d46d9dda188db</anchor>
      <arglist>)(IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ToNukeGeometryConverter</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>a40180eebfe9621b02092faa370077eed</anchor>
      <arglist>(const std::string &amp;description, IECore::TypeId fromType, IECore::ConstObjectPtr object)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doConversion</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>aff58edf368515ee48c398ad8a6157a6b</anchor>
      <arglist>(const IECore::Object *from, DD::Image::GeometryList &amp;to, int objIndex, const IECore::CompoundObject *operands) const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerConverter</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter.html</anchorfile>
      <anchor>ab30f3bd1c41426afe6b6d81cedbce209</anchor>
      <arglist>(IECore::TypeId fromType, CreatorFn creator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::ToNukeGeometryConverter::ToNukeGeometryConverterDescription</name>
    <filename>classIECoreNuke_1_1ToNukeGeometryConverter_1_1ToNukeGeometryConverterDescription.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ToNukeGeometryConverterDescription</name>
      <anchorfile>classIECoreNuke_1_1ToNukeGeometryConverter_1_1ToNukeGeometryConverterDescription.html</anchorfile>
      <anchor>ae746238c9c31d542fbaed9841ac699f6</anchor>
      <arglist>(IECore::TypeId fromType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreNuke::Warp</name>
    <filename>classIECoreNuke_1_1Warp.html</filename>
    <member kind="function">
      <type></type>
      <name>Warp</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>ad12316bce0eaf83bf571690f8e596e80</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Imath::V2f</type>
      <name>warp</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>aa550d8fc6564e7081fb21dc99117f460</anchor>
      <arglist>(const Imath::V2f &amp;outputPixel) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>knobs</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>afe001b34123bc97dbbd0b57de679c2d9</anchor>
      <arglist>(DD::Image::Knob_Callback f)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_validate</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>a6f5367e1ed46743fe46460f28ed5b4c9</anchor>
      <arglist>(bool forReal)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>_request</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>acdb82df895fd398250fd1896330f2da6</anchor>
      <arglist>(int x, int y, int r, int t, const DD::Image::ChannelSet &amp;channels, int count)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>engine</name>
      <anchorfile>classIECoreNuke_1_1Warp.html</anchorfile>
      <anchor>aec4a5184d04f57eca8523a483a8f2d2b</anchor>
      <arglist>(int y, int x, int r, const DD::Image::ChannelSet &amp;channels, DD::Image::Row &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IECoreRI</name>
    <filename>namespaceIECoreRI.html</filename>
    <class kind="class">IECoreRI::Dspy</class>
    <class kind="class">IECoreRI::GXEvaluator</class>
    <class kind="class">IECoreRI::ParameterList</class>
    <class kind="class">IECoreRI::PrimitiveVariableList</class>
    <class kind="class">IECoreRI::PTCParticleReader</class>
    <class kind="class">IECoreRI::PTCParticleWriter</class>
    <class kind="class">IECoreRI::Renderer</class>
    <class kind="class">IECoreRI::RIBWriter</class>
    <class kind="class">IECoreRI::ScopedContext</class>
    <class kind="class">IECoreRI::SLOReader</class>
    <class kind="class">IECoreRI::SXExecutor</class>
    <class kind="struct">IECoreRI::SXTypeTraits</class>
    <member kind="enumeration">
      <name>TypeId</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>ac6182f6678f75e0c7499cb3fc3171cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LastCoreRITypeId</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>ac6182f6678f75e0c7499cb3fc3171cb4ab682224049ada382989742d1771cebed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>a5c93dfe40797bc3c584d785a04498383</anchor>
      <arglist>(PTCParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>abc88b0c1c679fce6a53a2a627771c93f</anchor>
      <arglist>(PTCParticleWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>abafb71b199dd5b0a8656ac934ea5b7d5</anchor>
      <arglist>(Renderer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>a8c8fe4185b314ddf4c29e65183cb2add</anchor>
      <arglist>(RIBWriter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>aaacfec703671311ade39a92fe819c740</anchor>
      <arglist>(SLOReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_FORWARDDECLARE</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>aa51a7fd4a4b5e4171ab88ff6ab5bfe1b</anchor>
      <arglist>(SXRendererImplementation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLAREPTR</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>af6ea943698713689db465ba8fb30334e</anchor>
      <arglist>(SXRenderer)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>executeProcedural</name>
      <anchorfile>namespaceIECoreRI.html</anchorfile>
      <anchor>aaddb678df21b0bdf29560ec73358e009</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::Dspy</name>
    <filename>classIECoreRI_1_1Dspy.html</filename>
    <member kind="function" static="yes">
      <type>static PtDspyError</type>
      <name>imageOpen</name>
      <anchorfile>classIECoreRI_1_1Dspy.html</anchorfile>
      <anchor>a34e392efb163b0ced782429435f8c0f5</anchor>
      <arglist>(PtDspyImageHandle *image, const char *driverName, const char *fileName, int width, int height, int paramcount, const UserParameter *parameters, int formatCount, PtDspyDevFormat *format, PtFlagStuff *flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PtDspyError</type>
      <name>imageQuery</name>
      <anchorfile>classIECoreRI_1_1Dspy.html</anchorfile>
      <anchor>a44b7eb59ea293e8eb68b116c31feaaa1</anchor>
      <arglist>(PtDspyImageHandle image, PtDspyQueryType type, int size, void *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PtDspyError</type>
      <name>imageData</name>
      <anchorfile>classIECoreRI_1_1Dspy.html</anchorfile>
      <anchor>a897b530811e5bd685c66bc041302dd53</anchor>
      <arglist>(PtDspyImageHandle image, int xMin, int xMaxPlusOne, int yMin, int yMaxPlusOne, int entrySize, const unsigned char *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PtDspyError</type>
      <name>imageClose</name>
      <anchorfile>classIECoreRI_1_1Dspy.html</anchorfile>
      <anchor>a92f499454e5957bb8e4dfa11de6c60b1</anchor>
      <arglist>(PtDspyImageHandle image)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::GXEvaluator</name>
    <filename>classIECoreRI_1_1GXEvaluator.html</filename>
    <member kind="function">
      <type></type>
      <name>GXEvaluator</name>
      <anchorfile>classIECoreRI_1_1GXEvaluator.html</anchorfile>
      <anchor>a0c2bbbaa24960026be3360121ae29afe</anchor>
      <arglist>(const IECore::Primitive *primitive)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>numFaces</name>
      <anchorfile>classIECoreRI_1_1GXEvaluator.html</anchorfile>
      <anchor>ab67d19cbb784476b9d4b42e518708f3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::CompoundDataPtr</type>
      <name>evaluate</name>
      <anchorfile>classIECoreRI_1_1GXEvaluator.html</anchorfile>
      <anchor>a59e9282cea42c363f03e5c79ec55b3e4</anchor>
      <arglist>(const IECore::IntVectorData *faceIndices, const IECore::FloatVectorData *u, const IECore::FloatVectorData *v, const std::vector&lt; std::string &gt; &amp;primVarNames) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::CompoundDataPtr</type>
      <name>evaluate</name>
      <anchorfile>classIECoreRI_1_1GXEvaluator.html</anchorfile>
      <anchor>a58ce8458f81918b131bbc2640383758f</anchor>
      <arglist>(const IECore::FloatVectorData *s, const IECore::FloatVectorData *t, const std::vector&lt; std::string &gt; &amp;primVarNames) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::ParameterList</name>
    <filename>classIECoreRI_1_1ParameterList.html</filename>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>a598b62306878bc6c9acaa46f8228c767</anchor>
      <arglist>(const IECore::CompoundDataMap &amp;parameters, const std::map&lt; std::string, std::string &gt; *typeHints=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>ab80f7b2e0d6b8e8ce427b0e900bddf11</anchor>
      <arglist>(const IECore::CompoundDataMap &amp;parameters, const std::string &amp;prefix, const std::map&lt; std::string, std::string &gt; *typeHints=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterList</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>a1151575098426caa6bf8d944a35dfdd2</anchor>
      <arglist>(const std::string &amp;name, const IECore::Data *parameter, const std::map&lt; std::string, std::string &gt; *typeHints=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>ac30fbd8afcca9319d3618339b6ac1eb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>tokens</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>a5cb8ca2757374368c51c1855ae2222a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void **</type>
      <name>values</name>
      <anchorfile>classIECoreRI_1_1ParameterList.html</anchorfile>
      <anchor>ac97f76abedb0b56f8e24175145262b8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::PrimitiveVariableList</name>
    <filename>classIECoreRI_1_1PrimitiveVariableList.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveVariableList</name>
      <anchorfile>classIECoreRI_1_1PrimitiveVariableList.html</anchorfile>
      <anchor>ae379d61d7c5835c9fe16022d4bf3df38</anchor>
      <arglist>(const IECore::PrimitiveVariableMap &amp;primVars, const std::map&lt; std::string, std::string &gt; *typeHints=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n</name>
      <anchorfile>classIECoreRI_1_1PrimitiveVariableList.html</anchorfile>
      <anchor>a3e2860bc36b7fbdb7b299b72f6ae682b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>tokens</name>
      <anchorfile>classIECoreRI_1_1PrimitiveVariableList.html</anchorfile>
      <anchor>a35dff12620782ec8fc4644d150dbffd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void **</type>
      <name>values</name>
      <anchorfile>classIECoreRI_1_1PrimitiveVariableList.html</anchorfile>
      <anchor>af6ea4181559c939f255beff7de17f8b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::PTCParticleReader</name>
    <filename>classIECoreRI_1_1PTCParticleReader.html</filename>
    <base>IECore::ParticleReader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>afa62dba5603104fa8a26563b0777e515</anchor>
      <arglist>(PTCParticleReader, PTCParticleReaderTypeId, IECore::ParticleReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PTCParticleReader</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>a814149c8776bfb6b6917d161dc2ef431</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>numParticles</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>a0c7188bc5824b01ebee4b70faf9fc971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeNames</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>a9f5504964110edd02064ab03fe406b56</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::DataPtr</type>
      <name>readAttribute</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>abf17eb58b6c503a66330c5128aa03892</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>a5efed1e54a5f4a5eef44c446ca5220d8</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECoreRI_1_1PTCParticleReader.html</anchorfile>
      <anchor>a7114fdae92cfedf021076c1811d336c9</anchor>
      <arglist>(const IECore::CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::PTCParticleWriter</name>
    <filename>classIECoreRI_1_1PTCParticleWriter.html</filename>
    <base>IECore::ParticleWriter</base>
    <member kind="function">
      <type></type>
      <name>PTCParticleWriter</name>
      <anchorfile>classIECoreRI_1_1PTCParticleWriter.html</anchorfile>
      <anchor>a93deaf35e32c7ea4fe5608ec90155943</anchor>
      <arglist>(IECore::ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::Renderer</name>
    <filename>classIECoreRI_1_1Renderer.html</filename>
    <base>IECore::Renderer</base>
    <member kind="function">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ab9b05e21a35f4b3084adfc0546646dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a3424c8e2d38c5e14b3ce1a3ae42a69b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ae257bc4d7428fb2a805b4f0fa6089581</anchor>
      <arglist>(IECoreRI::Renderer, RendererTypeId, IECore::Renderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a2beeb2c88766ed0e23269c25688a0aea</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ConstDataPtr</type>
      <name>getOption</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>adb1400af07065b40435d9f81bbd5db69</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>camera</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a31d49ca667775a476729831d775a50e6</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>display</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a530e8fa4e602eca1a5b1b6bd7bd20a47</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;data, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldBegin</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>aef99c72b40799828ff461e7ba81bd53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>worldEnd</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a093a50418dd4fb86129eb37a5e366c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformBegin</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a25c8bef90677f2f838a3520c30a18a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformEnd</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>acf2569a27dbd67e216c4564c076cd00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>aae0c847e0dcb885e385aca58e4f822e0</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>acc16f4c576e3a2a2e2c4acc4dc20722f</anchor>
      <arglist>(const std::string &amp;coordinateSystem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a206a45ac1c82036fa910d7bdbf84f155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Imath::M44f</type>
      <name>getTransform</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a7b2826a4b7ae81054d38a80ae5743469</anchor>
      <arglist>(const std::string &amp;coordinateSystem) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concatTransform</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ac2267c7d75cb19efb0f5b76512c735b9</anchor>
      <arglist>(const Imath::M44f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coordinateSystem</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ac1c8614eb2768afae432ac1929d50504</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeBegin</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ae24b2ca7b947fa8c700d2c32800a95d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attributeEnd</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a8a15b26e1c907177b55dec9ef99bd279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a03376dc5280cee9f5bde9575bf2ec40e</anchor>
      <arglist>(const std::string &amp;name, IECore::ConstDataPtr value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::ConstDataPtr</type>
      <name>getAttribute</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a03764e3019647e25c94df9cd484dda85</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shader</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a2f3c8059a24fa35c5e6ff04cf1a8e22b</anchor>
      <arglist>(const std::string &amp;type, const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>light</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a42604881fb68880247b418aefb841900</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;handle, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>illuminate</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a1d14e7f7d4b88d70c252dbdc6f12a6a7</anchor>
      <arglist>(const std::string &amp;lightHandle, bool on)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionBegin</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ad7ec0233080519bc74418fcb799c8a8a</anchor>
      <arglist>(const std::set&lt; float &gt; &amp;times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>motionEnd</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ab5b2ce1ba1176d98f1558169811d3dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>points</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a0b0e6f9e63b9f769c53776857f370d99</anchor>
      <arglist>(size_t numPoints, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disk</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>ad88749a4c1b5560256a4918cd11b35f4</anchor>
      <arglist>(float radius, float z, float thetaMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>curves</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a39ba4d33adf2359db076048d7f0d93ea</anchor>
      <arglist>(const IECore::CubicBasisf &amp;basis, bool periodic, IECore::ConstIntVectorDataPtr numVertices, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>text</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a79afead473f02efdb7907bc477b4f209</anchor>
      <arglist>(const std::string &amp;font, const std::string &amp;text, float kerning=1.0f, const IECore::PrimitiveVariableMap &amp;primVars=IECore::PrimitiveVariableMap())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sphere</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a0e7ede6557b575c14031eb2d851186a7</anchor>
      <arglist>(float radius, float zMin, float zMax, float thetaMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>image</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a0bdc8db0d493604b30eb22bd16900c62</anchor>
      <arglist>(const Imath::Box2i &amp;dataWindow, const Imath::Box2i &amp;displayWindow, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mesh</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a4228ed06e2260009861b50d787d89427</anchor>
      <arglist>(IECore::ConstIntVectorDataPtr vertsPerFace, IECore::ConstIntVectorDataPtr vertIds, const std::string &amp;interpolation, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nurbs</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>af6a4fc4f6c84cfb58c37ceee03c95b76</anchor>
      <arglist>(int uOrder, IECore::ConstFloatVectorDataPtr uKnot, float uMin, float uMax, int vOrder, IECore::ConstFloatVectorDataPtr vKnot, float vMin, float vMax, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>patchMesh</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a546138aa7ba85aee754486c31ad56edf</anchor>
      <arglist>(const IECore::CubicBasisf &amp;uBasis, const IECore::CubicBasisf &amp;vBasis, int nu, bool uPeriodic, int nv, bool vPeriodic, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>geometry</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a5c5eea3786928dfeeb9e4c8fa42c4c34</anchor>
      <arglist>(const std::string &amp;type, const IECore::CompoundDataMap &amp;topology, const IECore::PrimitiveVariableMap &amp;primVars)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>procedural</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a5418f8542cfab4838febe8a022001cb2</anchor>
      <arglist>(IECore::Renderer::ProceduralPtr proc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceBegin</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a61d9369968614e9570350aef9eabf21c</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instanceEnd</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>af062d8c32246d9732207854ffcf72a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>instance</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a8b4c9b07d05b52f9adbd1b27a3693977</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IECore::DataPtr</type>
      <name>command</name>
      <anchorfile>classIECoreRI_1_1Renderer.html</anchorfile>
      <anchor>a179b54fef6eb51e0135bbb51e2f66fd7</anchor>
      <arglist>(const std::string &amp;name, const IECore::CompoundDataMap &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::RIBWriter</name>
    <filename>classIECoreRI_1_1RIBWriter.html</filename>
    <base>IECore::Writer</base>
    <member kind="function">
      <type></type>
      <name>RIBWriter</name>
      <anchorfile>classIECoreRI_1_1RIBWriter.html</anchorfile>
      <anchor>a21f883ad494d2fa1b72e1e2cb347722e</anchor>
      <arglist>(IECore::ObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameterPtr</type>
      <name>worldBlockParameter</name>
      <anchorfile>classIECoreRI_1_1RIBWriter.html</anchorfile>
      <anchor>a61d960600b6015e0379211c0ce0ed1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IECore::ConstBoolParameterPtr</type>
      <name>worldBlockParameter</name>
      <anchorfile>classIECoreRI_1_1RIBWriter.html</anchorfile>
      <anchor>ac3be3f2a9ca4f3329557791de64ac0e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canWrite</name>
      <anchorfile>classIECoreRI_1_1RIBWriter.html</anchorfile>
      <anchor>a6da6dd520bef7a6f35064d9ee2cc07ab</anchor>
      <arglist>(IECore::ConstObjectPtr object, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWrite</name>
      <anchorfile>classIECoreRI_1_1RIBWriter.html</anchorfile>
      <anchor>a36d7f19bd08fa808d64c3005e457c08a</anchor>
      <arglist>(const IECore::CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::ScopedContext</name>
    <filename>classIECoreRI_1_1ScopedContext.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedContext</name>
      <anchorfile>classIECoreRI_1_1ScopedContext.html</anchorfile>
      <anchor>a9d9623acf62db47fd92e55fa8037354d</anchor>
      <arglist>(RtContextHandle context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedContext</name>
      <anchorfile>classIECoreRI_1_1ScopedContext.html</anchorfile>
      <anchor>a55ee39757bb5cdf55ee7893ae6fa7204</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::SLOReader</name>
    <filename>classIECoreRI_1_1SLOReader.html</filename>
    <base>IECore::Reader</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreRI_1_1SLOReader.html</anchorfile>
      <anchor>a640fc5f92da8bb1dc9c13a702286df93</anchor>
      <arglist>(IECoreRI::SLOReader, SLOReaderTypeId, IECore::Reader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLOReader</name>
      <anchorfile>classIECoreRI_1_1SLOReader.html</anchorfile>
      <anchor>a01702ec5200451a41220cd48cb5c1929</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canRead</name>
      <anchorfile>classIECoreRI_1_1SLOReader.html</anchorfile>
      <anchor>a1050d48ffe42052361501b6af3966c52</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IECore::ObjectPtr</type>
      <name>doOperation</name>
      <anchorfile>classIECoreRI_1_1SLOReader.html</anchorfile>
      <anchor>a966ff099647366cd1b654206d432aa1f</anchor>
      <arglist>(const IECore::CompoundObject *operands)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreRI::SXExecutor</name>
    <filename>classIECoreRI_1_1SXExecutor.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; SxShader &gt;</type>
      <name>ShaderVector</name>
      <anchorfile>classIECoreRI_1_1SXExecutor.html</anchorfile>
      <anchor>a8f07df0d5e34882683509ecf3215ca2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SXExecutor</name>
      <anchorfile>classIECoreRI_1_1SXExecutor.html</anchorfile>
      <anchor>a8aeda1e85a11acd1905e76c7b308a874</anchor>
      <arglist>(const ShaderVector &amp;shaders, SxContext context, const ShaderVector &amp;coshaders, const ShaderVector &amp;lights)</arglist>
    </member>
    <member kind="function">
      <type>IECore::CompoundDataPtr</type>
      <name>execute</name>
      <anchorfile>classIECoreRI_1_1SXExecutor.html</anchorfile>
      <anchor>ab6515b65ab24349b3479d5141ad0d0b8</anchor>
      <arglist>(const IECore::CompoundData *points) const </arglist>
    </member>
    <member kind="function">
      <type>IECore::CompoundDataPtr</type>
      <name>execute</name>
      <anchorfile>classIECoreRI_1_1SXExecutor.html</anchorfile>
      <anchor>ae6524046a641a351de800f45dab84638</anchor>
      <arglist>(const IECore::CompoundData *points, const Imath::V2i &amp;gridSize) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IECoreRI::SXTypeTraits</name>
    <filename>structIECoreRI_1_1SXTypeTraits.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>Type</name>
      <anchorfile>structIECoreRI_1_1SXTypeTraits.html</anchorfile>
      <anchor>accb913f9da22ae43d5bf3fe775e0149f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IECoreTruelight::TruelightColorTransformOp</name>
    <filename>classIECoreTruelight_1_1TruelightColorTransformOp.html</filename>
    <base>IECore::ColorTransformOp</base>
    <member kind="function">
      <type></type>
      <name>IE_CORE_DECLARERUNTIMETYPEDEXTENSION</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>abba3b541907211679375a1b7e327ec52</anchor>
      <arglist>(IECoreTruelight::TruelightColorTransformOp, TruelightColorTransformOpTypeId, IECore::ColorTransformOp)</arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameter *</type>
      <name>profileParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>ae44733ff1e895c8de0fe0533c5668cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::StringParameter *</type>
      <name>profileParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a802fa2ad0069a3d7c4d1cf8fbae58322</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::StringParameter *</type>
      <name>displayParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a92a4a08d443beefa06f3e37eb8fa80f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::StringParameter *</type>
      <name>displayParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>ab0a6b2a3ea3e0fdd95227f1b72945e7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::IntParameter *</type>
      <name>inputSpaceParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>adbb34231e16c0d323f32cd0a765847c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::IntParameter *</type>
      <name>inputSpaceParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a3fbd3bfcf2c0243b737cad4f7e633339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IECore::BoolParameter *</type>
      <name>rawTruelightOutputParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a689fcaf791a6f5c16d9b6773b91d782d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IECore::BoolParameter *</type>
      <name>rawTruelightOutputParameter</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a32b0ef575234ee77ea24351c72bcea96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>commands</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>acb6f7d0c8328d16690e765459d804851</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>a3c8c6c90bb1be3448a71d6706f69b2d6</anchor>
      <arglist>(const IECore::CompoundObject *operands)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classIECoreTruelight_1_1TruelightColorTransformOp.html</anchorfile>
      <anchor>aabc7533d14800bb7e147177deb358f41</anchor>
      <arglist>(Imath::Color3f &amp;color) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; MString &gt;</name>
    <filename>structstd_1_1less_3_01MString_01_4.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01MString_01_4.html</anchorfile>
      <anchor>adcb0075446cfe36aa19af3f154a3ec07</anchor>
      <arglist>(const MString &amp;a, const MString &amp;b) const </arglist>
    </member>
  </compound>
</tagfile>
