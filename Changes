10.1.3.0 (relative to 10.1.2.0)
========

Build
-----

- Windows : Update to Dependencies 2.1.1.
- Windows : Disable permissive mode to make MSVC more standards compliant.
- Windows : Disable IECoreUSD temporarily pending patch.
- Use Scons builder for file string substitution to avoid `sed` dependency on Windows.


10.1.2.0 (relative to 10.1.1.0)
========

Improvements
------------

- USDScene : Added support for reading and writing USD `kind` as a `usd:kind` string attribute (#1101).
- ParameterParser : Added support for parsing escaped flag arguments into StringVectorParameter. Parsing `\-flag` now yields an argument of `-flag` (#1102).

Fixes
-----

- DataTraits : Fixed attempts to instantiate `V[23][ifd]DataBase` classes when constructing data from an element. The appropriate `V[23][ifd]Data` types are used instead (#1099).

Build
-----

- IECoreUSD : Fixed linking in newer GCC versions (#1100).

10.1.1.0
========

Improvements
------------

- IECoreMaya::FromMayaParticleConverter (#1097) :
  - Added support for `nParticle` shapes
  - Added PrimitiveVariable name remapping capability. Use <mayaName>=<primvarName> syntax within the existing `ieParticleAttributes` space separated list.
    - If `radiusPP=width` is specified, the values will be adjusted (as width is expected to be diameter)
    - If `rotationPP=orientation` is specified, the euler angles will be converted to quaternions using the default order
    - If `rgbPP=Cs is specified, the GeometricInterpretation will be set to Color, though the data exported is still V3fVectorData
- IECoreUSD
  - MeshAlgo : Fixed loading of meshes with left handed orientation (#1093)
  - USDScene :
    - Warn for collection members not below the collection's prim (#1094)
    - Added support for loading USD purpose as an attribute called "usd:purpose" (#1095)

Build
-----

- Updated GitHub Actions envvar/path adjustment mechanism (#1096)
- Support Clang 12 (#1096)
- Support Houdini 18.5 (#1098)

10.1.0.0
========

> **Important** : For many years we've used the semantic versioning scheme as defined at http://semver.org. However, in practice, there are external forces (eg clients: artists, producers) who view the major version as a significant milestone rather than a minor ABI break. As a result we've kept the major version at 10 for nearly 3 years now (since Jun 5, 2017), to indicate that we haven't yet fully locked down compatibility on anything.
>
> At IE we've been using Cortex 10 in production for almost 2 years and have rarely (if ever) been bitten by the occasional ABI breaks that have trickled in over that time.
>
> This commit introduces a "milestone" version scheme equivalent to GafferHQ/gaffer. We're setting the current milestone to 10 and bumping the major version to 1, indicating this is indeed an ABI break within the Cortex 10 landscape.
>
> We will now always increment the major version whenever introducing any backwards-incompatible change. We'll bump the milestone version whenever Cortex reaches significant milestones in terms of functionality.

Features
--------

- Build : Improved version numbering scheme (#1058)
- IECore : Added Version.h which provides #defines for the various version parts, a utility macro for composing a compatibility version, version related methods (partially ported from IECore.h), and python bindings for the new methods (#1058)
  - Note partial backwards compatibility is provided by including `Version.h` within `IECore.h`

Breaking Changes
----------------

- IECore : Introduced a `milestone` version and decremented `IECore::majorVersion()`. Any conditional logic using the Cortex version (both compile time and runtime) should be updated to accommodate a compatibility version instead.
- The `IECore::*Version*()` methods have move from `IECore.h` to `Version.h` and are now inlined.

10.0.0-a86
==========

Improvements
------------

- ParameterParser : Added support for parsing escaped flag arguments into StringVectorParameter. Parsing `\-flag` now yields an argument of `-flag` (#1102).

Fixes
-----

- DataTraits : Fixed attempts to instantiate `V[23][ifd]DataBase` classes when constructing data from an element. The appropriate `V[23][ifd]Data` types are used instead (#1099).

10.0.0-a85
==========

Improvements
------------

- IECoreMaya::FromMayaParticleConverter (#1097) :
  - Added support for `nParticle` shapes
  - Added PrimitiveVariable name remapping capability. Use <mayaName>=<primvarName> syntax within the existing `ieParticleAttributes` space separated list.
    - If `radiusPP=width` is specified, the values will be adjusted (as width is expected to be diameter)
    - If `rotationPP=orientation` is specified, the euler angles will be converted to quaternions using the default order
    - If `rgbPP=Cs is specified, the GeometricInterpretation will be set to Color, though the data exported is still V3fVectorData

Build
-----

- Updated GitHub Actions envvar/path adjustment mechanism (#1096)
- Support Clang 12 (#1096)
- Support Houdini 18.5 (#1098)

10.0.0-a84
==========

Improvements
------------

- IECore
  - InternedString : Added `tbb_hasher()` overload and `IECORE_INTERNEDSTRING_WITH_TBB_HASHER` define (#1089)
- IECoreUSD :
  - Support reading cameras (#1082)
  - Convert "displayColor" to "Cs" and vice versa (#1085)
  - Audotmatically generate `__cameras` and `usd:pointInstancers` sets for Camera and UsdGeomPointInstancer objects respectively (#1089)
  - Memory and performance improvements for instanced scenes (#1086)
  - Memory and performance improvements for reading/writing tags and sets (#1087, #1089)
  - Temporarily removed support for arbitrary attributes (#1089)
    - This was only partly functional, and will return with improvements in a subsequent release

Fixes
-----

- IECoreImage
  - ImageReader : Fixed crash when writing large non-linear images (#1081, #1083)
    - Deprecated `readChannel`
  - ColorAlgo : Deprecated `transformChannel`
  - DisplayDriverServer : Fixed hang when the service was not terminated properly (#1084)
- IECoreHoudini
  - CobIOTranslator : Fixed crash in Houdini 18 wehn using OIIO 2.2+ (#1090)
    - Note this required dropping support for ptc/pdc files.

10.0.0-a83
==========

Improvements
------------

- IECoreImage::OpenImageIOAlgo : Added `version()` function for checking OIIO version (#1073).
- IECoreUSD (#1070, #1076, #1079, #1080) :
  - Added TypeTraits and DataAlgo to handle reading/writing low level data.
  - Added PrimitiveAlgo to handle reading/writing PrimitiveVaraibles for all objects.
    - Fixed support for writing indexed PrimitiveVariables.
    - Fixed interpolation of "normal" PrimitiveVariables.
  - Added ObjectAlgo to handle reading/writing geometry objects.
    - USDGeomMesh : Added support for animated corners and creases.
    - UsdGeomCurves : Improved support for curve type/wrap/basis.
    - UsdGeomSphere : Added support for PrimitiveVariables.
    - UsdGeomPointInstancer : Aligned PrimitiveVariable naming with `GafferScene::Instancer`.
  - USDScene :
    - Added support for "visibility" attributes.
    - Added user facing warnings when we fail to write objects.
    - Improved logic for which UsdPrims represent children by adding support for untyped prims.
- IECoreMaya::FromMayaPlugConverter : Added support for `usedAsColor` flag on Maya attributes to generate Color3fData

Fixes
-----

- IECore::StringAlgo : Fixed interactions between `matchMultiple()` and '*' (#1074).
- IECoreUSD (#1070, #1076, #1079, #1080) :
  - PrimitiveAlgo :
    - Fixed writing of indexed PrimitiveVariables.
    - Fixed interpolation of "normal" PrimitiveVariables.
  - ObjectAlgo :
    - Fixed support for time varying geometry.
    - UsdGeomPoints : Fixed reading of widths and id PrimitiveVariables.
    - UsdGeomCurves : Fixed reading of widths PrimitiveVariables.
    - UsdGeomSphere : Fixed time sampling for radius.
    - UsdGeomPointInstancer :
      - Fixed reading of orientations.
      - Account for forwarded prototype targets.
  - USDScene :
    - Avoided use of "default prim" for storing scene tags (ie. sets/collections).
    - Fixed attribute hashing.

Build
-----

- Compatibility for OpenEXR 2.4.1 and OpenImageIO 2.2.x (#1073).
- Compatibility for OpenImageIO 1.5.x by limiting functionality (#1078).
- Allow builds with partial boost installations by limiting functionality (#1078).
- Fixed linking issue with boost_wave, which is only used by IECoreGL (#1078).
- Fixed Windows CI (#1075).

10.0.0-a82
==========

Fixes
-----

- IECoreArnold : Fixed console verbosity during startup with recent Arnold versions (#1071).
- IECoreMaya::FnSceneShape: Fixed expansion of locations containing curves (#1072).

10.0.0-a81
==========

Improvements
------------

- IECoreUSD (#1067, #1068) :
  - Automatically convert "uv" <-> "st" on read/write.
  - Added TypeTraits and DataAlgo to ease conversion between USD and Cortex types (note both are private currently).
- IECoreMaya::FnSceneShape (#1069) :
  - Automatically transfer shader assignment from parent to children during expansion.
  - Added "addChildCreatedCallback" to enable further customization during expansion.

Fixes
-----

- IECoreUSD : Fixed geometric interpretation (role) for "P" and "uv"/"st" data on points/curves/meshes (#1068).

Build
-----

- IECoreUSD : Simplify CXXFLAGS and fixed test dependencies (#1068).

10.0.0-a80
==========

Fixes
------------

- IECoreMaya : Updated headers to support maya 2020 (#1066).

10.0.0-a79
==========

Improvements
------------

- IECoreGL::Shader : Support shaders with 3D samplers (#1064)

Fixes
-----

- USD : Fixed errors when writing scenes with invalid names (#1062)

10.0.0-a78
==========

Fixes
-----

- ClassLoader : Fixed deprecation warnings in Python 3.
- ConfigLoader : Fixed invalid escape sequence.

10.0.0-a77
==========

Improvements
------------

- IECoreScene : Removed several legacy PointsPrimitive Ops (#1052).
- IECoreHoudini : Added support for M44d PrimitiveVariable <--> Attrib conversion (#1053).
- IECoreHoudini SceneCache Nodes : Added `TransformPointCloud` geometry mode (#1053).
    - This mode provides a point per location, regardless of whether an object/shape
      exists at that location. Each point has the following attribs:
      - "transform" matrix attribute
      - "hasObject" int attribute (1 if the location has an object)
      - "pscale" float attribute (the uniform scale from the "transform")
      - "scale" vector attribute (the non-uniform scale from the "transform")
      - "orient" quat attribute (the rotation from the "transform")
      - "rest" vector attribute (the translation from the "transform")
      - "restTransform" matrix attribute (if "user:Mref" exists at that location in the file)

Fixes
-----

- ClassLoader : Fixed invalid escape sequence (#1057).

Build
-----

- Added support for Python 3 (#1050, #1051).
  - Note several enum bindings now bind "None_" variants to avoid clashing with the keyword.
- Added support for Boost 1.67+ (#1049).
- Added GitHub Actions CI workflow (#1048).
- MacOS : Fixed SIP issues as well as some failing tests (#1048).

10.0.0-a76
==========

Improvements
------------

- IECoreMaya : Improved SceneShape performance in VP2 (#1047).

Fixes
-----

- IECoreScene :
  - MeshAlgo : Fixed `reverseWinding()` for primitive variables referencing the same data (#1044).
  - CurvesAlgo : Fixed `updateEndpointMultiplicity()` for catmull-rom curves and throw an exception for bezier curves (#1046).
- IECoreGL CurvesPrimitive : Fixed preview of constant or vertex color "Cs" primitive variables (#1046).
- IECoreAlembic :
  - Fixed round-tripping of interpretation for secondary UV sets (#1044).
  - Improved CurvesPrimitive support (#1044).
    - Read "N" and "uv" from the dedicated Alembic properties.
    - Write "width", "N" and "uv" to the dedicated Alembic properties, not to `arbGeomParams`.
- IECoreMaya : Fixed bug in FromMayaMeshConverter when UV export is disabled (#1043).

Build
-----

- Provide support for Boost 1.55.0 by excluding `StringAlgo::substitute()` and associated methods (#1042).

10.0.0-a75
==========

Improvements
------------

- InternedString : Added `__len__` python binding (#1041).
- IECoreMaya LiveScene : Added `toMayaAttributeName()`, `fromMayaAttributeName()`, and `visibilityOverrideName` (#1041).

Fixes
-----

- IECoreMaya SceneShape (#1041) :
  - Fixed bug which had been causing Maya shape visibility to affect LiveScene location visibility.
  - Fixed radial DAG menu positions for the Swap Expand options.

10.0.0-a74
==========

Features
--------

- StringAlgo : Added string substitution functionality (#1039).

Improvements
------------

- InternedString : Added constructor taking a `boost::string_view` (#1039).
- CompoundData : Added default template type for `member()` methods (#1039).

10.0.0-a73
==========

Improvements
------------

- IECoreUSD : Updated USDScene to perform naive loading of USD instances (#1036).
- IECoreHoudini : Houdini 18 compatibility (#1035).

Fixes
-----

- IECoreScene ShaderNetworkAlgo : Adapt `convertOSLComponentConnections()` for OSL 1.10 (#1031).
- IECoreMaya :
  - SceneShape VP2 : Fixed marquee selection for component locations (#1038).
  - SceneShapeInterface : Fixed bugs in `selectionIndex()` and `glGroup()` and removed `buildComponentIndexMap()` (#1038).
- IECoreNuke SceneCacheReader : Fixed selection issues for Scene View knob when using motion blur (#1037).

10.0.0-a72
==========

Fixes
-----

- IECore::Enum : Fixed comparison of different Enum types (#1032).
  We're now closer to matching Python 3 `enum.Enum` behaviour.
- IECoreMaya::ToMayaMeshConverter : Fixed a bug converting indexed normals (#1033).

10.0.0-a71
==========

Improvements
------------

- IECore :
  - Refactored `Enum`, `MenuDefinition`, `MenuItemDefinition` to new style Python classes (#1012).
  - MenuDefinition : Added `size`, `item` and `update` methods (#1012, #1013).
  - Canceller : Added `cancelled` method (#1019).
- IECoreImage : Added OIIO 2 support (#1011).
- IECoreMaya :
  - FnSceneShape : Added ability to promote scene attributes so they can be overriden in Maya (#1029).
  - Added `UndoFlush` and updated other Context Managers to be used as decorators (#1029).
- IECoreAlembic : Added support for the `width` primitive variable when reading curves and points (#1017).
- IECoreUSD : Added support for the `UsdGeomSphere` primitive (#1023).

Fixes
-----

- IECoreAppleseed :
  - Added support for Appleseed 2.1 (#1011).
  - Added numerous stability enhancements (#1011).
- IECoreMaya :
  - SceneShape VP2 :
    - Fixed disappearing geometry in Flat Shaded mode (#1016).
    - Fixed partial evaluation of invisible SceneShapes. This is particularly relvant for animation rigs driven by SceneShape output plugs (#1018).
    - Fixed internal memory consumption. We now use `IECORE_MAYA_VP2_MEMORY` to track all VP2 related caching (#1018, #1021).
    - Fixed several draw errors for expanded shapes, including extra geometry, doubling transformations, and incorrect root bounds (#1024).
    - Fixed single component selection for expanded shapes, recently collapsed shapes, and scenes with link locations (ie. instances). Note marquee selection is not yet supported (#1026).
    - Fixed crash when switching from VP2 back to VP1 (#1026).
  - SceneShape UX :
    - Changed radial DAG menu to use `IECoreMaya.Menu` rather than a native Maya menu (#1013).
    - Fixed a bug in `FnSceneShape.selectComponentNames()` which broke the radial DAG menu (#1029).
    - Fixed a bug that prevented a SceneShape from correctly expanding by tag (#1029).
    - Fixed crashes when undoing FnSceneShape operations (#1029).
  - LiveScene : Fixed a bug in `hasAttribute()` related to `ieAttr_` attributes (#1029).
  - FromMayaEnumPlugConverter : Fixed RunTimeTyped registration (#1030).
- IECoreHoudini :
  - Improved error reporting for the SceneCache ROP when exporting mixed curves and free points (#1025).
  - Fixed ieMeshInterpolation conversion for mixed poly/subdiv SOPs (#1028).

Breaking Changes
----------------

- IECoreMaya::SceneShapeUI : Changed signature for callbacks registered via `addDagMenuCallback` to take an `IECore.MenuDefinition` rather than a Maya Menu (#1013).

Build
-----

- cmake : General improvements (#1022).

10.0.0-a70
==========

Fixes
-----

- IECoreMaya : Maya 2019 Compatibility (#1007)
- IECoreMaya::FnSceneShape: Fixed shape drawing on expansion (#1010).

Breaking Changes
----------------

- IECoreMaya (#1007):
  - Removed several (but not all) VP1 codepaths.
  - Removed Box3Manipulator, TransformationMatrixManipulator, & ViewportPostProcessCallback.

Build
-----

- CXX : Added `-D_GLIBCXX_USE_CXX11_ABI=0` when building with GCC 5.1+ (#1014).
- Azure : Fixed Windows CI (#1015).

10.0.0-a69
==========

Fixes
-----

- IECoreScene::PrimitiveAlgoUtils : Fixed GeoemtricData bug in AverageValueFromVector (#1003).
- IECoreMaya::FnSceneShape : Fixed intermediateObject bug with `recursiveExpandAsGeometry()` (#1004).
- IECoreHoudini::FromHoudiniPolygonConverter : Fixed crash with corrupt ieMeshInterpolation attribs (#1006).

Build
-----

- IECoreImage : Workaround env issue when building for certain DCCs (eg Houdini 17.5) (#1005).

10.0.0-a68
==========

Improvements
------------

- `IECoreScene::MeshAlgo` : Added `calculateNormals()` and deprecated `MeshNormalsOp` (#1002).

10.0.0-a67
==========

Fixes
-----

- IECoreMaya SceneShape : Fixed shape evaluation / dirty issue on file load (#1001).

Build
-----

- Run Linux, MacOS, and Windows CI on Azure (#1000).
- Publish MacOS and Linux builds of Cortex via Azure (#1000).

10.0.0-a66
==========

Fixes
-----

- CurvesAlgo : Fixed `updateEndpointMultiplicity()` for bSpline and catmullRom curves (#997).
- IECoreArnold : Automatically resample Vertex primvars to Varying on cubic Curves (#998).

10.0.0-a65
==========

Fixes
-----

- IECoreNuke : Fixed uv coordinate conversion (#999).

10.0.0-a64
==========

Fixes
-----

- IECoreScene : Ensure ShaderNetwork connections are loaded from scc caches (#992).
- IECoreHoudini : Fixed LiveScene PrimGroup to Tag conversion in H17.5 (#993).

10.0.0-a63
==========

Improvements
------------

- IECoreMaya : Added `dagPath()` to `LiveScene` (#991).

Fixes
-----

- IECoreMaya : Fixed bug which enforced a particular rotation order when exporting tranformations (#984).

Build
-----

- SConstruct : Fixed Mac builds (#990).

10.0.0-a62
==========

Improvements
------------

- IECoreMaya : Added "Expand by Tag as Geo..." item to radial menu (#989).
- ToGLStateConverter : Added support for "gl:depthTest" attribute (#985).

Fixes
-----

- Fixed errors when building with the Clang version packaged with XCode 10.2 (#986).

10.0.0-a61
==========

This is the first official release with Windows support. Big thanks to Eric Mehl and Alex Fuller
for their hard work getting the codebase ready for Windows.

Improvements
------------

- IECoreHoudini
  - SceneCache ROP, LiveScene, and DetailSplitter now respect Output SOPs with a fallback to the previous
    behaviour (SOP render flag) (#978).
  - SceneCache OBJs and SOP now provide a visibilityFilter which can be used to prune invisible shapes.
    Animated visibility is supported, as is inherited visibility (provided the scene hasn't been re-rooted
    or merged into another context). It defaults off for backwards compatibility (#982).

Build
-----

> **Warning** : The default paths for the build options have been removed.
> You will need to specify them on the commandline or via a config file.

- SConstruct now supports Windows (#937).
- Appveyor testing ensures consistent CI on Windows (#937).

10.0.0-a60
==========

Improvements
------------

- ShaderNetwork : Added attribute substitution methods (#971).
- IEDisplay : Added support for PRMan's incremental mode (#973).
- ROP_SceneCacheWriter: Added support for relative node path for rootObject parameter (#976)

10.0.0-a59
==========

Improvements
------------

IECoreNuke :
  - Added support for nuke icon, using new icon for nuke menu (#967).

Fixes
-----

- DataAlgo : Fixed `const` form of `dispatch()` (#970).


Build
-----

- Declared Scene test dependency on IECore module (#968).

10.0.0-a58
==========

Improvements
------------

- IECoreHoudini::SOP_SceneCacheSource : Added support for visibility culling (#963).
- IECoreImage::ImageReader : Added support for reading specific mip-map levels (#961).
- IECoreGL::TextureLoader : Added `maximumResolution` argument to `load()` (#961).
- IECoreGL::ShaderStateComponent : Added support for specifying maximum resolution
  for texture parameters (#961).
- IECoreAppleseed::EntityPtr : Added smart pointer for handling entities (#903).
- ExceptionBinding (#962) : Added ExceptionClass binding utility. This allows bind C++
  exceptions to be bound to Python more fully, so that :
    - They can be constructed and raised from Python.
    - Type is preserved when translating them into Python, and again when
      translating them back outinto C++.

Build
-----

- Fixed problem with undeclared dependency which could cause the IECoreAppleseed tests
  to fail (#964).

10.0.0-a57
==========

Improvements
------------

- IECoreHoudini :
  - Support for Houdini 17.5 (#958).
  - Enable symbol visibility management (#957).
  - IE Config : Remove Op wrapppers from the Houdini node menu (#960).

10.0.0-a56
==========

Improvements
------------

- IECoreMaya::LiveScene (#956) :
  - `attributeNames` and `readAttribute` now translate double underscore (`__`)
    to colon (`:`) when reading "ieAttr_" MPlugs.
  - Optionally decoupled Maya visibility from the "scene:visible" attribute.
    `readAttribute` will now use a MPlug called "ieVisibility" if it exists,
    and otherwise fallback to Maya visibility.
- IECoreMaya : Added FromMayaEnumPlugConverter which can convert to either
  ShortData or StringData, using the MPlug category to determine which type
  should be returned (#959).

Fixes
-----

- DataTraits : Fixed bug in `dataTypeFromElement()` when using dict elements (#955).

10.0.0-a55
==========

Fixes
-----

- Houdini LiveScene : Fixed potential deadlock when using python expressions with wrangle SOPs (#953).

10.0.0-a54
==========

Improvements
------------

- IECoreArnold::CameraAlgo : Arnold cameras now have a useable field of view value,
  and a fixed screen window. This makes them compatible with the standard UV remap
  workflow (#952).
- IECoreNuke::SceneCacheReader : Added option for respecting object visibility (#950).

Fixes
-----

- IECoreMaya::SceneShapes : Fixed bug which meant that Viewport 2 isolate select
  was not respected (#951).

10.0.0-a53
==========

Build
-----

- Added INSTALL_COREIMAGE_POST_COMMAND and INSTALL_CORESCENE_POST_COMMAND
  build options (#949).
- Fixed compilation error on MacOS (#948).

10.0.0-a52
==========

Improvements
------------

- SharedSceneInterfaces : Add methods for controlling cache size (#946).

10.0.0-a51
==========

Fixes
-----

- IECoreScene `deleteFaces/deleteCurves/deletePoints` : Prevent crashes caused by
  invalid primitive variables (#942).
- IECoreArnold : Fixed bug when rendering indexed normals (#943).

Build
-----

- Added support for ASAN when using gcc

10.0.0-a50
==========

Improvements
------------

- IECoreScene::MeshAlgo : Added several conectivity based tangent calculations (#925) :
  - Calculate tangents based on the first neighbor edge.
  - Calculate tangents based on the first two adjacent edges.
  - Calculate tangents based on face centroids.
- OpenImageIOAlgo : Added support for Rational V2i in image metadata (#939).
  - This fixes a bug when processing images with rational framesPerSecond data which
    are exported from Cortex (or Gaffer), then loaded and re-exported through Nuke.

API
---

- IECoreScene::MeshAlgo : Updated original tangent calculation (#925) :
  - Renamed `calculateTangents` to `calculateTangentsFromUV` to avoid confusion with
    the new methods. The former is kept for backwards compatibility, but is deprecated.

10.0.0-a49
==========

Features
--------

- IECoreScene::MeshAlgo : Added `merge` to combine a list of meshes (#936).
  - This was ported from `MeshMergeOp` and updated to maintain corners and creases.
    The op is deprecated and has been reimplemented to use the new algo.

Improvements
------------

- MeshPrimitive::createPlane : Added normals (#933).
- MeshPrimitive::createBox : Added normals and UVs (#933).
- MeshAlgo::distributePoints : Updated to support Vertex interpolated UVs (#934).
- MeshAlgo::deleteFaces : Updated to maintain the corners and creases (#936).
- MeshAlgo::triangulate : Updated to maintain the corners and creases (#936).
- MeshAlgo::reorderVertices : Updated to maintain the corners and creases (#936).
- Alembic Writer : Added support for exorting indexed normals (#933).
- IECoreHoudini : Added import/export for corners and creases on polygons (#936).

Fixes
-----

- Canceller : Export symbols for Cancelled class (#932).
- IECoreHoudini : Fixed a bug in the mesh interpolation export for polygons (#936).

API
---

- TBBBinding : Bind `tbb::global_control` (#931).

Breaking Changes
----------------

- IECorePython : Consolidate TBB bindings into one file (#931).

10.0.0-a48
==========

Features
--------

- MeshPrimitive : Added support for subdivision corners and creases (#927).
  - Updated SceneCache, IECoreAlembic, and IECoreUSD to read and write corners and creases.
  - Updated IECoreMaya to import and export corners and creases.
  - Updated IECoreArnold to translate corners and creases for the renderer.
  - Noteable missing features are import/export in IECoreHoudini, rendering support in
    3delight and Appleseed, as well as some geometry processing via IECoreScene
    (eg `triangulate`, `deleteFaces`).

Fixes
-----

- OpenImageIOAlgo : Fix DataView copy constructor and copy assignment (#923).
- Font classes : Support newlines (#928).
- LRUCache : Fix double-release in serial policy (#926).
- ImageReader :
  - Hardcode PNG color conversion as sRGB->Linear (#913).
  - Support completeness checks on tiled deeps (#929).

Build
-----

- Windows builds are now supported (via MSVC 2017) (#916).

Breaking Changes
----------------

- MeshPrimitive : New members for crease data (#927).
- Windows : There are several symbol visibility changes to allow for the Windows builds (#916).

﻿10.0.0-a47
==========

Improvements
------------

- Houdini SceneCache ROP : Optimized cache times for a variety of real world production scenes (#920).

Fixes
-----

- Houdini SceneCache ROP : Fixed a bug with time-varying hierarchy (#918).
- Houdini LiveScene : Fixed a bug with tag translation (#920).

10.0.0-a46
==========

Features
--------

- MeshAlgo : Added MeshAlgoConnectedVertices (#900).

Fixes
-----

- Houdini SceneCacheSource SOP : Fixed "convert tag to groups" toggle (#915).
  - When creating primGroups from tags on each location, we don't want the tagFilter parm
    to influence which groups are created. The tagFilters is just about pruning locations.
- Maya Config : Don't load the IE menu when in a batch session (#912).

10.0.0-a45
==========

Features
--------

- StringAlgo : Added path matching functions. These provides equivalent matching to `IECore::PathMatcher`, for use when constructing a `PathMatcher` would be overkill (typically when you only want to match against one path) (#898).

Improvements
------------

- ToHoudiniConverter : Added support for uniform UVs (#907).

Fixes
-----

- VDBObject : Calling `memoryUsage()` no longer forces loading (#901).
- SceneCache : Legacy shader networks stored as `ObjectVectors` are now converted to
  `ShaderNetworks` during loading (#905).

10.0.0-a44
==========

Fixes
-----

- Canceller : Fixed Python->C++ conversion for `IECore.Cancelled`. This was broken in
  10.0.0-a42 (#896).
- IECoreArnold::CameraAlgo : Fixed bug that tried to set "mesh" camera parameter, even
  though it requires special handling outside the converter (#895).

10.0.0-a43
==========

Features
--------

- IECoreScene : Added ShaderNetwork class and ShaderNetworkAlgo namespace with associated
  utility functions (#890).

Breaking Changes
----------------

- IECoreAppleseed : Replaced ShaderAlgo with ShaderNetworkAlgo and removed handle
  parameter from `ParameterAlgo::convertShaderParameters()` (#890).
- ToGLStateConverter : Removed support for specifying shaders as ObjectVectors, requiring
  ShaderNetworks instead (#890).

10.0.0-a42
==========

Improvements
------------

- PrimitiveVariable::IndexedView : Added assignment operator and default
  constructor (#893, #894).

Fixes
-----

- SceneInterface : Fixed bug where upper-case file extensions were not recognised (#891).
- Canceller : Fixed Python binding for Cancelled exception class (#886).
- Primitive interpolator : Fixed interpolation of primitive variables with mismatched
  indices. Interpolation is now skipped in these cases (#892).

Breaking Changes
----------------

- IECoreArnold : Removed InstancingConverter (#888).

Build
-----

- Added BUILD_TYPE option, with supported values of RELEASE, DEBUG, and
  RELWITHDEBUGINFO. This replaces the DEBUG and DEBUGINFO options (#887).

10.0.0-a41
==========

Features
--------

- CurvesAlgo : Added `updateEndpointMultiplicity`, which can be used to add or remove
  replicated end points when setting a basis (#877).
- IECoreHoudini : Added export/import between Houdini poly lines (non-closed polygons)
  and Cortex CurvesPrimitives with a linear basis (#877).

Improvements
------------

- CubicBasis : Added enum for standard curve cubic bases (#877).
- MeshAlgo::calculateTangents : Added support for vertex interpolated UVs (#879).
- IECoreArnold : Export face varying indices for indexed Vertex varying UVs (#880).
- IECoreMaya : Split skinCluster weights into its own set of converters, with
  optional compression to unsigned short data (#883).

Fixes
-----

- MeshMergeOp : Fixed merging of indexed primitive variables (#879).
- VectorTypedData : Fixed bugs with Short and UShortVectorData serialization (#878).
- ToGLCurvesConverter : Fixed crash with indexed uniform primitive variables (#881).

Build
-----

- Added VDB_PYTHON_PATH build option which is used for the IECoreVDB tests (#882).

10.0.0-a40
==========

Improvements
------------

- IECoreMaya : FromMayaParticleConverter : read additional particle attribute names from ieParticleAttributes attribute ( #874 )

10.0.0-a39
==========

Fixes
-----

- IECoreHoudini : Fixed potential crash in Houdini 17.

10.0.0-a38
==========

Fixes
-----

- IECoreHoudini::FromHoudiniGeometryConverter : Fixed GIL management (#862).
- IECore::ToCoreConverter : Fixed GIL management (#862).
- IECoreScene : Reverted parallelisation of mesh triangulation, as it could lead
  to deadlock in IECoreGL (#868).
- IECoreMaya : Fixed build for Maya 2018 (#866).
- IECoreMaya::SceneShape : Fixed various VP2.0 bugs (#865)
  - Fixed rendering of objects as the SceneShape is transformed
  - Fixed root bound highlight rendering
  - Optimised rendering when only rendering bounds
  - Fixed to respect Maya visibility

10.0.0-a37
==========

Improvements
------------

- IECoreScene::Camera : Improved camera definition for better compatibility
  with USD and Alembic, and to improve the user experience. In particular, cameras no longer hold a screenWindow parameter directly, instead defining an aperture and focal length. See API documentation for the Camera class for more
  details (#850).
- USDScene : Added support for writing cameras (#850).

Breaking Changes
----------------

- IECoreScene::Camera (#850) :
  - Removed `addStandardParameters()` method.
  - Removed transform property.
  - Removed name property.
- IECoreGL : Removed PerspectiveCamera and OrthographicCamera classes.
  Use Camera directly instead (#850).

10.0.0-a36
==========

Improvements
------------

- IECoreMaya : SceneCache Viewport 2.0 rendering improvements (#857)
  - Reduced memory usage by caching maya index & vertex buffers
  - Prepare Viewport 2.0 vertex data in parallel and only update topology if required
  - Reduced queries to maya for shader information
- IECoreScene : Triangulation improvements (#853)
  - Parallel implementation of FaceVarying primitive variable expansion
  - Parallel MeshPrimitive::setTopology implementation
  - TriangulateOp forwards to new MeshAlgo::triangulate function

Fixes
-----

- IECoreScene : Suppress private linkLocation attribute ( #849 )

Build
-----

- Houdini 17.0 Support (#854)

10.0.0-a35
==========

Improvements
-------------

- Houdini LiveScene : Improved performance of Houdini scene publisher callbacks ( #847 )

10.0.0-a34
==========

Improvements
-------------

- Maya SceneShape : Initial support for Viewport 2.0 (#805)
  - Note that VP1 support is both deprecated and disabled. It can be re-enabled
    by setting CORTEX_SCENESHAPE_MAYA_VP1_SUPPORT prior to Maya startup.
  - Note that Instancers (eg MASH) do not work yet.
  - Note that SceneShapes far from origin may have selection issues in Maya 2017.
    This is resolved in Maya 2018.4
- Houdini LiveScene (#845)
  - Support string array detail attributes.
  - Issue Error if different prim types have the same name.

Build
-----

- Requires USD 18.09

10.0.0-a33
==========

Improvements
-------------

- Houdini LiveScene : Improved performance of reading houdini scenes ( #843 )

10.0.0-a32
==========

Improvements
------------

- StreamIndexedIO (#813) :
  - Indices are now compressed using Blosc.
  - Reduced memory allocations used for Directory nodes.
- Maya menus : Added a mechanism to create and access site-specific menus (#839).
- Houdini LiveScene : Reduced overhead of python attribute and tag readers (#841).

Fixes
-----

- FromHoudiniGeometryConverter : The "uv" attribute is now always converted to an
  indexed PrimitiveVariable (#838).
- AlembicScene : Fixed crashes caused by concurrent calls to `child()` (#840).

10.0.0-a31
==========

Improvements
------------

- IECoreMaya : Minor changes so we can compile and run against Maya 2018 u4 ( #832 )
- OpenImageIOAlgo::DataView : Support Color4fData and Color4fVectorData ( #833 )
- IECoreHoudini : Remove StringVector binding ( #834 )
- IECoreMaya : removed SystemExitCmd command ( #828 )

Fixes
-----

- VDBObject : support querying float and double metadata ( #835 )
- IECoreScene : isolate tbb parallel task execution in distributePoints ( #831 )
- IECoreHoudini : LiveScene fixes ( #836 )
  - Prevent tag groups appearing as primvars
  - segfaults when splitting geometry with name primitive attribute.

10.0.0-a30
==========

Improvements
------------

- IECoreScene : non-triangle mesh tangent calculation & support indexed UVs (#817)

Fixes
-----

- IECoreAlembic : Warn rather than raising exception if attempting to write an attribute on the root (#825)
- VDBObject : fix crash when instancing VDBObjects (#826)
- IECoreImage : fix crash when writing formats without data window support (#827)


10.0.0-a29
==========

Improvements
------------

- IECoreAlembic : Added support for scalar attribute read and write (#822).
- IECoreAlembic : Added support for Quaternion primitive variables (#816).

Fixes
-----

- IECoreHoudini : Ensure exported indexed StringVector attributes contain no unreferenced data. (#821)

10.0.0-a28
==========

Improvements
------------

- DataAlgo : Added additional `Args&&...` arguments to `dispatch()` (#815).
- IECoreArnold::CurvesAlgo : Added conversion from the Cortex standard "uv" primitive
  variable to the Arnold "curves.uvs" parameter (#818).
- FromMayaInstancerConverter : Now always returns a PointsPrimitive with a "P" primitive
  variable, whereas before it could return NullObject or a PointsPrimitive without "P" (#814).
- AlembicScene : Added support for TransformationMatrixdData in `writeTransform()` (#812).

10.0.0-a27
==========

Fixes
-----

- GeometricTypedData: Fixed repr to include interpretation (#806).
- IECoreScene : Maintain intepretation when resampling primitive variables (#808).
- IECoreVDB : Fixed threading bug for deferred reads of VDB files (#809).
- IECoreGL::CachedConverter : Fixed threading bug when `clearUnused()` is used concurrently with `convert()` (#811).

10.0.0-a26
==========

Fixes
-----

- USDScene : Read tags from the set defined on the default prim (#804)
- IECoreHoudini : Convert arbitrarily named UVs to and from Cortex primitives (#803)
- IECore / IECoreScene / IECoreGL / IECorePython : Isolate TBB parallel execution from parent TBB parallel tasks (#801. #802)

Build
-----

- Update IE config to build specific appleseed versions (#807)

10.0.0-a25
==========

Fixes
-----

- Fixed compilation on OSX (#800).

10.0.0-a24
==========

Improvements
------------

- IECoreAppleseed : Updated for Appleseed 1.9.
- IECore : IndexedIO - Optional Blosc compression
    - header version number updated to 6
    - ```IECORE_STREAMINDEXEDIO_COMPRESSION``` environment variable added to specify compression method and settings
    -  IndexedIO can be created using an additional *options* parameter to specify compression method and settings.

10.0.0-a23
==========

Improvements
------------

- IECore : DataAlgo - Improved exception message (#793)
- IECoreScene : MeshAlgoWinding - refactored to use new data dispatch. (#792)
- IECoreMaya : PlugConverter (#799)
    - MTime, MAngle & MDistance converted as doubles
    - Support for short & enum conversion added.

Fixes
-----

- IECoreGL : CachedConverter - Fixed thread safety of deferredRemovals (#798)
- SConstruct : Added dependency of alembic python module on Scene python module. Fixes automated build failures. (#795)

10.0.0-a22
==========

Features
--------

- IECore : Added IndexedIOAlgo, which contains utility functions for performance testing
  of IndexedIO streams (#766).
- IECoreScene : Added SceneAlgo, which contains utility functions for performance testing
  of SceneInterfaces (#767).
- MeshAlgo : Ported `MeshVertexReorderOp` to `reorderVertices()` (#787).
  - The op still exists, but is now deprecated. Use the algo instead.
  - Also fixed crash when reordering indexed primitive variables.

Improvements
------------

- MeshAlgo::segment : Improved performance by multithreading (#789).
- CurvesAlgo::segment : Improved performance by multithreading (#789).
- PointsAlgo::segment : Improved performance by multithreading (#789).

Fixes
-----

- MeshAlgo::deleteFaces : Fixed deletion of indexed primitive variables (#779).
- CurvesAlgo::deleteCurves : Fixed deletion of indexed primitive variables (#779).
- PointsAlgo::deletePoints : Fixed deletion of indexed primitive variables (#779).
- MeshPrimitive : Fixed problems with `createSphere()` (#785).
- ImageWriter : Fixed crash when writing JPGs with offet data windows (#791).

10.0.0-a21
==========

Features
--------

- PrimitiveVariable (#783) :
  - Added `IndexedView` utility class. This provides transparent
    iteration of the data field via the indices field.
  - Added `__repr__` to python bindings.
- DataAlgo (#780) :
  - Added `dispatch()` method as a replacement for DespatchTypedData. Several
    call sites have been updated to use it and DespatchTypedData has been deprecated.
  - Added `size()`, `address()`, `trait()` methods.

Improvements
------------

- MeshPrimitive : Create indexed uvs in `createPlane()` (#783).
- IECoreAlembic : Added Cortex version to the header when writing ABCs (#784).

Fixes
-----

- IECoreScene::LinkedScene : Fixed crash when destructing LinkedScenes which link
  to IECoreMaya::LiveScenes (#782).
- PrimitiveVariable : Fixed bug where `expandedData()` lost the GeometricInterpretation (#783).
- MeshPrimitiveEvaluator : Fixed evaluation of indexed variables (#783).
- MeshAlgo : Fixed indexed-UV bug in `calculateDistortions()` (#783).
- IECoreArnold::ShapeAlgo : Fixed indexed PrimitiveVariable bug (#783).
- IECoreAlembic : Fixed bug which prevented ABCs writen from Cortex to load in Houdini (#784).

10.0.0-a20
==========

Fixes
-----

- Canceller : Exported symbols for `Cancelled` exception.

10.0.0-a19
==========

Features
--------

- IECore : Added Canceller class, which can be used to cancel long-running
  background operations. Note this isn't being used as of yet, but we intend
  to use this in various IECoreScene Algos in the near future (#773).
- IECorePython : Added python wrapper for TBB thread scheduler init (#776).

Improvements
------------

- StreamIndexedIO : Improved read performance via platform specific offset reading (#769).
  - Use the IECORE_OFFSETREAD_DISABLED environment variable to disable this feature.
- IECoreHoudini::FromHoudiniGeometryConverter : Faster UV welding (#772).

Fixes
-----

- IECore::ConfigLoader : Isolate config files from one another (#770).
  - Previously the contextDict allowed variables to leak between configs.
- IECoreMaya::LiveScene : Maya attributes named "ieAttr_*" take precedance
  over registered custom attribute functors (#771).

10.0.0-a18
==========

Features
--------

- Added Sets to SceneInterface.
  - Reading and writing Sets are currently supported for SceneCache, LinkedScene,
    USD (via UsdCollectionAPI), and Alembic (via AbcCollection).
  - IECoreMaya, IECoreHoudini, and IECoreVDB do not yet support the new Sets API.
  - The aim is for this to replace Tags at some point in the future. For now,
    we will support both mechanisms for gathering locations.
- IECoreMaya : LiveScene conversion of Maya Instancers.
  - Converts from a Maya Instancer to a Cortex PointsPrimitive.
  - Converts primvar names and types to match Cortex conventions.
    - Automatically converts id, instanceType, and visibility from double to int.
  - Supports Maya 2017 MASH in instancing mode.

Improvements
------------

- IECoreVDB::VDBObject : Introduced lazy loading of VDB grids.
- IECoreGL::Shader : Improve `defaultVertexSource()` for missing N.
  - This improves the rendering of PointsPrimitives in GL_POINTS mode.
- PathMatcher :
  - Added `size()` method and made `intersection()` method const.
- Timer :
  - Updated to the latest boost timer library.
  - Added Timer.Mode so wall clock, user cpu or system cpu time can be timed.
  - Added ScopedTimer to help with debugging performance issues.

Fixes
-----

- IECoreGL : Fixed wireframe drawing of points and curves.
  - This fixes the selection visualisation in Gaffer's viewport when
    points are rendered as GL_POINTS and curves are rendered as GL_LINES.
- IECoreImage::ImageWriter : Fixed bug when writing JPGs with a dataWindow
  that is larger than the displayWindow.
- MeshPrimitive::createSphere() : Fixed rounding bug for the number of segments.
- MurmurHash : Fixed symbol export for ostream operator
- StringAlgo : Fixed symbol export for `numericSuffix()`

Build
-----

- CMake (experimental) :
  - Updated Readme
  - Removed requirement for CMakeLists.txt to in root dir
  - Added module to locate Blosc
  - Added module to locate OpenVDB
  - Explicitly set C++11
  - Disable unused-local-typedefs warning in debug builds

10.0.0-a17
==========

Improvements
------------

- IECoreScene : Added SceneInterface::Path stream insertion << operator

Fixes
-----

- Build :
  - IECoreMaya depends on IECoreScene.
  - Update IE config to build with RV specific dependencies.

10.0.0-a16
==========

Improvements
------------

- IECoreHoudini : Dramatically improved performance for SOPs containing large hierarchy of named primitives (#729) :
  - LiveScene : Optimized querying of names with a SOP.
  - FromHoudiniGeometryConverter : Added "preserveName" and "convertGroupsAsPrimvars" parameters.
  - FromHoudiniPointsConverter : Tighten requirements for converting to a PointsPrimitive.
  - DetailSplitter : Added option to segment SOP hierarchy using Cortex rather than HDK.
  - Removed support for `IECore::Group` conversion.

Fixes
-----

- IECoreUSD : Fixed crash when a USD file fails to load (#742).
- IECoreHoudini : Fixed OpenGL Context issue for Houdini 16.0 & 16.5 Qt5 builds (#741).
- IECoreAppleseed : Use safe_normalize instead of normalize (#739).

10.0.0-a15
==========

Features
--------

- Added mechanism for loading config files during Cortex module startup. Configs
  are python files located on paths specified by the CORTEX_STARTUP_PATHS
  environment variable (#716).
- IECoreMaya : Added support for multi-attributes in plug converters (#719).

Improvements
------------

- Improved debugging support (#726).
- ImageReader : Added support for deep images in `isComplete()` method (#717).
- ConfigLoader : Made `contextDict` argument optional. This makes it possible to
  isolate config files from one another (#722).
- IECoreScene :
  - Output : Added const version of `parametersData()` method (#715).
  - PrimitiveVariable : Added `throwIfInvalid` argument to `expandedVariableData()`
    (#720).
  - Primitive Algo : Parallelised segmentation functions (#727).

Fixes
-----

- GLSL FilterAlgo : Fixed filtering of `filteredPulse()` (#737).
- IECoreAppleseed :
  - Fixed compilation in debug mode (#725).
  - MeshAlgo : Fixed errors caused by 0 length normals in DEBUG builds (#732).
- IECoreMaya : Fixed "Redeclaration of variable" warning in ParameterisedHolderUI
  in Maya 2017 (#735).
- IECoreUSD : Fixed writing of bool attributes (#734).
- PrimitiveAlgo : Fixed bug when segmenting on indexed primitive variable (#727).
- MeshAlgo : Fixed crash if `distributePoints()` is called with non-facevarying
  UVs. An exception as now thrown instead (#720).
- IECorePython : Fixed handling of Python exceptions in all wrapper classes (#721).

Breaking Changes
----------------

- FromMayaShapeConverter : Removed primVarAttrPrefix parameter. Always use the
  "iePrimVar" prefix (#736).
- Removed IECoreMaya::GeometryCombiner (#736).
- Renamed IECoreScene::Display to IECoreScene::Output (#715).
- PrimitiveVariable : Changed signature of `expandedVariableData()`. Source
  compatibility is maintained (#720).
- Removed ieMarschnerHair GLSL shader. This was only usable with the
  MarschnerLookupTableOp which was removed in Cortex 9 (#714).

10.0.0-a14
==========

Features
--------

- IECoreVDB : Added new library providing interoperability with OpenVDB (#708)
  - VDBObject allows VDB grids to be passed around as `IECore::Object`.
  - VDBScene provides reading of VDB files via `IECoreScene::SceneInterface`.

Improvements
------------

- SearchPath : Added plaform-agnostic constructor which chooses the correct
  separator based on the current platform (';' for Windows, ':' for Linux
  and MacOS). Also deprecated all methods which take an explicit separator,
  as they are a cross-platform-compatibility trap (#704).
- PrimitiveAlgo : Improved `segment()` methods to take an optional
 `segmentValues` argument (#698).
- IECoreAlembic : Added support for velocity on meshes and curves (#706).
- IECoreArnold : Added support for Color4fVectorData primitive variables (#707).

Fixes
-----

- Symbol visibility :
  - Removed public headers from IECoreUSD. We were not exporting the symbols
    from these because we didn't intend them to be public anyway (#699).
  - Exported `convert()` functions from IECoreNuke (#703).
  - Exported `convert()` functions from IECoreMaya (#710).
- IECoreNuke : Fixed `import IECoreNuke` so that it doesn't require IECore
  to have been imported already (#703).
- Windows : Fixed miscellaneous build problems (#705).
- ImageWriter : Auto-expand the data window when required (#713).

Build
-----

- Added ASAN option for use with Clang (#700).

10.0.0-a13
==========

Improvements
------------

- Appleseed : Added bindings for TransformAlgo and ObjectAlgo (#696).
- Object (#694) :
  - CopyContext/SaveContext/LoadContext
    - Hid internal implementation so it can be improved in
      future.
    - Derived from boost::noncopyable.
  - Simplified registration of abstract types. They now use
    the same mechanism as regular types.
  - Changed CreatorFn to be a `std::function`, which is more
    flexible than the previous function pointer.
  - Optimised `copy()` method.
- OpenImageIOAlgo : Added support for string arrays in DataView class
  and `data()` function. This allows string array metadata to be
  round-tripped properly through the ImageReader and ImageWriter (#691).
- Build : Hid symbols that do not need to be exported (#695).

Fixes
-----

- Fixed build errors with GCC 6 (#697).

Breaking Changes
----------------

- Removed legacy Appleseed renderer backend. This is superceded by the new backend
  incubating in the Gaffer project (#696).
- Object : Removed abstract type registration mechanism (#694).

10.0.0-a12
==========

Features
--------

- Added PathMatcher and PathMatcherData classes (#686).
- Added support for IECORE_DEBUG_WAIT environment variable. Setting this allows you
  to attach a debugger during Cortex startup (#687).
- StringAlgo : Added addition methods ported from Gaffer (#686).
- PrimitiveAlgo : Added `segment()` methods for segmenting primitives (#689).

Fixes
-----

- PointDistribution : Fixed bug whereby points could be emitted in areas of zero density (#693).
- Primitive Algo : Fixed resampling of constant string primitive variables (#688).
- StringVectorData : Fixed `baseReadable()` and `baseWritable()` methods (#690).

Breaking Changes
----------------

- Removed AlembicInput. Use AlembicScene instead (#684).
- Removed the following unused Data and Parameter classes : (#692)
  - TimeCodeParameter
  - TimeDurationData and TimeDurationParameter
  - TimePeriod, TimePeriodData and TimePeriodParameter
- StringAlgo : Moved to IECore::StringAlgo namespace (#686).

10.0.0-a11
==========

Fixes
-----

- USDScene : Fixed quaternion converter (#683).
- IECoreMaya : Restored registration of ParameterisedHolderSurfaceShape (#685).

10.0.0-a10
==========

Features
--------

- IECoreUSD (#678) :
  - Added support for writing USD files via USDScene API.
  - Added support for tags in USDScene API.
  - Added support for writing and reading bounds.
  - Added support for more primitive variable types.

Improvements
------------

- FromMayaMeshConverter : Reintroduced normals and uv parameters (#677).

Breaking Changes
----------------

- IECoreArnold : Removed legacy renderer class (#676).
- IECoreScene : Remove CapturingRenderer class (#680).

10.0.0-a9
=========

Improvements
------------

- Added support for Appleseed 1.8.1 (#670)

10.0.0-a8
=========

Breaking Changes
----------------

- Removed Imath types from Python bindings. Use the standard imath module instead. See #672 for details of the relevant syntax changes required.
- Removed IECoreRI, in favour of future support for 3delight/prman using dedicated modules. The two renderers have deviated so far from the RenderMan "standard" that a single module cannot effectively cover them both. 3delight support via the new NSI API is currently provided in Gaffer, PRMan support is planned for the future (#667).
- Removed CameraController - this has moved to Gaffer's internals (#666).
- Removed ParameterisedProcedural and all procedural support from hosts (#668). Procedurals have been unused in the Image Engine pipeline for several years now, in favour of Gaffer graphs.
- BoxAlgo : Moved functionality to nested IECore::BoxAlgo namespace (#672).
- Random : Moved to RandomAlgo and added namespace (#672).
- Removed data types based on Imath::Color3d and Imath::Color4d (#672).
- Removed DataTraits.isMatrixTypeData (#672).
- Removed PointsExpressionOp (#672).

Fixes
-----

- CurvesAlgo : Removed debug output (#665).
- AlembicScene : Fixed writing of points without IDs (#671).

10.0.0-a7
=========

Breaking Changes
----------------

- IECoreScene : Moved all scene description components into a new IECoreScene module (#660).
  The contrib/scripts directory contains some scripts to aid in porting code, and the Cortex 9
  branch has been updated with a forwards compatibility module to ease migration.
- IECore : Removed FileSequenceAnalyzerOps (#660).
- IECoreImage : Removed CurveTracer (#660).
- ObjectInterpolator : Removed cubic interpolation (#660).
- ObjectWriter : Removed writing of "bound" header data for VisibleRenderables (#660).
- DespatchTypedData : Removed TypedDataInterpolation (#660).
- Removed IECoreMantra (#660).

Improvements
------------

- ImageReader : Added support for reading headers from deep images (the deep data itself remains
  unsupported) (#654).
- ObjectInterpolator : Added support for registering interpolators for custom object types (#660).
- CurveAlgo/MeshAlgo/PointsAlgo : Added invert parameter to component deletion functions (#651).

Fixes
-----

- HalfData : Fixed zero initialisation bug (#662).
- IECoreImage : Fixed bug which prevented module being imported without importing IECore first (#653).
- IECoreMaya : Fixed bugs with MEL evaluation (#657).

10.0.0-a6
=========

Breaking Changes
----------------

- Requires Arnold 5 (#637).

Features
--------

- Support for Arnold 5 (#637).

Improvements
------------

- RenderMan display driver : Added support for "layername" parameter. This is used by 3Delight 13.x (#648).
- IECoreArnold::ParameterAlgo (#637) :
  - Added support for UInt parameters.
  - Added support for converting V3i and V2i parameters to floats vectors.
- IECoreAlembic : Added support for reading and writing indexed primvars (#642).

Fixes
-----

- IECore::Font : Fixed thread safety bugs (#649).
- PointsAlgo : Fixed vertex -> uniform resample with an empty points prim (#647).

10.0.0-a5
=========

Fixes
-----

- IECoreAppleseed::MeshAlgo : Fixed conversion of indexed UVs (#639).

10.0.0-a4
=========

Features
--------

- USDScene : Added a prototype SceneInterface for reading USD scenes (#634).

Improvements
------------

- Replaced NULL/0 with `nullptr`, and added `override` to all virtual overrides (#629).

Fixes
-----

- IECoreGL::ColorTexture : Fixed bug in conversion of RGBA textures to ImagePrimitive (#635).
- IECoreGL : Fixed crashes when rendering indexed primitive variables (#631).

Build
-----

- Added script to prep for run-clang-tidy.py.

10.0.0-a3
=========

Breaking Changes
----------------

- Switched UVs to be represented as a single "uv" V2fVectorData PrimitiveVariable with optional
  indices. Old caches are converted automatically on loading but code which deals with UVs directly
  will need to be updated (#621).
- IECoreRI :
  - Removed Dspy.h. The ieDisplay.so RenderMan display driver is now independent
    of libIECoreRI, making it suitable for use in 3delight NSI renders (#622).
  - Removed GXEvaluator (#621).
- Houdini cache loaders : Changed filtering (#616).
- Removed MeshFaceFilterOp. Use `MeshAlgo::deleteFaces()` instead (#621).
- Removed MeshTangentsOp. Use `MeshAlgo::calculateTangents()` instead (#621).
- Removed FaceAreaOp. Use `MeshAlgo::calculateFaceArea()` and `MeshAlgo::calculateFaceTextureArea()`
  instead (#621).
- Removed PointDistributionOp. Use `MeshAlgo::distributePoints()` instead (#621).
- Removed MeshDistortionsOp. Use `MeshAlgo::calculateDistortion()` instead (#621).
- FromMayaMeshConverter (#621) :
  - Removed unused parameters.
  - Made some methods private.

Features
--------

- PointsAlgo : Added `mergePoints()` function (#616).
- MeshAlgo (#621) :
  - Added `calculateFaceArea()` function
  - Added `calculateFaceTextureArea()` function
  - Added `distributePoints()` function
  - Added `calculateDistortion()` function

Improvements
------------

- PrimitiveVariable (#621) :
  - Added optional IntVectorData indices. This allows a compact representation
    to be stored in PrimitiveVariable::data, with the indices being used to map
    to the full Vertex/Uniform/FaceVarying size requirement.
  - Added `expandedData()` method to convert data from indexed to non-indexed
    form.
  - Added `Primitive::expandedVariableData()` method to simplify access to
    indexed data.
- Improved UV representation :
  - UVs are specified as a single V2fVectorData PrimitiveVariable
  - Connectivity of UVs is preserved using the optional
    PrimitiveVariable::indices field
  - The default UV set is now called "uv" rather than the previous
    pair of "s" and "t"
  - Additional UV sets are identified unambiguously using the GeometricData::UV
    interpretation.
- Houdini cache loaders : Improved filtering (#616).
- PrimitiveEvaluator : Added Result::vec2PrimVar() accessor (#621).
- OpenImageIO::DataView : Added support for V2[if]VectorData (#621).
- LRUCache : Reduced overhead of `setMaxCost()` when the limit is not being reduced (#617).
- Python Wrapper classes : Added support for arbitrary numbers of constructor parameters (#618).

Fixes
-----

- ToGLMeshConverter : Fixed orientation of UV cooordinates (#624).
- IECoreNuke::CurveLookup : Fixed memory corruption (#616).
- MurmurHash : Fixed bug when appending arrays larger than `sizeof( int )` (#620).

Build
-----

- Added DEBUGINFO build option, for including debug symbols in release builds (#616).
- Improved Travis test output.

10.0.0-a2
=========

Breaking Changes
----------------

- Flipped interpretation of UVs, so that increasing values of V are up, not down #611.
- Refactored image and colour functionality significantly (#605)
  - ImageReader and ImageWriter are now implemented via OpenImageIO behind the scenes.
    There are no longer any format-specific derived classes. As a consequence many more
    file formats are now supported.
  - Colour management is deferred to OpenColorIO.
  - Many classes are now unnecessary and have been removed.
  - All image related functionality has been moved to a new IECoreImage module.
  - ImagePrimitive is no longer directly renderable via IECore::Renderer.
  - Image related functionality of IECore::Font is now moved to IECoreImage::Font.
  - Removed unnecessary functionality. We recommend using Gaffer or OpenImageIO instead :
    - ImagePrimitiveEvaluator
    - PointRepulsionOp
    - CheckImagesOp
    - ImagePrimitiveOp
    - CompositeAlgo/ImageCompositeOp/ImageSequenceCompositeOp
    - ImagePremultiplyOp
    - ImageUnpremultiplyOp
    - UVDistortOp
    - DeepPixel/DeepImageReader/DeepImageWriter
    - Grade
    - ColorSpaceTransformOp, CubeColorLookup and all color transforms

Additions
---------

- Added IECoreImage::OpenImageIOAlgo namespace, with various support for interoperability
  with OpenImageIO (#605).
- Added IECoreImage::ColorAlgo namespace for applying colour transforms.

Improvements
------------

- Flipped interpretation of UVs, so that increasing values of V are up, not down (#611).
  This provides improved interoperability with Maya and Houdini when UVs are subsequently
  edited in Cortex (for instance, in Gaffer). This also simplifies UDIM management.

Fixes
-----

- Fixed RenderMan display driver for breaking changes introduced between 3delight
  versions 12.0.88 and 12.0.113 (#612).
- UVs loaded from Alembic files now have the correct orientation. Note that this is
  because Cortex's interpretation of V direction has changed, rather than because
  IECoreAlembic::MeshReader has changed (#611).

Build
-----

- Fixed compilation with GCC 4.8.3 (#607, #610)
- Fixed missing include in IECorePython/ExceptionAlgo.h (#608)
- Boost asio, signals and factorial libraries are now required
  dependencies (#605).
- OpenImageIO and OpenColorIO are now required dependencies (#605).
- IECoreHoudini can now be built without IECoreGL (#605).
- Removed direct dependencies on libTIFF, libJPEG and libPNG (#605).

10.0.0-a1
=========

Breaking Changes
----------------

- Data : Removed support for loading old obsolete LongData and LongVectorData objects (#582).
- Parameter : Removed deprecated `presets()` accessor. Use `getPresets()` instead (#582).
- IECorePython : Removed deprecated Wrapper class. Use RefCountedWrapper or
  RunTimeTypedWrapper instead (#582).
- IECoreGL::MeshPrimitive : Removed deprecated constructor (#581).
- RSL ArrayAlgo.h : Removed deprecated functions (#581).
- IECoreRI::Renderer : Removed deprecated attributes and commands (#581).
- IECoreArnold::UniverseBlock : Removed deprecated constructor (#581).
- IECoreMaya :
  - Menu : Removed useInterToUI arg and deprecated createMenu() method (#581).
  - Removed MayaPythonUtil (#581).
  - Removed deprecated TransientParameterisedHolderNode (#581).
  - PathParameterUI : Removed deprecated openDialog() method (#581).
- PrimitiveEvaluator : Added Result argument to `signedDistance()` method (#581).
- Removed IECoreTruelight #586.
- IECoreAlembic :
  - Removed ABCToMDC (#591).
  - Removed FromAlembicConverter classes. Use AlembicReader classes instead (#591).
- MeshPrimitive : Made `setTopology()` non-virtual (#598).

Features
--------

- IECoreHoudini::LiveScene : Allowed the creation of derived classes (#552).
- IECorePython :
  - Added ParameterClass and ParameterWrapper binding utilities (#583).
  - Added OpClass and OpWrapper binding utilities (#583).
  - Added ReaderClass and ReaderWrapper binding utilities (#583).
  - Added ExceptionAlgo utilities (#604).
- IECoreAlembic :
  - Added AlembicScene class. This replaces the AlembicInput class,
    and provides both read and write support via the SceneInterface
    API. It is also significantly faster (#598, #606).
  - Added support for curves geometry (#591).
  - Added support for points geometry (#591).
  - Added support for BoolGeomParams (#591).
  - Added ObjectReader and ObjectWriter classes
- LRUCache #596 :
  - Added Policy template argument, with Serial and Parallel policies
    optimised for single and multithreaded operation.
  - Added optional GetterKey template argument. This allows additional
    information to be passed to the getter, without it being stored in
    the cache.
  - Improved error handling. The original exception is now rethrown on
    a second failed call to `get()`.
  - Added support for reentrant getters which call back into the cache.
  - Improved performance.
- MeshAlgo : Added `reverseWinding()` function (#598).

Improvements
------------

- SceneInterface : Added `hasBound()` method (#598).
- SampledSceneInterface : Implemented read methods using readAtSample
  methods. This avoids all the derived classes having to implement the
  same boilerplate (#598).
- SceneCache : Made hash() stable across processes where possible (#598).
- InternedString : Added specialisation for `std::hash` (#606).
- Appleseed DisplayTileCallback : Added support for arbitrary display
  parameters (#600).

Fixes
-----

- IECoreArnold::ParameterAlgo (#579) :
  - Fixed string array conversion for standard libraries where `std::string`
    does not have equivalent layout to `const char *`.
  - Fixed bug in `dataToArray()` boolean conversion.
- Spline (#593) :
  - Removed intermediate cast to float that could reduce precision of
    double splines.
  - Added support for the final segment of curves requiring less than 4
    control points.
  - Improved handling of curves where the X axis curve is non-monotonic.
- MatrixMotionTransform : Fixed crash in `transform()` method (#597).
- IECoreAlembic : Fixed mesh winding order (#598).
- Fixed Houdini 16 issues (#587).

Build
-----

- Fixed check for glew.h (#590).
- Added WARNINGS_AS_ERRORS build argument (#590).
- Minimum C++ standard is not C++11 (#588).
- DEBUG option nows sets optimisation level to O0 (#588).
- Removed TESTCXXFLAGS option.

9.21.0
======

Features
--------

- PointsAlgo :
  - Added `deletePoints()` (#576).

Fixes
-----

- MeshAlgo & CurvesAlgo :
  - Improved argument names (#578).
- IECoreMantra : Fixed World procedural crash in Houdini 16 (#577).

Build
-----

- Fixed gcc 4.1 builds

9.20.0
======

Features
--------

- MeshAlgo :
  - Added `deleteFaces()` (#575).
- CurvesAlgo :
  - Added `resamplePrimitiveVariables()` (#566).
  - Added `deleteCurves()` (#575).
- PointsAlgo :
  - Added `resamplePrimitiveVariables()` (#575).

Improvements
------------

- IECoreHoudini : Added support for Houdini 16 (#569).
- IECoreArnold::OutputDriver :
  - Using output layerName to set channel names (#573).
  - Improved performance (#574).
- ClientDisplayDriver (#574) :
  - Improved performance.
  - Better error handling.

9.19.0
======

Features
--------

- MeshAlgo : Added function to resample primitive variables (#565)

Improvements
------------

- Arnold output driver : Added pixel aspect ratio to driver parameters (#564)

Fixes
-----

- Maya : Fixed deadlock issues with LiveScene (#562).
- Houdini : Fixed crash when the library was loaded without the plugin (#570).
- Nuke : Fixed debug builds (#567).

9.18.0
======

Features
--------

- IECore::MeshAlgo : Added calculateTangents() function.
  - MeshAlgo is a new namepsace for functions which operate on MeshPrimitives.
  - MeshTangentOp has been updated to use `MeshAlgo::calculateTangents()` internally.
- IECoreMaya:LiveScene : Convert Maya Sets to Scene Tags.
  - Sets will be converted if they have a dynmaic bool attribute called "ieExport" which is set True.
- IECoreHoudini SceneNodes : Added an option to load Scene Tags as Houdini PrimGroups.

Improvements
------------

- IECoreArnold::ParameterAlgo : Avoid warnings when redeclaring attributes.
- IECoreHoudini Op SOPs : Added "ie" prefix to the tab menu for Cortex Ops loaded as Houdini SOPs.
  - This affects Image Engine only.

Fixes
-----

- IECoreMaya::LiveScene : Ignore non-serializable objects introduced by Maya 2016 hypershade.

Build
-----

- Removed stale asserts.
- Removed references to dead test cases.

9.17.0
======

Improvements
------------

- `IECoreMaya::SceneShape` :
  - Added tagName argument to `FnSceneShape.expandAll()`
  - Added "Expand by Tag" option to SceneShape context menu.
- `IECoreArnold::ParameterAlgo`: Support `AI_TYPE_RGB`, `AI_TYPE_RGBA`, and `AI_TYPE_VECTOR`.
- `ImageDisplayDriver`: Support "header:" metadata convention
- `EXRImageWriter`: Added DreamWorks compression options (if compiled with OpenExr 2.2+).
- `OStreamMessageHandler`: Made m_stream protected to allow access from subclasses.

9.16.2
======

- Build
  - Added CXXSTD build argument.
  - Made compatible with recent FreeType versions.
  - Fixed C++11 incompatibilities.
  - Fixed debug builds.
  - Fixed linking for single-lib Alembic.

9.16.1
======

Fixes
-----

- `IECoreMaya::SceneShape` :
  - Fixed redraw issue in Maya 2016 parallel mode.
  - Fixes computation for expanded SceneShapes in Maya 2016 parallel mode.

9.16.0
======

Improvements
------------

- IECoreAppleseed : Added support for int[] and float[] OSL shader parameters.
- Build :
	- Added support for Alembic 1.6.
	- Added support for Boost 1.61
	- Added support for macOS Sierra

9.15.0
======

Improvements
------------

- IECoreArnold::ParameterAlgo :
  - Added support for point parameters.
  - Added support for DoubleData and M44dData
  - Added node name to warnings.
- IECoreRI : Added support for render:sampleMotion option.
- IECoreMaya :
  - Added UndoChunk `with` statement.
  - Added RefreshDisabled `with` statement.

9.14.1
======

Fixes
-----

- Arnold `UniverseBlock`
  - Shutdown lazily to improve read-only access (e.g. shader loading on script open).
  - Fixed threadsafety issues with construction/destruction.
  - Fixed writability issues in `Renderer` and tests.
- `IECoreGL::Selector`: Fixed leak of `glClearColor` and `glClearDepth`.

9.14.0
======

#### IECore

- ParameterAlgo
  - Added manual conversion from BoolVectorData to AtArray.
- DisplayDriverServer
  - Supporting automatic selection of a free port.

#### IECoreMaya

- SceneShape
  - Added preserveNamespace argument to convertAllToGeometry().
  - Recursive expandAsGeometry() now preserves namespace.
  - Fixed bug converting multiple curves to geometry.
  - Fixed naming backward compatibility when converting and connecting to curves.

9.13.2
======

#### IECore

- Added 'tx' support for TIFFImageReader

9.13.1
======

#### IECoreArnold

- CurvesAlgo : Convert "N" to orientations.

9.13.0
======

#### IECoreMaya

- Fixed LiveScene object merging bug (#524).

#### IECoreAppleseed

- Added support code and improvements for new renderer backend in Gaffer (#520).

9.12.1
======

#### IECore

- Camera
  - Added support for negative clipping planes ( useful on ortho cams )

#### IECoreHoudini

- Fixed CurvesPrimitive duplication in Houdini SceneCacheSource SOP

9.12.0
======

#### IECoreArnold

- Added read/write access concept to UniverseBlock (#514).
- Added automatic loading of metadata files to UniverseBlock (#514).
- Stopped adding "user:" prefix to arbitrary primitive variables. Instead
  variables which clash with built in parameters are ignored instead (#519).
- Added support for GeometricTypedData interpretation in primitive variables (#519).
- Support setting enum parameters using integer index

#### IECoreMaya

- LiveScene
  - Added support for multiple shapes under a transform, by merging them
    into a single Cortex object (#516).
- SceneShapes
  - Added support for converting CurvesPrimitives to multiple maya curves
    under the same transform (#516).

9.11.4
======

#### IECore

- Removed code that discarded Camera crop windows outside 0-1

#### IECoreMaya

- Fixed crash in ToMayaSkinClusterConverter when updating topology

#### IECoreArnold

- Added support for arbitrary camera parameters

#### Build

- Added DEBUG option and fixed debug build errors

9.11.3
======

#### IECoreArnold

- MeshAlgo : Fix iterator invalidation bug.

9.11.2
======

#### Build

- Fixed linking of IECoreAppleseed on OS X.


9.11.1
======

#### IECoreArnold

- Improved UV set support.
- Support for FaceVarying primitive variables.
- Support for Constant V3f primitive variables.
- Support for Vertex primitive variables on PointsPrimitives.
- Fixed incorrect output of Vertex primitive variables on CurvesPrimitives (these are not yet valid in Arnold)

#### IECoreAppleseed

- Made LogTarget class public.
- Added dataToString overload accepting a const Data*.
- Refactored transform conversion code out of TransformStack.

9.11.0
======

#### IECoreArnold

- Added support for AI_TYPE_VECTOR in `ParameterAlgo::setParameter()`.
- Stopped making unnecessary copies of mesh topology in `MeshAlgo::convert()`.
- Added support for point arrays in `ParameterAlgo::setParameter()`.

9.10.1
======

#### IECoreArnold

- Added support for matrix parameters

#### IECoreAppleseed

- Fliped t coordinate for mesh UVs.
- Removed ToAppleseed converters. Moved code to Algo files.
- Fixed compile issues for IECoreAppleseed on gcc 4.1.2
- Fixing SConstruct configuration for Appleseed

#### Build

- Exposing OSL and OIIO build options

9.10.0
======

#### IECoreArnold

- Remove support for Arnold < 4.1.
- Support for progressive renders.
- ParameterAlgo
  - Support for arrays in getParameter().
  - Support for RGBA and Point2 parameters.
  - Support for V3fVectorData.
- Flipped t coordinate for mesh uvs.
- Suppressed conversion of stIndices primvar.

9.9.1
=====

#### Build

- Added INSTALL_ARNOLDPYTHON_DIR build option, to specify an independent location
  for the installation of the IECoreArnold python module.
- Fixed linking of IECoreArnold.

9.9.0
=====

#### IECore

- Python Module
  - Use RTLD_GLOBAL to load C++ modules.

#### IECoreMaya

- Added a MightHaveFn to IECoreMaya::LiveScene::registerCustomAttributes().
  - If MightHaveFn is specified, it will be called before NamesFn to allow a cheap early out.

#### IECoreHoudini

- Implemented Cob GEOIO_Translator::fileStat to return the bounding box from the cob header.

#### IECoreArnold

- Renderer
  - Apply name to camera nodes.
  - Support "ai:shape:" attribute prefix.
  - Add support for creating Arnold volume nodes.
- Add SphereAlgo with conversion from IECore::SpherePrimitive.

#### Build

- Fixed PYTHONPATH for IECoreArnold tests
- Updated SConstruct and tests for Arnold 4.2

# 9.8.0

#### IECore

- Python Module
  - Use RTLD_GLOBAL to load C++ modules.

#### IECoreMaya

- Added a MightHaveFn to IECoreMaya::LiveScene::registerCustomAttributes().
  - If MightHaveFn is specified, it will be called before NamesFn to allow a cheap early out.

#### IECoreHoudini

- Implemented Cob GEOIO_Translator::fileStat to return the bounding box from the cob header.

#### IECoreArnold

- Renderer
  - Apply name to camera nodes.
  - Support "ai:shape:" attribute prefix.
  - Add support for creating Arnold volume nodes.
- Add SphereAlgo with conversion from IECore::SpherePrimitive.

#### Build

- Fixed PYTHONPATH for IECoreArnold tests
- Updated SConstruct and tests for Arnold 4.2

# 9.8.0

#### IECoreMaya

- Added plug conversion for MPointArray to IECore::Vector3f/3d (3d default) with Point interpretation.
- Updated plug conversion for VectorArray to use Vector interpretation (rather than Numeric).
- Preventing primary UV Set from being exported twice.
- ieSceneShape expansion functions can optionally preserve the original namespace of the parent.

#### IECoreRI

- Added initial support for 3delight OSL via NSI

#### IECoreAppleseed

- Renamed volume priority attribute to medium priority.

# 9.7.1

#### IECore

- LinkedScene : The message for linked ancestor tags is now Debug level instead of Warning.

#### IECoreHoudini

- Fixed "name" attribute bug in IECoreHoudini::LiveScene, which was triggered by using an attribwrangle on the name attribute.

# 9.7.0

#### IECore

- Fixed potential crash in MeshPrimitiveEvaluator::barycentricPosition() (#475).
- Fixed ConfigLoader to ignore duplicate paths. Note that this may change configuration
  behaviour for malformed paths with duplicates (#474).

#### IECoreArnold

- Added support for both deformation and transform blur (#473).
- Refactored all Cortex->Arnold conversion functionality into new Algo.h headers,
  removing the old FromCoreConverter based classes. This does represent a compatibilit
  break, but IECoreArnold is in contrib, where no compatibility guarantees exist.
- Fixed warnings relating to the data type of Arnold's visibility parameter, which
  has been changed to AtByte from AtInt.

# 9.6.1

#### IECore

- MessageHandler handles python exceptions before they get to c++

#### IECoreMaya

- Sorting childNames during ieSceneShape expansion

#### IECoreAppleseed

- Added nested volume priority attribute

# 9.6.0

#### IECore

- Added support for procedurals without bounds
- Fixed time remapping for old style link attributes in LinkedScenes

#### IECoreHoudini

- Fixed crash when converting integer and float list attributes in Houdini

#### IECoreAppleseed

- Fixed attribute stack bug

#### IECoreRI

- Added support for procedurals without bounds

#### IECoreGL

- Added support for procedurals without bounds

#### IECoreArnold

- Added support for procedurals without bounds

#### IECoreMaya

- Optimized IECoreMaya SceneShape expansion

# 9.5.0

#### IECoreNuke

- Adding support for PointsPrimitives in Nuke scene reader

# 9.4.0

#### IECore

- Added unit tests for IECore.M33f/M44f indexing

#### IECoreHoudini

- Houdini can now round trip M33f and M44f primvars, including detail attributes/constant primvars.

# 9.3.0

#### IECore

- Added const parameterData method to IECore::Light
- Added alternate AreaLight shader control parameter named "__areaLight"

#### IECoreHoudini

- String tables for converted string primitive variables are now sorted alphabetically
- Houdini geo converters now support M44f primvars

# 9.2.0

#### IECoreGL

- Added ShaderStateComponent::hash() method.
- Fixed wireframe rendering with user vertex shaders.
- Fixed IDRender selection with user vertex shaders.
- Fixed selection with custom vertex shaders on OSX.

#### IECoreAppleseed

- Added default render params needed by interactive final rendering.
- Fix display when used with the ImageDisplayDriver driver type.

#### IECoreHoudini

- Removed deep RAT support for Houdini 15 (it is still there for older Houdini versions)

#### Build

- Houdini 15 compatibility
- Fixed build issue for running 3delight inside Maya at IE

# 9.1.0

#### IECoreAppleseed

- Support renderer type prefixes in Renderer::light().

#### IECoreArnold

- Support renderer type prefixes in Renderer::light().

#### IECoreRI

- Support renderer type prefixes in Renderer::light().

#### IECoreMaya

- Fixed crash when zooming in on coordinate systems in scene shapes

#### Build

- 3delight display drivers and procedurals now installed to compiler specific locations at IE

# 9.0.0

#### IECore

- Renamed GeometricData::Interpretation::Numeric to GeometricData::Interpretation::None, so that it makes sense as a deafult for non-numeric types.
  - GeometricData::Interpretation::Numeric still exists for compatibility.
- Added DataAlgo.h with setDataInterpretation() and getDataInterpretation().

#### IECoreMaya

- FromMayaCameraConverter now accounts for pixelAspectRatio.

#### IECoreRI

- Primitive variable types in RI now set from the prim var interpretation.  Type hints now ignored.

#### IECoreAppleseed

- Added support for shading overrides.
- Added mesh tangents and motion normals.
  - Mesh tangents (primitive variable uTangent) are now exported to appleseed meshes.
  - Time varying tangents and normals for primitives with deformation blur are now exported if appleseed supports them (since version 1.2.0).
- Fixed a warning message in ToAppleseedMeshConverter.

#### Build

- Travis : Updated to container-based build infrastructure.
- Travis : Skipped some threading tests on Travis.

# 9.0.0-b9

#### IECore

- Fixed shutdown crashes with ScopedGILLock (as seen in Gaffer 0.14.0.0)

# 9.0.0-b8

#### IECore

- Added a new magic number for JPG compatibility

#### IECoreMaya

- Maya 2016 compile fixes for gcc 4.8

#### IECoreAlembic

- Fixed bug where face sets were treated as children.

#### IECoreRI

- Changed SXExecutor parameter interpretation.

#### IECoreAppleseed

- Added support for interactive non-editable final rendering.

# 9.0.0-b7

#### IECore

- Storing the bounding box in .cob headers if the object is a VisibleRenderable.
- TransformOp now takes a copy of the data before altering it.
- GCC 4.8 compatibility.
- Boost 1.55.0 compatibility.
- TBB 4.3 compatibility.

#### IECoreMaya

- Fixed FromMayaCameraConverter to account for non-zero film offsets.
- ToMayaCameraConverter now supports setting the film offset using blindData on the Camera.
- Maya 2016 compatibility.

#### IECoreHoudini

- Fixed issue exporting string attributes when Houdini reports an extra null string in the detail.
- Added support for converting quaternions to and from Houdini.
- Houdini 14 compatibility.

#### IECoreRI

- SLOReader sets geometric interpretation on parameters.
- ParameterList makes use of geometric interpretation when available.

#### IECoreAppleseed

- Fixed appleseed error while binding inputs of object instances.
- Various options changes:
  - Set decorrelate_pixels automatically depending on render passes.
  - If the rendering_threads option is zero, use all CPU cores for rendering.
  - If the as:cfg:pt:max_ray_intensity is zero, disable max intensity clamping.
  - Disable max number of bounces for max_path_length options set to zero.
  - Check the type of the Data passed to setOption before accessing it.

# 9.0.0-b6

#### IECore

- Fixed thread safety bug in BlindDataHolder::blindData()

# 9.0.0-b5

#### IECore

- Fixed PointsPrimitive::bound() to account the width or aspect ratio of the points.
- Made MurmurHash::append() an inline function

#### IECoreMaya

- SceneShapeUI::select now returns false when polygons aren't being displayed in the viewport.

#### IECoreHoudini

- SceneCacheNodes have a new "Full Path Name" parm which creates an attrib for the full path for each shape (default is off).

#### IECoreGL

- Fixed radius of spheres rendered by IECoreGL::PointsPrimitive.

#### IECoreAppleseed

- Camera, transformation, deformation motion blur support.
- Lights can now be turned on and off.
- Interactive rendering support.
- Added support for the photon target attribute.
- Added support for orthographic cameras.
- Added an appleseed log handler that uses MessageHandler to log messages.

# 9.0.0-b4

#### IECore

- Added IECore::ClippingPlane object
- Set __file__ when loading configs
- Emitting a debug message for each config file loaded

#### IECoreMaya

- Added a mutex inside IECoreMaya::LiveScene::hasAttribute()

#### IECoreGL

- Wireframe shading uses Cs instead of vertexCs

#### IECoreRI

- Several IECoreRI::shader() optimizations
- Added clipping plane support to IECoreRI::Renderer

#### IECoreAppleseed

- Refactored IECore primitive to appleseed entities conversions code.
- Simplified IECoreAppleseed::RendererImplementation.
- Use appleseed object alpha maps instead of material alpha maps.
- Fixed a bug when trying to render a scene without cameras.
- Use the names set with setAttribute to name the appleseed entities in generated appleseed scene files.
- Highlight regions being rendered in the interactive display driver. Useful when doing multipass rendering.
- Small refactors in the display driver code.
- Removed some unused headers and other formatting changes.
- Camera and transformation motion blur support
- Added as:automatic_instancing option to enable / disable auto-instancing.
- Better error handling for as:mesh_file_format option
- Better error handling for searchpath option. Added automatic_instancing option
- Support for appleseed 1.1.2
- Fixed bug when connecting members of stuct parameters in OSL shaders.
- Added photon target attribute for objects
- PrimitiveConverter interface changes. Changed the way hashes are computed in IECoreAppleseed.
- Fixed assembly instance names when generating appleseed projects.

# 9.0.0-b3

#### IECore

* Added implicit conversion from python datetime to DateTimeData.
* Linked scenes no longer return duplicate tags

#### IECoreMaya

* Only allow selection using the bounding box if the box is visible
* Latest registered custom attribute reader now takes precedence in IECoreMaya.LiveScene
* On transform nodes, plugs with names prefixed by "ieAttr_" are now translated into "user:" attributes by the IECoreMaya.LiveScene
* String attributes called "ieTags" on transform nodes now interpreted as a space separated list of tags

#### IECoreHoudini

* Latest registered custom attribute reader now takes precedence in IECoreHoudini.LiveScene

#### IECoreRI

* added IECoreRI support for DoubleData, V3dData and Color3dData attributes

# 9.0.0-b2

#### IECore

- Removed SimpleSubsurface
- Removed Marschner code
- Removed HitMissTransform
- Removed TypeInfoCmp
- Removed UniformRandomPointDistributionOp
- Removed MappedRandomPointDistributionOp
- Removed AttributeCache
- Removed InterpolatedCache
- Removed spherical harmonics code
- Removed FileExampiners
- Improved MurmurHash performance

#### IECoreGL

- Added mip mapping to ColorTexture.

#### IECoreAppleseed

- Added visibility attributes support.
- Fixed bug converting OSL int shader parameters.

#### Build

- Windows build fixes.
- Updated default build arguments to work with standard packages on Ubuntu 12.04.
- Configured Travis automated testing.

# 9.0.0-b1

#### IECore

- Fixed GILReleasePtr crash.
- Adding the export macros for proper exporting of symbols.

#### IECoreMaya

- Fixed ieSceneShape component selection bug.
- Fixed crash when expanding ieSceneShapes containing coordinate systems.

#### IECoreGL

- Added ToGLSphereConverter.
- Adding the export macros for proper exporting of symbols.

#### IECoreRI

- Adding the export macros for proper exporting of symbols.

#### IECoreArnold

- Adding the export macros for proper exporting of symbols.

#### IECoreAppleseed

- Added initial support for Appleseed.
- Added crop window support.
- Fixed OSX compilation and linking issues.

#### IECoreAlembic

- Adding the export macros for proper exporting of symbols.

# 9.0.0-a11

#### IECore

- Optimised Object::memoryUsage()

#### IECoreGL

- Added support for setting array uniforms in shader parameters

#### IECoreAppleseed

- Added initial support for Appleseed

# 9.0.0-a10

#### IECore

- Fixed GIL bug in python Object creation
- Added implementation of tbb_hasher for boost::intrusive_ptr

#### IECoreGL

- Added State::ScopedBinding overload, allowing a binding to be ignored
- Changed IECoreGL::HitRecord::name field from InternedString to GLuint
- Added IECoreGL::Selector::loadName() overload to auto-generates names
- Removed TextureUnits.h
- Added python bindings for CurvesPrimitive
- Added python bindings for smoothing state components
- Added ToGLStateConverter for converting attributes to State objects
- Fixed crash in ShaderStateComponent::addParametersToShaderSetup()

#### Incompatibilities

- Changed IECoreGL::HitRecord members
- Removed IECoreGL/TextureUnits.h

#### Build

- Fixed compilation for GCC 4.2 on OS X

# 9.0.0-a9

#### IECore

- TIFFImageReader now checks if the tif is tagged as coming from tdlmake, and if so, sets the sourceColorSpace from the image description set by tdlmake.

#### IECoreGL

-  Switched glsl diffuse and specular functions to match 3delight's properly normalized BRDFS

#### IECoreMaya

- Fixed coordinate system->maya locator converter crash for coordinate system with no transform
- Fixed crash in SceneShape::hasSceneShapeObject for invalid scene

#### IECoreRI

- Automatic instancing now defaults to on

# 9.0.0-a8

#### IECoreMaya

- Stopped IECoreMaya::LiveScene::readObject() returning null pointers.
- Stopped IECoreMaya::LiveScene::readAttribute() returning null pointers.

#### IECoreRI

- Fixed precision issue with computing the projection matrix for dsm depth remapping, which was causing deep holdout problems.
- Fixed bug when editing cameras when dealing with multiple cameras.

# 9.0.0-a7

#### IECore

- Reduced overhead of calling memoryUsage() on SimpleTypedData.
- Added pixelAspectRatio to list of standard camera parameters.
- Added InternedString( const char *, size_t length ) constructor.

#### IECoreRI

- Added pixel aspect ratio support to IECoreRI::Renderer.
- Fixed argument passing for RiProcDynamicLoad.

#### IECoreArnold

- Added pixel aspect ratio support to IECoreArnold::Renderer.

#### IECoreHoudini

- ToHoudiniGeometryConverter marks Pref and rest as non-transforming
- Preventing SceneCache Source from transforming rest/Pref

# 9.0.0-a6

#### IECore

- Multithreaded PointSmoothSkinningOp
- Added ExternalProcedural object type
- Added HasBaseType type trait
- Added boost::hash compatibility for MurmurHash

#### IECoreRI

- Added support for DynamicLoad and DelayedReadArchive procedurals

#### IECoreArnold

- Added support for delayed load DSO and .ass procedurals

# 9.0.0-a5

#### IECore

- LinkedScene::hash now takes extra children at links into account

#### IECoreRI

- Added support for RiFrame blocks in IECoreRI::Renderer.

#### IECoreMaya

- Renamed IECoreMaya::MayaScene to IECoreMaya::LiveScene

#### IECoreHoudini

- Renamed IECoreHoudini::HoudiniScene to IECoreHoudini::LiveScene

# 9.0.0-a4

#### IECore

- Bug fix in StreamIndexedIO that was causing sporadic crashes when loading SceneCaches during procedural expansion.
- Fixed some minor bounding box bugs in IECore.SceneCache
- Child bounds can now dilate bounds explicitly specified using IECore.SceneCache.writeBound()
- IECore.LinkedScene now supports extra children at link locations
- Fixed TransformOp double transform bug

# 9.0.0-a3

#### IECore

- Added SceneInterface::hash() method.
- Improved ConfigLoader.
	- Now executes files within the same directory in alphabetical order.
	- Added subdirectory argument.
	- Env var accepted in place of search path.

# 9.0.0-a2

#### IECore

- Made RefCounted bindings release the GIL during C++ destruction.
- Changed RefCounted base class binding to use GILReleasePtr too.
- Replaced IECore::IntrusivePtr with boost::intrusive_ptr.
- Removed staticPointerCast, constPointerCast and dynamicPointerCast.
- Fixed crash in MeshMergeOp.
- Fixed mutex acquisition in LRUCache::updateListPosition().
- PointSmoothSkinningOp handles faceVarying normals and added refIndices parameter
- Changed DespatchedTypedData DataPtr & argument to Data *
- Fixed LRUCache hangs.
- Simplified RefCounted bindings.
- Fixed LRUCache crashes where clear() was called concurrently with get().

#### IECorePython

- Added IECorePython::CastToIntrusivePtr.

#### IECoreMaya

- MayaScene bindings now catch boost python exceptions

#### IECoreGL

- Removed deprecated IECoreGL::Selector::loadIDShader() method.
- Added IECoreGL::Selector::postProjectionMatrix() method.

#### IECoreRI

- Added support for camera edits to IECoreRI::Renderer.
- Added support for motion blurred cameras to IECoreRI::Renderer.
- Added support for multiple cameras to IECoreRI::Renderer.
- Removed "transform" parameter from IECoreRI::Renderer::camera().
- Removed support for hider parameters in IECoreRI::Renderer::camera(). …
- IECoreRI now built for all python versions
- added M44dData attribute support to IECoreRI::Renderer

#### IECoreAlembic

- Added support for the Ogawa backend into IECoreAlembic.

# 9.0.0-a1

#### IECore

- Added from-python conversion of RunTimeTypedClass to IECore::TypeId
- Removed implicit surface functionality
- Removed BGEO and BIN readers/writers.
- Removed IFFHairReader.
- Fixed EXRImageReader canRead to accept scanline images.
- Improved speed of InternedString( int64_t ).
- Tidied up LRUCache

#### IECoreMaya

- Fixed MayaScene for reading scene:visible and custom attributes at the root

# 8.5.0

#### IECore

- Added python binding for RefCounted::refCount()
- Fixed default ObjectPool for larger sizes

#### IECoreRI

- Changed SHWDeepImageReader to convert depth to standard Z (distance from eye plane), instead of spherical distance from the near clip.
- Changed SHWDeepImageWriter to convert back to spherical distance from the near clip, assuming the incoming DeepPixels represent distance from eye plane.

#### IECoreHoudini

- Fixed bug in SceneCache ROP when re-rooting flattened geo with errors

# 8.4.7

#### IECore

- IECore.ls supports ambiguous padding when the sequence is not a regular frame range.
- IECore::frameListFromList correctly handles reverse order lists.

# 8.4.6

#### IECore

- Removed unnecessary overhead from Object::copy().

#### IECoreHoudini

- Fixing crash in SceneCache ROP todo with "scene:visible" attribute.

# 8.4.5

#### IECore

- Fixing seg fault when attempting to read a non-existant attribute several times.
- Minor fixes for issues highlighted by Coverity.

#### IECoreRI

- Added support for string array options in SXRenderer.

#### IECoreMaya

- MayaScene now outputs the "scene:visible" attribute based on Maya visibility.
- SceneShapeInterface::componentNames() and selectionName() now work even if the Maya viewport hasn't refreshed.

#### IECoreNuke

- Added support in DeepImageReader for ZBack channels.

# 8.4.4

#### IECore

- Fixed StringData repr() to support newlines and quotes.

# 8.4.3

#### IECore

- Improved precision of Imath Vec and Color repr() and str().
- Using mutex on all access to the internal directory nodes in StreamIndexedIO.
- SceneCache attribute read is now thread-safe.

#### IECoreMaya

- Working around a bug in Maya for meshes with 6 or more UV sets.
- Fixed precision issue in failing test case.

#### IECoreHoudini

- Improved Exception handling in Houdini SceneCache nodes.
- Improved UI for Expand/Collapse buttons.
- Fixed bug in CortexConverter SOP todo with multiple CortexObject primitives with the same name.

#### IECoreNuke

- Fixed a bug in the SceneCacheReader that was preventing animated scene caches from displaying properly.

# 8.4.2

#### IECoreNuke

- Redesigning SceneCacheReader and fixing it for several known bugs (bug in 8.4.1, flickering, selection reset after file change, no TCL expressions)

# 8.4.1

#### IECore

- Compilation patches for Ubuntu 13 and Mint 16

#### IECoreMaya

- Fixed ToMayaCurveConverter for cubic non periodic curves (it was previously not possible to roundtrip such a curve using the To/From converters).

#### IECoreHoudini

- Fixed SceneCache ROP crash when a name attr existed, but the name was blank.

#### IECoreNuke

- Fixed a bug with SceneCacheReader where it wouldn't update correctly when wrapped by a python node.
- Fixed a bug with SceneCacheReader that was causing flickering artifacts when using animated geo.
- Fixed a bug with SceneCacheReader for infinite instantiation of Ops due to knob changes during the validate method.

# 8.4.0

#### IECore

- Fixed a bug where the EXRImageReader would interpret Deep EXRs as valid.
- Added IECore::EXRDeepImageReader (only when building with OpenEXR 2)
- Added IECore::EXRDeepImageWriter (only when building with OpenEXR 2)

#### IECoreRI

- Added support for coordinate systems and a world transform in SXRenderer

#### IECoreHoudini

- Fixed crash when merging CortexPrimitives in Houdini 13.

#### IECoreNuke

- Fixed a bug with IECoreNuke::SceneCacheReader that was causing hanging and crashing.
- Fixed linking of IECoreNuke for Nuke 8.

# 8.3.0

#### IECore

- Refactored StandardRadialLensModel to match 3dequalizer

#### IECoreRI

- Added support for user options in SXRenderer
- Added support for multiple repeated shading grids in SXRenderer
- Removed conflicting parameter type warning for coshaders

# 8.2.0

#### IECore

- Fixed potential platform independence problem when writing unsigned ints in StreamIndexedIO.
- Optimised StreamIndexedIO memory usage. Reductions range between 20% and 70% for a selection of production assets.
- Fixed an off-by-one error in DeepImageConverter.

#### IECorePython

- Introduced an improved wrapping mechanism with reduced overhead for non-subclassed instances. Deprecated existing wrapping mechanism.
- Added RefCounted equality, inequality and __hash__ bindings based on the address of the underlying C++ object. Previously these methods were implemented with respect to the address of the python object, but several python objects could refer to the same C++ object.

#### IECoreHoudini

- Fixed problems initialising defaultObjectPoolCache during plugin load.
- Fixed bug in HoudiniScene with flat geo but no / prefix.

#### IECoreMaya

- Switching to component mode on scene shapes now behaves the same as procedural holders.
- The create locator functions in FnSceneShape now return the locators they created.

#### Build

- Fixed compilation errors on Linux Mint 16.

# 8.1.0

#### IECore

- Fixed cropping bug in CameraController::setResolution
- Fixed bug with SceneCache animated object topology.

#### IECoreMaya

- Added create locator functionality to SceneShapes
- Moved create locator methods from ProceduralHolderUI to FnProceduralHolder
- SceneShapes support queries to double attributes

# 8.0.0

#### IECore

- Added screen window modes to CameraController::setResolution.
- Fixed multiplication issue in MatrixInterpolator

#### IECoreMaya

- SceneShape GL Preview responds to the "scene:visible" attribute

#### IECoreHoudini

- SceneCache ROP marks visiblity using "scene:visible" rather than "visible"
- Preventing crashes in HoudiniScene when OBJ networks contain non-OBJ nodes

# 8.0.0-b9

#### IECore

- Fixed boost::format() exception in CompoundData::member()

#### IECoreGL

- Fixed "gl:primitive:selectable" attribute (#46)
- Fixed ID selection in wireframe, outline, and points styles (gaffer/#53, gaffer/#160)

#### IECoreMaya

- Setting gl:curvesPrimitive:useGLLines for SceneShape drawing
- Minor bug fixes to SceneShapeUI for tag menu and expandToSelected
- Fixed crash when reading MayaScene attributes that don't exist on the SceneShape
- Fixed stale window bug in SplineParameterUI

#### IECoreHoudini

- SceneCache ROP marks locations which appear and disappear over time
- Added standard ROP script parms (pre/post render and frame)

#### IECoreNuke

- Changed SceneCacheReader to only display MeshPrimitives

# 8.0.0-b8

#### IECore

- Clang compatibility

#### IECoreGL

- Clang compatibility

# 8.0.0-b7

#### IECore

- Added TransferSmoothSkinningWeightsOp
- Added GIL release for DisplayDriver imageData and imageClose binding

#### IECoreMaya

- Added ToMayaCurveConverter

#### IECoreHoudini

- Houdini 13 Compatibility (requires H13.0.267 to pass tests)
- Fixed HoudiniScene custom attribute bug when two callbacks define the same attribute
- Fixed exception when reading HoudiniScene custom attributes that didn't exist in the underlying scene
- Using handles instead of strings when validating the DetailSplitter

# 8.0.0-b6

#### IECore

- LinkedScene( SceneInterfacePtr ) supports writable scenes
- Fixed SceneCache from IndexedIO bug
- Fixed linking issues with IECore::CamelCase

#### IECoreHoudini

- SceneCache SOP transforms all Point, Normal, and Vector primitive variables (previously it only transformed P and N)
- Preventing double cooking in HoudiniScene::scene( path )

# 8.0.0-b5

#### IECore

- Improved error reporting in LinkedScene - the main filename is now available in error messages.
- Made RunTimeTyped baseTypeIds() and derivedTypeIds() methods thread safe.

#### IECoreGL

- Added IECoreGL::Selector::push/popIDShader() methods. These replace the now deprecated loadIDShader() method.
- Fixed crashes when selecting curves.

#### IECoreHoudini

- Added SceneCache Transform SOP. This node applies transformations from a SceneCache file directly on the points and primitives at the SOP level.
- FromHoudiniPolygon converter now automatically removes normal primvars when extracting a subdivision mesh.

#### IECoreNuke

- Added DeepImageReader - this allows any deep image type supported by Cortex to be read in Nuke.

# 8.0.0-b4

#### IECore

- Optimised polygonNormal and polygonWinding in PolygonAlgo.h.
- Added face normals mode to MeshNormalsOp.

#### IECoreGL

- Fixed shading of polygon meshes with no "N" primitive variable (#118).

#### IECoreArnold

- Added support for Arnold parameters of type AI_TYPE_BYTE.
- Added compatibility with Arnold 4.1.
- Fixed hangs in procedurals.

# 8.0.0-b3

#### IECore

- Fixed compile issue on Ubuntu

#### IECoreHoudini

- Improving performance of SceneCache SOP. This brings the animated performance back inline with 8.0.0-b1, while maintaining (if not improving) the on-load performance from 8.0.0-b2.
- Guaranteed SceneCache SOP shape/point order by sorting children by name before loading.
- Preventing crash in SceneCache ROP when cooking inside an invisible OBJ subnet.

# 8.0.0-b2

#### IECore

- WarpOp has a new BoundMode parameter, options are Clamp (previous behaviour) or SetToBlack.
- ImageDiffOp has a new option to offset display windows of the same size to be aligned before comparison.
- Added support to the LensDistortOp for images with offset display window.
- Fixed LensDistortOp bug with non-symmetric distortions.

#### IECoreHoudini

- Added BoundingBox and PointCloud GeometryType options to SceneCache nodes
- Added AttributeCopy parm to SceneCache SOP. This is used to duplicate attributes before loading to Houdini.
- Exposed SceneCache OBJ parameters to override the transform values coming from disk (Transform tab)
- Moved SceneCache OBJ Push button along with all geometry loading parms to the new Options tab
- Improved performance of SceneCache SOP (Up to 5x faster on a 1500 shapes, 3 million polys asset)

# 8.0.0-b1

#### IECore

- SceneInterface tags now support upstream/local/downstream tags (using a bit mask filter to query)
- Various fixes for OSX builds

### IECoreHoudini

- Fixed multiple transform bug in HoudiniScene

# 8.0.0-a23

#### IECore

- Added new logos!

#### IECoreGL

- Added IECoreGL::glslVersion() function and python binding
- Added IECoreGL::FrameBuffer::frameBuffer() method
- OpenGL 2.1 compatibility fixes

#### IECoreHoudini

- Added bindings for SceneCacheNode which give access to the SceneInterface directly (or None if invalid)
- HoudiniScene provides python access to registering custom attribute and tag readers
- HoudiniScene now provides access to the world space transformation matrix of the held OBJ node
- Fixing crashes in HoudiniScene when pointing to broken SOPs
- Fixing crashes in SceneCacheWriter when given null attribute data
- Replaced some (but not all) of the misc cow logos with the new Cortex mini-logo

# 8.0.0-a22

#### IECoreHoudini

- ParameterisedHolder SOPs have a nameFilter parm (w/ disable toggle)
 - These are used to pre-filter each input geometry (or not if toggled off)
- ProceduralHolder outputs a single CortexObject holding its procedural
- OpHolder operates several times per cook, once for each named input shape
 - Shapes matching the filter are operated on, and returned as CortexObjects, maintaining their name
 - Shapes not matching are passed through unchanged, whether they were normal geo or CortexObjects
 - It can be forced to operate only once by disabling the nameFilter or by passing a single named shape
- CortexConverter SOP now operates in both directions (converting between CortexObjects and native geo)
 - It also has a nameFilter, with similar pass-through behaviour as the OpHolder
- Changed interface for HoudiniScene custom attribute callbacks
 - SceneCache OBJs pass attributes through to HoudiniScene (and therefor SceneCache ROP)
- Added IECoreHoudini.makeMainGLContextCurrent() which is needed for sharing the GL Context with other applications (like Gaffer)
- Fixed bug in HoudiniScene which was creating phony children when FlatGeometry names were similar, but not exact
- Fixed bug in SceneCache SOP when loading Groups or CoordinateSystems without a transform
- Preventing segmentation faults when reading a corrupt SceneCache file

#### IECoreGL

- Fixed GLSL shaders to work with GLSL version 120 (OpenGL 2.1)

# 8.0.0-a21

#### IECoreMaya

- Changing base class for DrawableHolder (from MPxLocatorNode to MPxSurfaceShape ) to solve a selection bug.
  Warning: This breaks binary compatibility with any DrawableHolder derived class.


# 8.0.0-a20

#### IECore

- Fixed IECore::Lookup for OS X.
- Fixed SceneCache build problem on OS X.
- Fixed unit test in LinkedSceneTest.py ( testLinkBoundTransformMismatch )

#### IECoreGL

- Fixed IECoreGL::PointsPrimitive crash on OS X.
- Removed IECoreGL/Lights.h.
- Removed IECoreGL/GLUT.h

#### IECoreHoudini

- SceneCache OBJ Parameter Reorganization (will cause warnings in existing scenes. these can be ignored)
- Added functions to HoudiniScene: node() and embedded()
- Added click Selection of GR_CortexPrimitives

#### IECoreMaya

- Added FnSceneShape createChild, extracted from expandOnce.
- Changed interface for MayaScene custom attribute callbacks and added bindings for Python.

#### IECoreNuke

- Fixed bug #4837: "Knobs not found" warning messages.
- Fixed artefacts in LensDistort

# 8.0.0-a19

#### IECore

- Removed incorrect assertions from StreamIndexedIO - they were causing crashes in debug builds.
- ComputationCache is more robust in situations where a call to get() yields a different object than was passed to set().

#### IECoreHoudini

- GEO_CortexPrimitives are now correctly copied and transformed during ObjectMerges.
- TagFilter now prevents unnecessary expansion of SceneCache nodes. In SubNetwork/AllDescendants mode, the tagFilter is used to prevent expansion into branches of the hierarchy that were not requested. For a heavy asset, filtering by a "Proxy" tag was expanding in 25 seconds and creating 22000 nodes. It is now expanding in 3 seconds and creating 3000 nodes.
- SceneCache Xform and Geo nodes now have a tagFilter, and pass it through to matching children during expansion and push. Xfrom still uses it to limit expansion and control visibility. Geo just passes it on to the SOP, which uses it to limit objects loaded.
- Promoted shapeFilter to all SceneCache nodes. SceneCache Xform and Geo just pass it through to the SOP, as with the attributeFilter.
- Added support for reading and writing tags in SceneCaches.
- Optimised SceneCache OBJ expansion time. On a heavy asset, this reduces expansion time from 442.3s (7.38m) to 17.12s.
- Fixed time offset issues caused by Houdini time 0 being at frame 1, whereas it is at frame 0 in Maya, and in SceneInterfaces.

#### IECoreMaya

- Added a flag to the FnSceneShape create so we can directly create a new sceneShape and transform under a given parent. Used when expanding.

#### IECoreNuke

- Fixed a bug in LensDistort that was causing the cache to hold incorrect image data.

#### IECoreGL

- Added ShaderLoader::clear() method, which allows the reloading of GLSL shaders on the fly.
- Added "gl:primitive:selectable" attribute to Renderer.

#### IECoreRI

- Fixed automatic instancing bug caused by having multiple procedurals in the same RIB file.
- Added workaround for 3delight 11.0 in IECoreRI::Renderer::worldEnd - this allows rerendering to work again.

####################################################################################################

# 8.0.0-a18 :

#### IECore

- Fixed sample time ordering bug in SceneCache.
- Fixed transform matrix order in Group.globalTransformMatrix().
- Added a new setTopologyUnchecked method to MeshPrimitive, plus lazy computation of min/maxVerticesPerFace.

#### IECoreGL

-  Fixed bugs in interpretation of "color" attribute in IECoreGL.

#### IECoreMaya

- Fixed a segfault which occured when selecting multiple components of a sceneShape in Maya.
- Fixed maya procedural selection highlighting.

#### IECoreHoudini

- Optimised SceneCache caching time significantly.
- Simplified FromHoudiniGeometryConverter factory functions.
- Added name parameter to ToHoudiniGeometryConverter.
- FromHoudiniGeometryConverters no longer add the name blindData.
- Added nameFilter to FromHoudiniGeometryConverter python factory function.
- HoudiniGeometryConverters now use Objects rather than VisibleRenderables.
- Added FromHoudiniCortexObjectConverter for converting single GU_CortexPrimitives.
- Added ToHoudiniCortexObjectConverter for creating GU_CortexPrimitives.
- Fixed ToHoudiniGeometryConverter bug where it didn't call incrementMetaCacheCount().
- Added FromHoudiniCompoundObjectConverter. This converts multiple GU_CortexPrimitives, maintaining the naming by storing each one in a CompoundObject.
- Added ToHoudiniCompoundObjectConverter.
- Added non-const access to the object in a Geo_CortexPrimitive.
- Removed unecessary Object copy in SceneCache SOP.
- Removed HoudiniScene::readObject hack for CortexObject prims.
- Updated cob/pdv IO to allow conversion of general Objects and not just VisibleRenderables.
- Fixed ToHoudiniGeometryConverter factory function search order.
- Fixed bug when caching hidden OBJs.
- Added interruptibility to SceneCache ROP.
- Added DetailSplitter class for efficiently extracting select bits of geometry from a GU_Detail.
- Reenabled the loading of multiple ieCoreHoudini plugins.

#### IECoreRI

- Added "ri:textureCoordinates" attribute to IECoreRI::Renderer. This maps to a call to RiTextureCoordinates.
- Fixed specification of multiple displays via IECoreRI::Renderer::display().
- Added automatic instancing capabilities to IECoreRI::Renderer.

#### IECoreNuke

- Added support for expressions in LensDistort.

#### IECoreAlembic

- Fixed IECoreAlembic to use GeometricTypedData appropriately (#28).

8.0.0-a17 :

IECoreRI
 - Added support for ri:areaLight parameter to IECoreRI

IECoreHoudini
 - Fixed bug when loading CoordinateSystems in Houdini


8.0.0-a16 :

IECoreMaya
 - Fixed bug in SceneShape compute which prevented drawing on file open/import

IECoreHoudini
 - Added ForceObjects parameter to SceneCache ROP (to force what is expanded and what is a link)
 - Added a ParticleSystem when converting PointsPrimitives to Houdini
 - Fixed point doulbing bug with SceneCache SOP loading a PointsPrimitive
 - Fixed bug when writing multiple frames of re-rooted scenes
 - Fixed HoudiniScene bugs for flattened geometry (SOPs with gaps in the geo hierarchy can now be cached)
 - SceneCache tagFilter supports SceneInterfaces with no tags

8.0.0-a15 :

IECore
 - Added Parameter::setPresets and getPresets.
 - Improved precision of CameraController operations
 - Default ParticleReader uses floats (#69)
 - Fixed MurmurHash bug where empty strings had no effect on a hash

IECoreGL
 - Added Shader::csParameter() for constant time access to "Cs"
 - Fixed bug with superimposed instances
 - Fixed potential bug in Selector::loadIDShader()
 - Fixed state leak for immediate renders
 - Fixed PointsPrimitive selection and coloring
 - Implemented per-vertex Cs for PointsPrimitive.

IECoreMaya
 - Fixed erroneous compute on SceneShape outputObjects
 - Fixed tests for Maya 2014

IECoreHoudini
 - Added a Cache Manager for the Cortex ObjectPool (#40)
 - SceneCache ROP allows caching of un-named top level geo (uses the OBJ node name instead)
 - Fixed time dependency issues with SceneCache SOP and OBJs
 - OBJ SceneCache nodes expose their transform via python expressions (see the Output tab)
 - Expanding and SOP cooking are now interrupt-able using the escape key
 - Improvements for expanding SceneCaches in Houdini
  - Expanded nodes are now connected to the subnet indirect inputs
  - Expanded nodes are placed using Houdini's layout automation
  - File parms channel reference their parent
  - Path parms channel reference their parent (when appropriate)
  - New Push Parms button updates the filters and geometry type throughout the expanded hierarchy (no need to collapse). Note that this does not take hierarchy changes into account, just parameter values.
 - FromHoudiniGroupConverter ignores internal groups
 - Fixed compatibility issues with Houdini 12.1 (introduced in a14)
 - Declared TypeId range

IECoreNuke
 - Added support for TCL expressions on SceneCacheReader
 - Fixed a few bugs with SceneCacheReader

IECoreArnold
 - Fixed TypeId range so it doesn't conflict with IECoreHoudini

IECoreMantra
 - Houdini 12.5 compatibility

8.0.0-a14 :

- IECore :
 - Modified BasicPreset so it works with parameters derived from CompoundParameter
 - Added ObjectPool and ComputationCache classes for providing a unified cache mechanism for cortex objects (used in SceneCache and CachedReader).
 - Removed ModelCache class (SceneInterface and SceneCache replaces that entirely).

- IECoreMaya :
 - Using the newly added GL lambert shader in the maya GL preview.
 - Added geometry snapping to the SceneShape
 - Optimization on the SceneShape by copying previously rendered GL groups at link locations.

- IECoreHoudini :
 - Added support for Cortex loaded geometry in the SceneCache reader.

- IECoreGL :
 - IECoreGL::ToGLTextureConverter option to add missing channels.
 - Removed IECoreGL dependency on GLUT
 - Replaced OpenGL 3 function calls with their 2.1 extensions
 - Added a standard lambert shader to IECoreGL::Shader
 - Fixes in Selector object and making it revert state when destroyed.

- IECoreRI :
 - Deprecated 3delight hack

8.0.0-a13 :

- General :
	- Ubuntu compilation issues.

- IECore :
	- SceneCache changed to store samples index as a IndexedIO::Directory which is loaded once as opposed to a integer value. Improved performance on large environments.
	- Improvements and bug fixes in LinkedScene associated to the usage of tags and the link attribute. The link attributes are now separated and can be queried in readers such as SceneShape to obtain the actual file,location and the time.
	- Adding constructor for InternedString that accepts a signed 64bit integer for quick conversion from numbers to strings. Used in SceneCache.

- IECoreMaya :
	- Several improvements on the SceneShape node (SceneShapeInterface) and bug fixes.

- IECoreGL :
	- Reverting some optimizations done in the convertion of Meshes to IECoreGL which were not really effective.

8.0.0 (up to a12) :

Additions :
* Added IECoreNuke::SceneCacheReader, which allows inspection of scene cache files and the selective display of it's geometry.
* Renderer::Procedural classes must now implement a hash() method, which provides a hash of their input data. This is so renderers that support procedural caching can make use of the hash, allowing entire procedurals to be instanced.
* Added Maya converters for IECore.CoordinateSystem to/from Maya Locators.
* Added the LensModel and StandardRadialLensModel classes to provide a framework for applying or removing lens distortion.
* Added the LensDistortOp which distorts or undistorts an image using a parametric lens model.
* Added the ieLensDistort node to IECoreNuke. The node can apply or remove lens distortion using any of the lens models registered to Cortex.
* Added LinkedScene class, to support scene files that reference (link) to external files with time remapping. The bounding boxes are incorporated in the master scene automatically when writing and when reading the traversal of the whole hierarchy is transparently switching between the files.
* IECoreMaya: ieSceneShape maya node now uses SharedSceneInterfaces, so it's not super slow when you've got a scene with multiple nodes referencing the same file.
* Added SharedSceneInterfaces, which uses an LRU cache so you don't end up opening the same file over and over again
* It's now possible to register FromMayaDagConverters for plugin maya nodes. Added the FromMayaProceduralHolderConverter.
* IECoreHoudini has new OBJ and SOP nodes for reading IECore::SceneCache files, and a ROP for writing them
* Added InternedStringData and InternedStringVectorDataTypes.
* Added IECoreHoudini::HoudiniScene, a SceneInterface for live Houdini scenes.
* Added virtual duplicate() method to IECore::SceneCache, which is used in methods like child() etc, so derived classes can make these methods return instances of themselves
* Added IECoreMaya::MayaScene, a SceneInterface for live Maya scenes.
* Added SceneShape and base class SceneShapeInterface to IECoreMaya for reading IECore::SceneInterface files, SceneShapeUI for drawing. Includes GL preview and output objects, transforms and bounding boxes, template and dag menu.
* Added AlexaLogcToLinearOp and LinearToAlexaLogcOp bindings
* MeshPrimitive::createSphere will create a sphere-like mesh with the same controls as SpherePrimitive, using the divisions argument to control tessellation.

Improvements :

* IECoreMaya: ieSceneShape now supports snapping of Geometry in maya 2013 and above.
* IECoreMaya: ieProceduralHolder now supports zooming in on individual components using the "f" key
* IECoreMaya: ieSceneShape maya node now tells maya its bounding box has changed when you change the file name or scene path
* IECoreMaya::ClassParameterHandler and ClassVectorParameterHandler will only create attributes using 1-plug mode. 4-plug mode is still readable, but will be removed in the future. The ['maya']['compactClassPlugs'] userData is no longer accepted.
* IECoreHoudini SOP_InterpolatedCacheReader now exposes samplesPerFrame and interpolation as parameters, instead of the frameMultiplier hack. fps is stil hidden, though may be exposed in the future.
* IECore::Writer::create() now provides an overload which takes just a filename, allowing a Writer to be created before the object to be written is available.
* The RenderMan display driver is now called "ieDisplay" rather than just "ie", meaning it has the same name as the Arnold display driver, allowing scenes to described in a single manner compatible with both renderers.
* Reworked InternedString to no longer be based on templates - the templating never got used and it just complicated the implementation.
* The ParameterParser now parses -boolParameter flags without additional arguments as True, provided that the parameter default is False.
* MurmurHash now supports the hashing of InternedStrings.
* Using -isystem rather than -I for all dependency includes
* Enabled -Werror for all libraries (and a few -Wno-* only where necessary). Removed PYTHONCXXFLAGS option.
* SLOReader now creates an "ri:orderedParameterNames" blind data entry on the loaded shader, to work around the fact that the Light::parameters() data structure doesn't maintain order.
* CapturingRenderer now implements the light() method, placing IECore::Light objects in the Group state.
* Implemented the IECoreArnold::Renderer::light() method.
* IECoreRI::Renderer now supports setting the hider via setOption().
* IECoreRI::Renderer now groups options by type, outputting each group via a single RiOption call just before worldBegin(). This is necessary because 3delight requires certain options to be specified together in this way ( statistics "endofframe" and "filename" for example ).
* IECoreHoudini uses name attributes by default rather than Houdini groups. Conversion using PrimitiveGroups is still possible using the parameter on the FromHoudiniGroupConverter, but all automated processes will require names.
* IECoreHoudini FromHoudini converters have an attribute filter that can be used to prevent conversion of unnecessary data.
* Primitives provide a hash of their topology in addition to the complete hash (including primitive variables).
* LRUCache class now accepts an optional removalCallback, which is called whenever an item is removed from the cache.
* IECoreHoudini has new ParameterisedHolderInterface and ParameterisedHolder base classes, so we can hold parameterised objects in non-SOP contexts.
* IECoreRI::SLOReader now loads shader annotations, providing them as an "ri:annotations" entry in the shader blind data. It also adds a type hint to distinguish between parameters of type string and parameters or type shader.
* IECore::ParticleReader new parameter to convert primVar names to an appropriate name. Converts original position primVar name returned by derived classes to "P".
* All V[2,3][i,f,d]Data and VectorData is now GeometricTypedData, which extends TypedData by adding an Interpretation value (Numeric, Point, Normal, Vector, Color).
* Primitive constructors that accept position data will force the geometric interpretation to Point. Users are responsible to set correct interpretation when assigning prim vars (including P and N) after construction.
* MatrixMultiplyOp no longer has a mode parameter, and instead uses geometric interpretation to transform the input data appropriately.
* TransformOp now takes a single list of primitive variables to modify, and uses geometric interpretation to transform them appropriately. For backwards compatibility with old files, if P and N are Numeric, they will be converted to the appropriate interpretation and a warning will be issued.
* IECoreMaya FromMayaShapeConverters correctly set the geometric interpretation of points, normals, and velocities.
* IECoreHoudini To/FromHoudini converters correctly set the geometric interpretation of points, normals, and velocities.
* Shader::parametersData() now returns a raw pointer, and provides a const version.
* IECore::FileSequenceParameter, FileSequenceVectorParameter, FrameListParameter can now return the FileSequences/FrameList using a StringData/StringVectorData argument instead of the internal value. To be used in ops doOperate in particular. Checks validity of given data.
* IECoreHoudini ToHoudiniGeometryConverters have an attribFilter parameter to control the which PrimitiveVariables are converted.
* IECoreHoudini ToHoudiniGeometryConverters have a public transferAttribs method so PrimitiveVariables can be converted without effecting topology.
* IECoreHoudini To/FromHoudiniGeometryConverters automatically convert standard attributes between Cortex and Houdini (Pref->rest ; Cs->Cd ; s,t->uv, etc and vice versa). This behaviour can be disabled with a parameter, but is on by default (and hence is used by the file sop and other reader nodes).
* CameraController::dolly() behaviour now produces smoother movement.
* IECoreMaya::ToMayaMeshConverter now using compressed UV arrays matching uv indices to set uv values in addUVSet.
* IECoreMaya::ToMayaMeshConverter and IECoreMaya::FromMayaMeshConverter now supports a custom attribute 'ieMeshInterpolation' on meshes that translate to the interpolation type in the IECore::MeshPrimitive.
* Added DisplayDriver::acceptsRepeatedData(), enabling the ImageDisplayDriver to support progressive rendering and rerendering when used via IECoreRI.
* IECoreRI::ParameterList now accepts V2iData, converting it to RenderMan "integer[2]".
* Added Renderer option "editable", along with editBegin() and editEnd() methods, to allow interactive rerendering functionality to be implemented. These are currently only implemented by IECoreRI::Renderer.
* Switched to Boost Filesystem version 3
* MeshPrimitive::createPlane can create multi-face planes using the divisions argument
* Added MeshPrimitive::max/minVerticesPerFace
* IECoreHoudini supports the ieMeshInterpolation attribute, using it to set the interpolation of converted MeshPrimitives
* IECoreGL caches triangulation conversions for MeshPrimitives
* IECoreHoudini supports reading and writing LinkedScenes (lscc)
* IECoreHoudini and IECoreMaya are able to pass tags from SceneCache readers to the associated live scenes and writers
* LinkedScenes now allow tags to be stored at link locations
* Added Spline->SplineData boost python converter

Bug Fixes :
* Fixed a maya 2013 crash when attempting to use the rotate manipulator that comes up when selecting an ieProceduralHolder component in rotate mode.
* IECoreGL ColorTexture now uses GL_RGB16 as the internal colour format to the glTexImage2D call. This fixes colour banding in subtle gradients and edges with an alpha fade off. GL_RGB16 was chosen as
  it is supported from OpenGl1.1 and earlier graphics cards that don't support it will reduce their bit precision to GL_RGB8. Please see the following document for more details:
  http://developer.download.nvidia.com/opengl/texture_formats/nv_ogl_texture_formats.pdf
* IECore ImageReader and ImageWriter not doing transformation on alpha anymore, A gets filtered out from the channel names given to ColorSpaceTransformOp.
* IECore ColorSpaceTransformOp applies unpremult before channelOp conversion then premult after, as channelOp doesn't deal with unpremultiplication of the colour channels.
* Removed rounding hack in OversamplesCalculator.
* Maya intField created to display IntParameter now has step size set to 1 ( if min or max are set ).  This prevents a warning when creating fields for parameters with max - min less than the default step of 10.
* Preventing segfaults when CompoundData and CompoundObject have items with NULL pointers.
* Preventing segfaults when Parameter's default values are initialized with NULL pointers (or the Python None object).
* ieFilteredAbs corrected to return positive values, ieTurbulence monochrome variant now filtered
* Fixed a problem where it was impossible to kill the renderer in 3delight IPR mode, and therefore impossible to stop an IPR render. See comments above "struct ProceduralData" in include/IECoreRI/private/RendererImplementation.h
* Compatibility for OpenEXR 2.0.0
* Compatibility for Alembic 1.1.2
* Compatibility for PRMan 17
* Compatibility for Boost Filesystem v2 and v3

7.10.2 :

Improvements :

* Added setParameterisedValues() for IECoreHoudini SOPs and FnHolders to sync Houdini node values to IECore::Parameterised objects.

Bug Fixes :

* Fixed crashes caused by calling PrimitiveEvaluator.create( None ) in Python, replacing them with ValueError exceptions.
* Using setParameterisedValues() in the IECoreMantra inject SHOP so parameters with expressions are expanded appropriately.
* IECoreMantra cortexMantraInject SHOP now uses explicit bounds with hscript expressions to read them from the soppath. This fixes a bug where bounds were not being updated properly in ifds made with hbatch.

7.10.1 :

Improvements :

* Using IECoreHoudini SOP_InterpolatedCacheReader in PrimitiveGroup mode will now load Prim and Vertex attribs as well as Point attribs

Bug Fixes :

* In SHWDeepImageReader/Writer, we now composite on write and uncomposite on read. This fixes an issue where deep images converted from mantra were seemingly losing samples.

7.10.0 :

Improvements :

* ParameterParser.serialise accepts an alternate "values" argument, which can be used to avoid parameter validation or to serialise values that aren't held by the parameter.
* Registered ParameterParser serialisation functions should use the new signature func( parameter, value ). The old signature is still supported, but deprecated.
* Added shader support to IECore::CapturingRenderer
* Added setAttribute()/getAttribute() methods to IECore::Group. The latter traverses the group's parents
* IECoreGL::Renderer now ignores shader types with a prefix other than gl: (apart from "surface"), rather than complaining about them.
* IECoreHoudini FnOpHolder and FnProceduralHolder.create() now accept optional parent node and contextArgs parameters. The later should be a kwargs dict from a Houdini UI callback
* IECoreHoudini SOP_InterpolatedCacheReader has a new parameter, GroupingMode, which defaults to the original behaviour. By using PrimitiveGroup mode instead, transform cached objects also transform non-Point attribs (face varying normals for example)
* DeepImageReaders have new worldToCameraMatrix() and worldToNDCMatrix() methods which return the respective matrices.
* DeepImageWriters have new parameters to set the worldToCamera and worldToNDC matrices, and DeepImageConverter reads/writes them appropriately.
* SHW, DTEX, and RAT DeepImageReaders/Writers all support reading/writing worldToCamera and reading worldToNDC. SHW and DTEX support writing worldToNDC. RAT writing worldToNDC is still a todo.

Bug Fixes :

* ToMayaMeshConverter uses the stIndices variable to compress the UVs in the mesh if the variable is available.
* Fixed include guard in ObjectReader.h
* Added workaround for recent NVIDIA driver changes which could cause crashes in IECoreGL::Shader.
* Fixed a bug where writing an IECore::Group to disk then reading it back in again jumbled its state/children up
* Fixed a bug where IECore::CapturingRenderer wrote redundant state into its output when multi threaded procedurals were being used
* Fixed an attribute leaking bug with single threaded procedurals in IECore::CapturingRenderer

7.9.0 :

Additions :

* Added const version of CameraController::getCamera().

* Added ToArnoldConverter::create() factory function.

* Implemented tbb_hasher( const IECore::MurmurHash & ), allowing MurmurHash to be used as a key in tbb::concurrent_hash_map.

* Added IECoreArnold::InstancingConverter class, which can be used to manage a series of conversions from IECore::Primitive to Arnold AtNodes, returning Arnold instances when duplicate geometry is detected.

* IECoreArnold::Renderer now automatically creates instances when identical primitives are rendered repeatedly. This may be controlled using the new "ai:automaticInstancing" attribute.

Bug Fixes :

* Fixed bug in CameraController which could cause crashes for cameras with preexisting transforms, and failure to update transforms correctly after swapping cameras with setCamera().

7.8.0 :

Additions :

* Added an ls() method to IECoreMaya.FnParameterisedHolder, and a _getMayaNodeType() method so it works with derived classes

* Added initial support for mantra.

* Added a new ModelCache class, for reading and writing hierarchical models in a random access fashion, backed by IndexedIO storage. Bounds for every level of the hierarchy are computed automatically during writing. Also added an ABCToMDC op to IECoreAlembic - this allows conversion of Alembic archives to ModelCache format.

Improvements :

* Rewrote CurvesPrimitiveEvaluator::curveLength(), which should now work properly for polylines, return more accurate results for b splines, and not freeze in pathalogical cases

* Added repr() functionality to NullObject and ObjectVector bindings.

* Added CameraController::project() method.

* IECoreArnold::Renderer::shader() now supports the creation of networks of shaders.

7.7.2 :

Bug Fixes :

* Modified behaviour of shouldSave method of ParameterisedHolder, which controls which attributes are saved to file
  - previously:
	* GenericAttributes which would cause crashes skipped
	* everything else forced to always be written
  - now
	* GenericAttributes which would cause crashes skipped
	* attributes in the AttributeNameToParameterMap forced to always be written
    * anything else uses default Maya behaviour ( write only if changed from default )
 ( This was motivated by attributes created by mtoa, which would be ignored if unused on normal Maya objects, but were always saved on Cortex objects, and then caused problems if mtoa was not present on load )

7.7.1 :

Bug Fixes :

* Fixed Bug in MtoA Translator that was initialising shaders on instances when the arnold node was Null

7.7.0 :

Improvements :

* Changed the ClassVectorParameterUI Float and Double parameter's precision to 4 (from 2).

* Bound MurmurHash assignment operator as Python copyFrom() method.

* Added python bindings for IECoreGL ToGLMeshPrimitiveConverter, ToGLCurvesPrimitiveConverter and ToGLPointsPrimitiveConverter.

* Added a ToGLConverter::create() factory method, for automatically creating a converter given an Object.

* The Arnold output driver now supports point and vector pixel types.

* MPlayDisplayDriver now deals with the case where the RGB plane is not the first one.

* Improved IECoreMaya.GenericParameterUI so it now works reasonably with StringParameters with a connectedNodeName value provider and acceptedNodeTypes ui userData.

* Added an IECoreGL::CachedConverter class, which performs conversion from IECore types to IECoreGL types, maintaining an LRUCache of recent conversions.

* Implemented automatic instancing of primitives for the IECoreGL::Renderer - when the same primitive is rendered repeatedly a previously converted GL primitive will be reused rather than performing another conversion. This can yield significant time and memory savings.

* The MtoA procedural translator now supports an attribute called "overrideProceduralShaders" to determine whether or not to use the assigned Maya shader to override any shaders the procedural may apply internally. In the absence of this attribute, only non-default shaders will be applied as overrides.

* The MtoA procedural translator now automatically outputs any shading groups or displacement shaders which are connected as inputs to the procedural in some way (connected to a parameter for instance). This can be useful to allow the procedural to assign maya shaders to the objects it generates, even though those shaders may not be assigned to anything in the Maya scene.

* MtoA Procedural translator now recognises Maya instances of procedurals and generates arnold ginstances as a result

* IECoreArnold::Renderer::shader() now supports shaders of type "displacement" and "ai:displacement", for specifying the disp_map parameter of polymesh and nurbs shapes.

* IECoreArnold::Renderer::setAttribute() now supports attributes of the form ai:nodeType:parameterName for specifying parameter values for shape nodes.

Bug Fixes :

* Fixed bug which prevented the spline editor window for spline parameters in Maya being opened more than once.

7.6.0 :

Improvements :

* changed MtoA Translater to be compatible with versions > 0.18.0

* IECoreArnold::Renderer::shader() now additionally accepts shader names of the form "reference:nodeName", to allow shaders already in an ass file to be referenced by procedurals.

* The IECoreMaya::TransformationMatrixManipulator now draws an optional box if a ["UI"]["manipulatorBox"] user data item is present on the parameter.

* linearObjectInterpolation now supports the interpolation of Primitive classes.

Bug Fixes :

* Fixed crashes caused by null data in PrimitiveVariable::operator==.

7.5.0 :

Additions :

* Added the beginings of Alembic read support in contrib/IECoreAlembic.

Improvements :

* The Arnold output driver now supports the rendering of multiple outputs via a single driver. Channel names are prefixed with the arnold aov name so the may be distinguished.

* The MPlayDisplayDriver now supports multiple output planes, based on grouping channel names with common prefixes.

* Added python binding for the SearchPath copy constructor.

* The ClassLoader class now has a searchPath() method to provide access to the paths used to find classes.

* Refactored IECoreArnold converters to share a ToArnoldShapeConverter base class. Added bindings so that they may be used from python in conjunction with the arnold python bindings. Added a ToArnoldPointsConverter for dealing with points primitives. Added support for converting arbitrary primitive variables into Arnold user parameters.

* IECoreArnold::Renderer::display() now recognises display types such as "tiff", "exr" and "jpeg" directly and maps them to "driver_tiff", "driver_exr" etc. This makes it easier to set up scenes targeting multiple renderers.

Bug Fixes :

* Fixed tumbling in CameraController when pivot is not at the centre of the world.

7.4.0 :

* Added an Options class, for specifying renderer options.

* Added IECoreHoudini.UpdateMode to safely switch hou.updateModes using a python with statement.

* Added MPlayDisplayDriver, for rendering images to MPlay using either RenderMan or Arnold (or anything else which can talk to an IECore.DisplayDriver).

* Added a general purpose IECoreHoudini::MessageHandler.

Improvements :

* ClassVectorParameter now supports IECore.V2fParameters in the header, for the maya UI

* IECoreHoudini GEO_IOTranslator accepts ptc files (if IECoreRI is available), so the file sop can be used to read ptcs.

* Added From/ToHoudiniGeometryConverter bindings to deal with HOM_Geometry directly. This allows hou.Geometry to be read/written when the node is not available (i.e. from within the cook of a Python SOP)

* Added From/ToHoudiniGeometryConverter::supportedTypes() to return a set of IECore:TypeIds with registered converters

* SOP_ParameterisedHolders now expose converter parameters (if applicable) for the parameters that work by node connection

* SOP_ParameterisedHolder and IECoreHoudini.ParmTemplate now support presetsOnly IntParameters

* Added parameters to FromHoudiniGroupConverter which allow the Primitive separation to be done by attribute value rather than by GA_PrimitiveGroup. Default (and therefor the factory function) is by GA_PrimitiveGroup.

* Using the new IECoreHoudini::MessageHandler to redirect IECore messages as SOP errors and warnings when ops and procedurals cook

Bug Fixes :

* Fixed deadlocks in the python LRUCache.

* Fixed bug in ToHoudiniPointsConverter to do with Uniform interpolation parameters

7.3.0:

Improvements :

* Fixed SXRenderer tests to account for new noise algorithm in 3delight.

* ToMayaMeshConverter now converts all UV sets when converting to mesh data (through a plug). Previous behaviour only worked for shapes.

* ToMayaGroupConverter now uses a group's "name" attribute to name the converted transform.

* FnProceduralHolder.convertToGeometry() now removes useless childless transforms.

Bug Fixes :

* ToMayaMeshConverter no longer duplicates the default UV set when converting to a shape.

* Fixed threading bug in LRU cache, possibly leading to a crash if clear() was called while a read was happening

* Fixed bugs with the JPEGImageWriter, DPXImageWriter and CINImageWriter classes where they would segfault when the data window was different to the display window.

* Fixed bugs with the JPEGImageWriter, DPXImageWriter and CINImageWriter classes where the data window they would output was wrong.

Additions :

* Added new 'culling' option to the ieProceduralHolder's display options, so the user can choose back face, front face or no culling

* Added new test cases for JPEGImageWriter, DPXImageWriter and CINImageWriter. The new case tests the writing of images with data windows that are different to the display window.

7.2.0:

Additions :

* Added MeshFaceFilterOp for pruning faces on MeshPrimitives.

* Added a ClampOp, for clamping values in ImagePrimitives.

* Added IECoreArnold::UniverseBlock, for managing AiBegin/AiEnd pairs.

* Added SWAReader, for reading Speed Tree forest files.

* Added IECoreMaya::ToMayaCameraConverter, which supports the same attributes as IECoreMaya::FromMayaCameraConverter

* Added bindings for Imf::TimeCode

* Added IECore::TimeCodeData and TimeCodeParameter

Improvements :

* IECoreMaya::ToMayaSkinClusterConverter has a new parameter to ignore the bindPose node

* IECoreMaya::ClassParameterHandler and ClassVectorParameterHandler have a 1-plug mode and a 4-plug mode to handle the held classes. The 4-plug mode is the default for compatibility, but will be removed completely in Cortex 8. Users can specify ['maya']['compactClassPlugs'] userData to help migrate existing scenes to the 1-plug mode.

* EXRImageReader and EXRImageWriter now handle Imf::TimeCodes if they are present in the exr header or ImagePrimitive blindData, respectively.

Bug Fixes :

* IECoreRI.Renderer now gracefully ignores null values in parameter lists rather than crashing.
* IECoreMaya::ToMayaSkinClusterConverter now catches failures from MDGModifier::doIt(), calls  MDGModifier::undoIt(), and throws.

7.1.3:

Bug Fixes :

* Fixed component bound output bug in maya ProceduralHolder node

7.1.2:

Improvements :

* Added support for uniform primitive variables in IECoreRI::SXRenderer

* IECoreMaya PresetsUI LoadUI organizes the applicable presets by the path they came from

Bug fixes :

* Fixed exceptions when passing 64bit integers from python to MurmurHash.append method.

* Added "PHOTOMETRIC_MINISWHITE" to supported photometric interpretations in IECore::TIFFImageReader, so it can read 3delight's depthmap shadows.

7.1.1:

Bug Fixes :

* Fixed some bugs in the Wrapper/WrapperGarbageCollector code

7.1.0:

Additions :

* Added Alexa V3 Log C colorspace registered on for image reader and writers.

* Added support for writing Color3fVectorData primvars in IECoreRI::PTCParticleWriter

* Added DiskPrimitive

* The IECoreRI.Renderer class uses 3delight's new instance scoping mechanism

Changes :

* Removed deprecated "objectBegin", "objectEnd" and objectInstance"


7.0.0:

Additions :

* Added object filter option to IECore.CapturingRenderer, so you can select the objects you want it to output

* "Convert to Geometry" maya DAG menu option should now respect component selections - ie it only converts selected components

* Added alpha test attributes for IECoreGL::Renderer

* FloatParameter and DoubleParameter now respond to a 'precision' field in their UI userData in maya, allowing you to set the number of decimal places they're displayed at

* Added the MurmurHash class, which implements the Murmur Hash version 3
algorithm.

* All Object derived classes now have a hash() method which can be used to
generate a hash of their contents as an instance of the new MurmurHash class.

* Stubs for the IECore procedurals are now installed in addition to the stubs for the IECore ops.

* Added an ieDisplay nuke node, which accepts incoming renders from RenderMan or Nuke using the existing cortex display drivers.

* Added SHWDeepImageReader and SHWDeepImageWriter which read/write 3delight deep shadows. Note that this is an alpha only format.

* Added HoudiniHeaderGenerator which stores Houdini version, scene name, frame rate, current, start, and end frames in the ObjectWriter headers.

* Added an IECore.DiskPrimitive class.

Improvements :

* IECore.RelativePreset accepts now a compare filter that is a callback for ignoring some of the parameters when doing the diff.

* IECore.loadConfig() now ignores files starting with ~. This avoids errors caused by certain popular text editors saving backup files next to the config file during editing.

* The IECore.loadConfig() localsDict argument has been renamed to contextDict, and is now used as both the locals and globals for the execution of the config files. This works around python's annoying scoping whereby any modules would have to be imported within functions defined in the config files rather than
at the file scope.

* Added python bindings for the various Writer canWrite() methods.

* The Renderer::coordinateSystem() call now creates coordinate systems which are
scoped within attributeBegin()/attributeEnd() blocks. CoordinateSystem instances
can now be given a transform to position them relative to their parent.

* CompoundParameter presets behaviour can now be controlled explicitly using the
adoptChildPresets argument to the constructor.

* Reduced cross-inclusion of headers in TypedObjectParameter.h - this should improve recompilation times a little.

* Added IECoreGL::NameStateComponent::glNameFromName() method to match the existing nameFromGLName() method.

* Added glColor() functions to IECoreGL/GL.h.

* Factored out much of the IECoreGL::Scene::select() functionality into a new IECoreGL::Selector class, which allows selection to be performed easily even without a Scene.

* IECoreGL::Scene::select() now fills a vector<HitRecord> rather than a list<HitRecord>, as vector is better suited to this purpose.

* Added missing binding for IECoreGL::State::bindBaseState() method.

* The default constructors for TypedData<Imath::Vec> and TypedData<Imath::Color> now initialise all components to zero. The default constructors for TypedData<LineSegment> now initialise a unit length line in the positive X axis. Before the data was uninitialised, which could cause test failures in TestObject.testCopy() if the data happened to contain NaNs. Please note that the underlying Imath::Vec and IECore::LineSegment constructors remain unchanged and will not initialise the data - this is for performance reasons.

* The IECoreGL::TextureLoader class can now load greyscale as well as colour textures. It now uses the ToGLTextureConverter class internally so supports all types supported by that class.

* Added python bindings for IECoreGL::Font and IECoreGL::FontLoader.

* Added Font::renderSprites() and Font::renderMeshes() methods, which make it possible to render text without constructing an IECoreGL::TextPrimitive.

* IECore.Enum values can be instantiated from the appropriate string as well as the int.

* IECore.Enum has a classmethod values() which returns a tuple of the available values.

* SOP_InterpolatedCacheReader has a new transformAttribute parm which can be used to transform the points based on a TransformationMatrix in the cache.

* ToHoudiniGeometryConverter creates point and prim groups based on the blindData name, FromHoudiniGeometryConverter creates the blindData name based on prim group name, and To/FromHoudiniGroupConverters use their base classes to manipulate prim group names

* Added V2iVectorParameter and V3iVectorParameter.

* The ParameterParser accepts a new boolean parameter user data entry ["parser"]["acceptFlags"] for StringVectorParameters. This allows strings starting with "-" to be passed. This is only useful for the last parameter parsed, as it will place all remaining arguments into the StringVectorParameter.

* The IECoreRI.Renderer class uses 3delight's new instance scoping mechanism to
place all instances created with instanceBegin() at the world scope. This allows procedurals to create instances to be used in other procedurals.

Changes :

Removed deprecated "objectBegin", "objectEnd" and objectInstance" commands from IECoreRI.Renderer. Use the instanceBegin(), instanceEnd() and instance() methods instead.

Bug Fixes :

* ClassParameter.setClass() method was not taking advantage of a matching already loaded class if the searchPathEnvVar was None.

* Fixed a bug whereby EXRImageWriter::EXRImageWriter() didn't create parameters that EXRImageWriter::EXRImageWriter( image, fileName ) did.

* The renderman python procedural is now built with the correct extension (.dylib) on OS X.

* Fixed problem with using the ClientDisplayDriver on ipv6 enabled machines.

* IECoreNuke and IECoreArnold now build successfully on OS X.

* Fixed bugs in the arnold output driver which meant that exceptions in cortex display drivers went uncaught and became aborts when reaching arnold. Fixed further bugs where failure to create a cortex display driver would yield later
segmentation faults rather than a graceful error report.

* Fixed bug which made it impossible to output more than one display from IECoreArnold::Renderers.

* Fixed threading issue with IECore.ClassLoader()

* Fixed initialization issue with FromMayaMeshConverter uvs.

Cortex 6.4.3
============

Improvements :

* Implemented checkboxes in maya menus
* Added a flag, "appendToExistingMenu", to IECoreMaya.Menu,createMenu(), so you can append a menu to an existing menu, rather than adding
  it as a sub menu

Cortex 6.4.2
============

Improvements :

* Implemented uniform array parameters in IECoreGL shaders (accepting IntVectorData, FloatVectorData, etc)

Bug Fixes :

* Fixed build issue that prevented saved options files from being used
* Fixed build issue that gave the test renderman display driver the wrong file suffix on mac
* Bound many missing canRead() functions for the Reader subclasses, and added a test case to make sure all future bindings will include them.

Cortex 6.4.1
============

Bug Fixes :

* Fixed a bug which prevented user attributes from being passed correctly to multithreaded procedurals in the IECoreGL::Renderer.

Cortex 6.4.0
============

Improvements :

* Added IECoreMaya.DateTimeParameterHandler

Bug Fixes :

* Fixed a bug in python/IECoreMaya/PresetsOnlyParameterUI.py, which was preventing the ui updating for V2f, V3f and other vector type parameters

Cortex 6.3.1
============

Additions :

Improvements :

* Fixed some compiler warnings emitted by GCC 4.4.4.

* IECoreMaya.StringParameterUI now supports glob style expressions in the Objects->Select context menu item.

* Tweaked ieArray* RSL functions to work around issues with 3delight 10.0.7.

Changes :

* Deprecated ieArrayLength() function in RSL ArrayAlgo.h - use arraylength() instead.

Bug Fixes :

Cortex 6.3.0
============

Additions :

* Added DeepImageReader abstract base class for reading deep images. DeepImageReader::readPixel returns an individual DeepPixel, while DeepImageReader::read returns a composited ImagePrimitive without depth information.

* Added DeepImageWriter abstract base class for writing deep images.

* Added IECoreHoudini::RATDeepImageReader to read Houdini deep texture files. Supports Deep Camera Maps and Deep Shadow Maps.

* Added IECoreHoudini::RATDeepImageWriter to write Houdini deep texture files.

* Added DeepImageConverter to convert from one deep image format to another.

* Added initial support for Arnold.

Improvements :

Changes :

Bug Fixes :

Cortex 6.2.0
============

Additions :

* Added DeepPixel to represent arbitrary channel data stored at varying depths in space.

Changes :

* Added face-varying color conversion in FromMayaMeshConverter.

* Added custom space input to FromMayaTransformConverter.

* Allocated a TypeId range for use in the Gaffer project.

* Changed minSequenceSize to 1 for FileSequenceParameters in common sequence utility ops (Sequence*Op)

Bug fixes :

* SOP_ParameterisedHolder properly handles the GIL before using the CapturingRenderer.

* Fixed crashes which could be triggered by passing a python unicode string with non-ascii characters into Cortex.

* Fixed bug with conversion of normals in ToMayaMeshConverter.

Cortex 6.1.2
============

Additions :

* IECoreGL::Renderer class now supports the "gl:visibility:camera" attribute.

Bug fixes :

* PointDistributionOp density parameter no longer accepts negative values.

* RelativePreset was creating unnecessary data for empty class parameters and not working if there was no differences at all.

* Fixed a maya 2010 crash triggered by deep levels of nesting in parameter uis.

* Fixed a bug in the IECoreRI::Renderer, causing incorrect results when querying projection matricies

Cortex 6.1.1
============

Additions :

* Added support in python for the minSequenceSize argument for IECore.findSequence function. Defaults to 2, which was the original behaviour.

Improvements :

Changes :

* SOP_InterpolatedCache attempts to account for doubled endpoints from CurvesPrimitives when applying a cache.

Bug Fixes :

* ToHoudiniCurvesConverter returns false rather than a seg fault when asked to convert and un-buildable curve.

Cortex 6.1.0
============

Additions :

* Added RelativePreset class. Can be used to apply parameter changes on similar Parameterised objects.

* Added PkgConfig configuration file, generated on install.

Improvements :

* Improved the appearance of parameter user interfaces in Maya 2011 and 2012.

* MeshMergeOp will merge PrimitiveVariables from either the input mesh or the secondary mesh. It also optionally ignores variables that don't exist on both meshes or fills the data with default values.

Changes :

Bug Fixes :

* Fixed build bug which meant that the binary component of the IECoreNuke python module wasn't built unless "install" was in the SCons command.

* Fixed bug in IECoreMaya::MeshParameterHandler which prevented saved files containing MeshParameters from loading properly.

* IECoreMaya.FnParameterisedHolder.parameterPlug() now returns a null MPlug if no plug exists, rather than erroring.

Cortex 6.0.0
============

Additions :

* New Nuke plugin provides hosting of procedurals and ops within Nuke.

* LineSegmentParameters provide a convenient means of specifying lines to Parameterised classes, and are represented in Nuke as a line which can be manipulated in the viewport.

* StringAlgo.h now provides useful isUpperCase and isLowerCase functions.

* BoxOps.h now provides boxMajorAxis and boxSplit functions, the latter of which is used to bind an IECore.Box*.split() method.

* MotionBlock class provides a convenient means of managing Renderer::motionBegin/motionEnd blocks in an exception-safe way.

* PointDistributionOp provides an easy way to evenly distribute points on a mesh.

* New class DataInterleaveOp provides a means of interleaving data from several VectorTypedData inputs into a single VectorTypedData output. See test/IECore/DataInterleaveOpTest.py for examples.

* New class DataConvertOp provides a means of converting between different numeric VectorTypedData types, with scaling performed by ScaledDataConversion. See test/IECore/DataConvertOpTest.py for examples.

* New maya UI handler called NotesParameterUI, for displaying a StringParameter with its "typeHint" set to "note". This displays the string as a label in the attribute editor, with an edit button next to it which launches an edit dialog.

* Added PNGImageReader.

* Added ieRayConeIntersection to RayAlgo.h

Improvements :

* DisplayDriver factory mechanism has been improved, and support for mapping RenderMan displays to IECore::DisplayDrivers has been added to IECoreRI. Images can now be rendered direct to memory using 3delight with no intermediate rib or image files. A display driver dso for 3delight also allows images to be rendered from rib to any cortex DisplayDriver. See test/IECoreRI/DspyTest.py for examples.

* AttributeCache now performs validation of names for headers, objects and attributes.

* IECoreMaya::ToMayaImageConverter and IECoreMaya::FromMayaImageConverter now have python bindings. See test/IECoreMaya/ImageConverterTest.py for examples.

* IECoreMaya::FromMayaStringPlugConverter now has python bindings.

* ToMayaPlugConverter can now set plugs which expect IECoreMaya::ObjectData values.

* IECoreGL::Renderer provides control over GL_DEPTH_TEST with the new gl:depthTest attribute.

* IECoreRI now accepts V3fData and V3fVectorData as values for shader parameters of type float[3]. This is handy for passing vectors when you do not want the automatic object->current transformation to be performed.

* Improved performance of IECoreGL::Renderer text rendering when using many renderers - they can now share a cache of fonts rather than each recomputing their own copies.

* Added IECore::RunTimeTyped::inheritsFrom() overloads taking two arguments, to simplify querying whether or not one class derives from another.

* IECoreMaya.ParameterUI.create() now falls back to uis registered without a typeHint if a ui with the specific typeHint can't be found.

* The IECore.CamelCase functions are now implemented in C++ in IECore/CamelCase.h. This makes them available in both C++ and Python.

* IECoreHoudini.TemporaryParameterValues now handles unexpanded strings and expressions correctly.

* IECoreMaya.FnOpHolder.create() now loads the default version for the op if no version is specified.

* Maya plugin now has a menu for the creation of nodes holding procedurals and ops. This can be disabled by setting the IECOREMAYA_DISABLE_MENU environment variable to 1. Similar menus can be constructed using the functions in IECoreMaya.Menus.

* ClassParameterHandler::doRestore() and ClassVectorParameterHandler::doRestore() are now proper virtual functions overriding a new ParameterHandler::doRestore() method. Clients simply call the ParameterHandler::restore method now rather than downcasting to the Class*ParameterHandler types first. Other ParameterHandlers may also implement doRestore() behaviour if necessary. This tidies up code which was added with the constraint of maintaining binary compatibility with major version 5.

* LRUCache is now usable directly from Python rather than just from C++. See test/IECore/LRUCacheTest.py for an example. LRUCache should also now be usable with boost::shared_ptr as the pointer type.

* TypeTraits.h has new IsNumericBasedVectorTypedData, IsNumericBasedSimpleTypedData and is IsNumericBasedTypedData classes. These help when using despatchTypedData with a functor which operates using TypeData::baseReadable() and TypedData::baseWritable().

* Hiding implementation details from ClientDisplayDriver and DisplayDriverServer. Also switching from boost::thread to tbb::thread.

* Numeric VectorTypedData classes now have a toString() method bound in python, allowing access to the raw data as a byte string. This is particularly useful if using the DataInterleaveOp for preparing images to be passed to ui toolkits like PyQt.

* Houdini parameters on a SOP_ParameterisedHolder now use the corresponding Cortex parameter descriptions as help documentation.

* IECoreMaya.StringParameterUI now supports the additional values "parent", "parentFull" and "parentPartial" for the ["UI"]["acceptedNodeNameFormat"] user data key.

* IECoreMaya.FromMayaCameraConverter can now be constructed directly in Python, in addition to the previous ability to create one using the FromMayaDagNodeConverter.create() factory method.

* The iePython renderman procedural now prevents python from registering the signal handler which turns Ctrl-C into a python KeyboardInterrupt exception.

* IECoreRI::Renderers now share a single shader cache unless they have been given non-default searchpaths. This can significantly reduce time spent loading shaders if many shaders are loaded by many procedurals.

* The IECoreRI::SLOReader now reads parameters of type shader and shader[], adding StringData and StringVectorData objects to Shader::parameters respectively.

* Added support for installing a pkgConfig configuration file in $INSTALL_PREFIX/lib/pkgconfig. This can be used to simplify the process of building against Cortex.

* The CapturingRenderer accepts the attribute "cp:procedural:reentrant" to decide whether or not to render procedurals on multiple threads.

Changes :

* Removed deprecated methods from InterpolatedCache - all queries now specify a frame, allowing efficient sharing of one cache among multiple threads.

* Removed deprecated methods classParameterModificationContext, setClassParameterClass and setClassVectorParameterClasses from IECoreMaya.FnParameterisedHolder. The parameterModificationContext method should be used instead.

* Removed deprecated IECore.initializeLog function - a FilteredMessageHandler created based on IECORE_LOG_LEVEL is automatically created now anyway.

* PrimitiveEvaluator queries require raw pointers to the PrimitiveEvaluator::Result rather than references to smart pointers.

* ClassVectorParameter now copies the userData over for each of its classes, so that if you set self.parameters().userData() in the constructor of any of the classes it contains, this info is now copied over.

* ClassLoader now prints a warning on load if the class didn't register as RunTimeTyped.

* Removed obsolete ProceduralTypeId from TypeId python bindings.

* FromHoudiniPolygonsConverter returns an empty MeshPrimitive (rather than throwing an exception) if there are no polygon vertices in the GU_Detail.

* Exposed the minSequenceSize parameter of IECore.ls() to SequenceLsOp

* SOP_InterpolatedCacheReader returns an empty GU_Detail and a warning when the cache is missing, rather than an error.

Bug fixes :

* Fixed crashes caused by using SxRenderer with texture lookup shaders in multiple threads.

* TriangulateOp no longer changes the mesh interpolation.

* IECoreRI::GXEvaluator no longer crashes when zero length arrays are passed to the evaluate() method.

* Fixed bug which caused results from the wrong face to be returned when using the GXEValuator s,t based query.

* Fixed bugs which prevented NukeFileExaminer working with spaces in filenames or with Nuke's new # based padding syntax.

* Fixed bug which caused SequenceLsOp to perform modificationTime comparisons in the wrong timezone.

* CameraController::unproject now actually works.

* Fixed bugs which meant that RunTimeTyped::typeNameFromTypeId( RunTimeTypedTypeId ) and RunTimeTyped::typeIdFromTypeName( "RunTimeTyped" ) returned incorrect results.

* Fixed a long standing bug which meant that the various FromMaya*Converter::create() functions wouldn't always return the same type of converter. As an additional benefit converters are matched against the base classes of the types they return, making it possible to request a result type of Primitive from a mesh and have the FromMayaMeshConverter be considered as a match.

* Fixed bugs which meant that the RunTimeTyped methods of python classes derived from some Parameter types would not function correctly.

* Fixed IECoreNuke::CurveLookup to be compatible with Nuke 6.2.

* Fixed bug in DPXImageWriter and CINImageWriter to prevent color "wrap around" when the intensities are higher than what these formats can represent ( > 13 ).

* Fixed crash when calling Parameter.valueValid( None ) in Python or Parameter::valueValid( 0 ) in C++.

* Fixed bug in IECore.Enum.__hash__, whereby the type of the Enum wasn't taken into account and values from distinct Enums would regularly hash equal.

* Fixed a bug which could cause crashes and erroneous python error reports when a python class subclassing a c++ class didn't provide an override for a method which was not directly bound (for instance the protected doRender() method of ParameterisedProcedural).

* Fixed a bug which prevented the attribute range in maya being set correctly when the minimum or maximum value was removed from a NumericParameter.

* Fixed plugin load error caused by ieProceduralHolderUI.mel in Maya 2012.

* Worked around Maya problem which prevented OpHolder values being computed properly when scenes were first loaded.

* ToHoudiniGroupConverter now accounts for transforms on the groups and applys them to the children.

* SOP_ToHoudiniConverter properly handles the GIL before using the CapturingRenderer.
