{
    channel DynamicLoad2 {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "import IECore, IECoreHoudini

# get our procedural node
procedural = hou.node( chsop(\"../procedural\") )
className = procedural.parm(\"__className\").eval()
version = int(procedural.parm(\"__classVersion\").eval())

# create a function set and get our parameterised object
fn = IECoreHoudini.FnProceduralHolder( procedural )
parameterised = fn.getParameterised()

# get parameters from procedural
parms = \"\"
if parameterised and not evalParm(\"../disableparms\"):
    parms = IECore.ParameterParser().serialise( parameterised.parameters() )

# get any extra args
extraargs = evalParm(\"../extraargs\").strip()
if extraargs!=\"\":
    parms = parms + eval(extraargs)

# create our delayed load command string
delayedLoadCmd = 'IECoreRI.executeProcedural( \"%s\", %d, %s )' % (className, version, parms)
return delayedLoadCmd" language = python }
    }
    channel riproc_soppath {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "bboxsop = chsop( \"../procedural\" )
if ch(\"../bboxmode\")==1:
    bboxsop = chsop( \"../boundsop\" )
return bboxsop" language = python }
    }
  }
