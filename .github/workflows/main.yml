name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - '*_maintenance'
  pull_request:
    branches:
      - master
      - '*_maintenance'
  release:
      types: [published]

jobs:

  build:

    strategy:

      # Don't cancel other jobs in the build matrix if one job fails.
      fail-fast: false

      matrix:

        # Rather than generate all permutations of various settings,
        # we want to explicitly list each of the variants we want to
        # test. We can use `name` to declare the names of our variants,
        # and then use `include` to define their settings.

        name: [
          linux-python2,
          linux-python2-debug,
          linux-python3,
          macos-python2,
          windows-python2
        ]

        include:

          - name: linux-python2
            os: ubuntu-16.04
            buildType: RELEASE
            containerImage: gafferhq/build:1.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/3.0.0a2/gafferDependencies-3.0.0-Python2-linux.tar.gz
            tests: testCorePython testScene testImage testAlembic testUSD testVDB testArnold testAppleseed
            publish: true

          - name: linux-python2-debug
            os: ubuntu-16.04
            buildType: DEBUG
            containerImage: gafferhq/build:1.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/3.0.0a2/gafferDependencies-3.0.0-Python2-linux.tar.gz
            tests: testCorePython testScene testImage testAlembic testUSD testVDB testArnold testAppleseed
            publish: false

          - name: linux-python3
            os: ubuntu-16.04
            buildType: RELEASE
            containerImage: gafferhq/build:1.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/3.0.0a2/gafferDependencies-3.0.0-Python3-linux.tar.gz
            tests: testCorePython testScene testImage testAlembic testUSD testVDB testArnold testAppleseed
            publish: true

          - name: macos-python2
            os: macos-10.15
            buildType: RELEASE
            containerImage:
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/3.0.0a2/gafferDependencies-3.0.0-Python2-osx.tar.gz
            # `testArnold` currently omitted due to problems loading `libai.dylib` on MacOS workers (possible SIP issue),
            # and `testAppleseed` due to clashes with system image IO frameworks.
            tests: testCorePython testScene testImage testAlembic testUSD testVDB
            publish: true

          - name: windows-python2
            os: windows-2019
            buildType: RELEASE
            options: .github/workflows/main/options.windows
            dependenciesURL: "https://github.com/hypothetical-inc/gafferDependencies/releases/download/2.1.1/gafferDependencies-2.1.1-Python2-windows.zip"
            publish: false

    runs-on: ${{ matrix.os }}

    container: ${{ matrix.containerImage }}

    steps:

    - uses: actions/checkout@v2

    - name: Setup python (Windows)
      # Revert to Python 2.7 on Windows, for running
      # things like `installDependencies.py`.
      uses: actions/setup-python@v1
      with:
        python-version: 2.7
      if: runner.os == 'Windows'

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        sdk: 10.0.17763.0

    - name: Install toolchain (Windows)
      run: python -m pip install scons
      if: runner.os == 'Windows'

    - name: Install toolchain (MacOS)
      # Prefer `pip install` because it is faster
      # than `brew install`.
      run: sudo pip3 install scons==4.0.1
      if: runner.os == 'macOS'

    - name: Install toolchain (Linux)
      run: |
        echo /opt/rh/devtoolset-6/root/bin >> $GITHUB_PATH
      if: runner.os == 'Linux'

    - name: Install Python Modules
      run: |
        python --version
        pip install PyJWT==1.7.1 PyGitHub==1.45

    - name: Set Custom Variables
      run: |
        .github/workflows/main/setBuildVars.py
      env:
       GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       CORTEX_BUILD_VARIANT: ${{ matrix.name }}
      shell: bash

    - name: Install dependencies
      # The `$GITHUB_ENV` shenanigans creates an environment variable
      # containing the hash of the archive, for use in the cache key
      # below.
      run: |
        echo CORTEX_DEPENDENCIES_HASH=`python config/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.CORTEX_BUILD_NAME }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
      shell: bash

    - name: Install renderers
      run: |
        ./.github/workflows/main/installArnold.sh
        ./.github/workflows/main/installDelight.sh
        echo ARNOLD_ROOT=$GITHUB_WORKSPACE/arnoldRoot >> $GITHUB_ENV
        echo DELIGHT=$GITHUB_WORKSPACE/3delight >> $GITHUB_ENV
      shell: bash
      if: runner.os != 'Windows'

    - name: Cache
      uses: actions/cache@v1
      with:
        path: sconsCache
        key: ${{ runner.os }}-${{ matrix.containerImage }}-${{env.CORTEX_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.containerImage }}-${{env.CORTEX_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-

    - name: Build
      run: |
       scons -j 2 install BUILD_TYPE=${{ matrix.buildType }} OPTIONS=${{ matrix.options }} CXXSTD=c++14 BUILD_CACHEDIR=sconsCache

    - name: Test
      run: |
        scons ${{ matrix.tests }} BUILD_TYPE=${{ matrix.buildType }} OPTIONS=${{ matrix.options }} CXXSTD=c++14 BUILD_CACHEDIR=sconsCache
      # We have some work to do before we can run the tests
      # successfully on Windows. Until then, we satisfy ourselves
      # with checking that it at least _builds_.
      if: runner.os != 'Windows'

    - name: Build Package
      run: |
       tar -czf ${{ env.CORTEX_BUILD_NAME }}.tar.gz ${{ env.CORTEX_BUILD_NAME }}
      if: matrix.publish

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.CORTEX_BUILD_NAME }}
        path: ${{ env.CORTEX_BUILD_NAME }}.tar.gz
      if: matrix.publish

    - name: Publish Release
      run: |
        ./.github/workflows/main/publishRelease.py --archive ${{ env.CORTEX_BUILD_NAME }}.tar.gz --repo ${{ github.repository }} --releaseId ${{ env.CORTEX_GITHUB_RELEASEID }}
      if: matrix.publish && env.CORTEX_GITHUB_RELEASEID != '' && runner.os != 'Windows'

      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Limit cache size
      run: python ./.github/workflows/main/limitCacheSize.py
