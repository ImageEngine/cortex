name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'RB-*'
  pull_request:
    branches:
      - main
      - 'RB-*'
  release:
      types: [published]

jobs:

  build:

    strategy:

      # Don't cancel other jobs in the build matrix if one job fails.
      fail-fast: false

      matrix:

        # Rather than generate all permutations of various settings,
        # we want to explicitly list each of the variants we want to
        # test. We can use `name` to declare the names of our variants,
        # and then use `include` to define their settings.

        name: [
          linux-python2,
          linux-python2-debug,
          linux-python3,
          macos-python2
        ]

        include:

          - name: linux-python2
            os: ubuntu-20.04
            buildType: RELEASE
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/5.0.0a3/gafferDependencies-5.0.0a3-Python2-linux.tar.gz
            tests: testCore testCorePython testScene testImage testAlembic testUSD testVDB testAppleseed
            publish: true

          - name: linux-python2-debug
            os: ubuntu-20.04
            buildType: DEBUG
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/5.0.0a3/gafferDependencies-5.0.0a3-Python2-linux.tar.gz
            tests: testCore testCorePython testScene testImage testAlembic testUSD testVDB testAppleseed
            publish: false

          - name: linux-python3
            os: ubuntu-20.04
            buildType: RELEASE
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/5.0.0a3/gafferDependencies-5.0.0a3-Python2-linux.tar.gz
            tests: testCore testCorePython testScene testImage testAlembic testUSD testVDB testAppleseed
            publish: true

          - name: macos-python2
            os: macos-10.15
            buildType: RELEASE
            containerImage:
            options: .github/workflows/main/options.posix
            dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/5.0.0a3/gafferDependencies-5.0.0a3-Python2-osx.tar.gz
            # `testAppleseed` currently omitted due to clashes with system image IO frameworks.
            tests: testCore testCorePython testScene testImage testAlembic testUSD testVDB
            publish: true

    runs-on: ${{ matrix.os }}

    container: ${{ matrix.containerImage }}

    steps:

    - uses: actions/checkout@v2

    - uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        sdk: 10.0.17763.0

    - name: Install toolchain (Windows)
      run: python -m pip install scons
      if: runner.os == 'Windows'

    - name: Install toolchain (MacOS)
      # Prefer `pip install` because it is faster
      # than `brew install`.
      run: |
        sudo pip3 install scons==4.0.1
        # Brew installs all manner of headers into `/usr/local/include`, including
        # OpenEXR and Imath versions that conflict with our own. We can't stop Clang
        # finding them because Clang is hardcoded to look in `/usr/local/include`
        # _before_ anything we specify with `-isystem`, despite documentation to the
        # contrary. So we nuke the headers.
        rm -rf /usr/local/include/*
      if: runner.os == 'macOS'

    - name: Install toolchain (Linux)
      run: |
        # The Docker container configures bash shells such that they enable the
        # software collections we want. If we could set GitHub's
        # `defaults.run.shell` to `bash` then all our build steps would pick up
        # this environment automatically. But we can't do that because it
        # breaks the build on Windows, and we can't configure a different shell
        # per platform because GitHub won't allow it. But we can run _this_
        # Linux-only step in bash, and transfer the environment out to be used
        # in later steps.
        echo $PATH > $GITHUB_PATH
        echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux'

    - name: Install Python Modules
      run: |
        python --version
        pip install PyJWT==1.7.1 PyGitHub==1.45

    - name: Set Custom Variables
      run: |
        .github/workflows/main/setBuildVars.py
      env:
       GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       CORTEX_BUILD_VARIANT: ${{ matrix.name }}
      shell: bash

    - name: Install dependencies
      # The `$GITHUB_ENV` shenanigans creates an environment variable
      # containing the hash of the archive, for use in the cache key
      # below.
      run: |
        echo CORTEX_DEPENDENCIES_HASH=`python config/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.CORTEX_BUILD_NAME }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
      shell: bash

    - name: Install 3Delight
      run: |
        python ./.github/workflows/main/installDelight.py
        echo DELIGHT=$GITHUB_WORKSPACE/3delight >> $GITHUB_ENV
      shell: bash

    - name: Cache
      uses: actions/cache@v1
      with:
        path: sconsCache
        key: ${{ runner.os }}-${{ matrix.containerImage }}-${{env.CORTEX_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.containerImage }}-${{env.CORTEX_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-

    - name: Build
      run: |
       scons -j 2 install BUILD_TYPE=${{ matrix.buildType }} OPTIONS=${{ matrix.options }} CXXSTD=c++14 BUILD_CACHEDIR=sconsCache

    - name: Test
      run: |
        scons ${{ matrix.tests }} BUILD_TYPE=${{ matrix.buildType }} OPTIONS=${{ matrix.options }} CXXSTD=c++14 BUILD_CACHEDIR=sconsCache
      env:
        IECORE_RTLD_GLOBAL: 0

    - name: Build Package
      run: |
       tar -czf ${{ env.CORTEX_BUILD_NAME }}.tar.gz ${{ env.CORTEX_BUILD_NAME }}
      if: matrix.publish

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.CORTEX_BUILD_NAME }}
        path: ${{ env.CORTEX_BUILD_NAME }}.tar.gz
      if: matrix.publish

    - name: Publish Release
      run: |
        ./.github/workflows/main/publishRelease.py --archive ${{ env.CORTEX_BUILD_NAME }}.tar.gz --repo ${{ github.repository }} --releaseId ${{ env.CORTEX_GITHUB_RELEASEID }}
      if: matrix.publish && env.CORTEX_GITHUB_RELEASEID != '' && runner.os != 'Windows'

      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Limit cache size
      run: python ./.github/workflows/main/limitCacheSize.py
