##########################################################################
#
#  Copyright (c) 2007-2012, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of Image Engine Design nor the names of any
#       other contributors to this software may be used to endorse or
#       promote products derived from this software without specific prior
#       written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import os
import sys
import os.path
import IEEnv
import re
import copy

def getOption( name, default ) :

	import sys
	result = default
	for a in sys.argv:
		if a[:len(name)+1]==name+"=" :	
			result = a[len(name)+1:]

	return result

# decide what compiler/app we're targeting. we either pass COMPILER_VERSION, COMPILER and PYTHON_VERSION
# to do a straight install in /software/tools or we pass an APP and APP_VERSION pair
# to do an install in /software/tools/app/appVersion - in this case the compiler and settings
# are dictated by the application.

platform = IEEnv.platform()

compiler = getOption( "COMPILER", None )
compilerVersion = getOption( "COMPILER_VERSION", None )
pythonVersion = getOption( "PYTHON_VERSION", None )
targetApp = getOption( "APP", None )

# get cortex config information from the registry. if we have setting specific to this platform then use them, otherwise
# fall back to the generic settings for this major version.
cortexReg = IEEnv.registry["libraries"]["cortex"]["7"].get( platform, IEEnv.registry["libraries"]["cortex"]["7"] )

tbbVersion = cortexReg["tbbVersion"]
if targetApp :
	
	if targetApp not in ( "nuke", "maya", "houdini" ) :
		raise RuntimeError( "Check config logic applies to the new app and remove this exception." )
	
	if (compiler or compilerVersion) :
		raise RuntimeError( "Must specify only one of COMPILER or APP" )
		
	if pythonVersion :
		raise RuntimeError( "Must specify only one of PYTHON_VERSION or APP" )
	
	targetAppVersion = getOption( "APP_VERSION", os.environ.get( targetApp.upper() + "_VERSION" ) )
		
	targetAppReg = IEEnv.registry["apps"][targetApp][targetAppVersion][platform]
	compiler = targetAppReg["compiler"]
	compilerVersion = targetAppReg["compilerVersion"]
	openEXRVersion = targetAppReg.get( "OpenEXRVersion", cortexReg["OpenEXRVersion"] )
	glewVersion = targetAppReg.get( "glewVersion", cortexReg["glewVersion"] )
	pythonVersion = targetAppReg["pythonVersion"]
	boostVersion = targetAppReg.get( "boostVersion", cortexReg["boostVersion"] )
	targetAppMajorVersion = targetAppReg.get( "majorVersion", targetAppVersion )
else :
	if not compiler :
		compiler = IEEnv.registry["platformDefaults"][platform]["compiler"]
	if not compilerVersion :
		compilerVersion = IEEnv.registry["platformDefaults"][platform]["compilerVersion"]
	if not pythonVersion :
		pythonVersion = cortexReg["preferredPythonVersion"]
	openEXRVersion = cortexReg["OpenEXRVersion"]
	glewVersion = cortexReg["glewVersion"]
	tbbVersion = cortexReg["tbbVersion"]
	boostVersion = cortexReg["boostVersion"]
	
# get the compiler location using the registry
compilerReg = IEEnv.registry["compilers"][compiler][compilerVersion][platform]

# We need to set these so that ENV_VARS_TO_IMPORT can supply the correct environment to the scons test environments
os.environ["COMPILER"] = compiler
os.environ["COMPILER_VERSION"] = compilerVersion

CXX = os.path.join( compilerReg["location"], compilerReg["bin"] )

m = re.compile( "^([0-9]+)\.([0-9]+)\.([0-9]+)$" ).match( compilerVersion )
if not m:
	raise RuntimeError( "Cannot determine compiler version" )
	
compilerMajorVersion, compilerMinorVersion, compilerPatchVersion = m.group( 1, 2, 3 )
compilerVersionInt = int(compilerMajorVersion) * 100 + int(compilerMinorVersion) * 10 + int(compilerPatchVersion)

# figure out the suffix for boost libraries
boostVersionSuffix = "-mt-" + boostVersion.replace( ".", "_" )
while boostVersionSuffix.endswith( "_0" ) :
	boostVersionSuffix = boostVersionSuffix[:-2]

debug = getOption( "DEBUG", False )
CXXFLAGS = [ '-pipe', '-Wall' ]
if not IEEnv.platformOS().startswith( "osx" ) :
	CXXFLAGS += [ '-pthread' ]
	
if debug :

	CXXFLAGS += [ "-g" ]

	withAsserts = True

else :

	withAsserts = False
		
	# "-fvisibility-inlines-hidden" is only available on newer releases of gcc, but shows
	# some issues with 64-bit builds.	
	if compilerVersionInt >= 400 and IEEnv.platformHardware() != "x86_64" :

		CXXFLAGS += [ "-fvisibility-inlines-hidden" ]

withAsserts = getOption( "WITH_ASSERTS", withAsserts )
if not withAsserts :
	CXXFLAGS += [ "-DNDEBUG", "-DBOOST_DISABLE_ASSERTS" ]

TESTCXXFLAGS = copy.copy( CXXFLAGS )
	
# Special workaround for suspected gcc issue - see BoostUnitTestTest for more information
TESTCXXFLAGS += [ "-O0" ]
	
if not debug :

	CXXFLAGS += [ "-O2" ]
				
PYTHONCXXFLAGS = copy.copy( CXXFLAGS )
	
## \todo Try to reintroduce -Werror whenever we find a boost version not riddled with warnings, or
# when we use a compiler which properly supports the #pragma diagnostic to ignore warnings from boost.
	
LINKFLAGS = []	
if compilerVersionInt < 350 :
	##########################################################################################################
	# This is here to specifically address a problem in binutils-2.17 and later, when harmless warnings of the
	# form "X: referenced in section '.rodata' of Y: defined in discarded section" were changed to errors
	# Only gcc-3.4 and earlier omits these warnings, so we don't need to do anything for later compiler
	# versions.
	##########################################################################################################
	LINKFLAGS += [ "-Wl,--noinhibit-exec" ]

# set the include paths
TBB_INCLUDE_PATH = "/software/tools/include/" + platform + "/tbb/" + tbbVersion
BOOST_INCLUDE_PATH = os.path.join( "/software/tools/include", platform, "boost", boostVersion )
OPENEXR_INCLUDE_PATH = "/software/tools/include/" + platform + "/OpenEXR/" + openEXRVersion
GLEW_INCLUDE_PATH = "/software/tools/include/" + platform + "/glew/" + glewVersion

if platform == "cent6.x86_64" :
	# use the /usr/lib versions of tiff, png, freetype and jpeg
	FREETYPE_INCLUDE_PATH = "/usr/include/freetype2"
else :
	TIFF_INCLUDE_PATH = "/software/tools/include/tiff/3.8.2"
	JPEG_INCLUDE_PATH = "/software/tools/include/jpeg/6b"
	FREETYPE_INCLUDE_PATH = "/software/tools/include/freetype/2.3.5/freetype2"
	CPPPATH = "/software/tools/include/freetype/2.3.5"
	if targetApp != "nuke" :
		# we use the system libpng when building for nuke, as it links to an older
		# version than we have installed centrally.
		PNG_INCLUDE_PATH = "/software/tools/include/png/1.5.2"
	
# figure out the boost lib suffix
compilerVersionSplit = compilerVersion.split( "." )
if IEEnv.platformOS().startswith( "osx" ) :
	BOOST_LIB_SUFFIX = "-xgcc" + compilerVersionSplit[0] + compilerVersionSplit[1] + boostVersionSuffix
else:
	BOOST_LIB_SUFFIX = "-" + compiler + compilerVersionSplit[0] + compilerVersionSplit[1] + boostVersionSuffix

OPENEXR_LIB_SUFFIX = "-" + openEXRVersion

# find the right libraries based on compiler and platform
LIBPATH = "/software/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion
if targetApp :
	## \todo: the final or in this statement is for Nuke. Remove once the Nuke registry has been updated to use libPaths
	libPaths = [ os.path.join( targetAppReg["location"], x ) for x in targetAppReg.get( "libPaths", [] ) ] or [ targetAppReg["location"] ]
	libPaths.append( LIBPATH )
	LIBPATH = ":".join( libPaths )

# ignore python-config stuff and specify it all explicitly ourselves
pythonReg = IEEnv.registry['apps']['python'][pythonVersion][IEEnv.platform()]

pythonRoot = os.path.join( pythonReg["location"], compiler, compilerVersion )

if IEEnv.platformOS().startswith( "osx" ):
	pythonRoot = os.path.join( pythonRoot, "Python.framework", "Versions", pythonVersion )

PYTHON = "/software/tools/wrappers/python%s" % pythonVersion
PYTHON_INCLUDE_PATH = pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/" + pythonReg["include"] + "/python" + pythonVersion
PYTHON_LINK_FLAGS = pythonReg["moduleLinkFlags"]

if PYTHON_LINK_FLAGS=="" :
	PYTHON_LINK_FLAGS = "-L" + pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/lib -lpython" + pythonVersion 

# find 3delight. we only build the 3delight stuff if the compiler we're building with is suitable.
dlVersion = getOption( "DL_VERSION", os.environ["DL_VERSION"] )
try :
	dlReg = IEEnv.registry["apps"]["3delight"][dlVersion][platform]
	if dlReg["compiler"]==compiler and dlReg["compilerVersion"]==compilerVersion :
		RMAN_ROOT = dlReg["location"]
		os.environ["DELIGHT_CONF"] = "/software/config/3delight"
	
		# Add ribdepends location to path
		os.environ["PATH"] = os.path.join( RMAN_ROOT, "bin" ) + ":" + os.environ["PATH"]
except :
	pass
	
# find arnold. we only build the arnold stuff if the compiler we're building with is suitable.
arnoldVersion = getOption( "ARNOLD_VERSION", os.environ["ARNOLD_VERSION"] )
try :
	arnoldReg = IEEnv.registry["apps"]["arnold"][arnoldVersion][platform]
	if arnoldReg["compiler"]==compiler and arnoldReg["compilerVersion"]==compilerVersion :
		ARNOLD_ROOT = arnoldReg["location"]
except :
	pass

# ask for opengl support
WITH_GL=1

# find maya if we're building for maya
if targetApp=="maya" :

	mayaVersion = targetAppVersion

	mayaReg = IEEnv.registry["apps"]["maya"][mayaVersion][platform]
	mayaMajorVersion = mayaReg["majorVersion"]
	MAYA_ROOT = mayaReg["location"]
	MAYA_LICENSE_FILE=mayaReg["wrapperEnvVars"]["LM_LICENSE_FILE"]
	MAYA_ADLM_ENV_FILE=mayaReg["wrapperEnvVars"].get( "AUTODESK_ADLM_THINCLIENT_ENV", "" )
	INSTALL_MAYALIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_MEL_DIR = "$INSTALL_PREFIX/tools/maya/" + mayaMajorVersion + "/mel/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
	INSTALL_MAYAPLUGIN_NAME = "$INSTALL_PREFIX/tools/maya/" + mayaMajorVersion + "/plugins/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
	INSTALL_MAYAICON_DIR = "$INSTALL_PREFIX/tools/maya/" + mayaMajorVersion + "/icons"
	WITH_MAYA_PLUGIN_LOADER = 1
	
	if mayaMajorVersion == "2012" :
		mtoaVersion = getOption( "MTOA_VERSION", os.environ["MTOA_VERSION"] )
		MTOA_ROOT = "/software/apps/mtoa/" + mtoaVersion + "/" + platform + "/" + mayaMajorVersion
		MTOA_SOURCE_ROOT = "/home/john/opendev/mtoa" ## \todo Remove when this hack is no longer necessary
		INSTALL_MTOAEXTENSION_NAME = "$INSTALL_PREFIX/tools/mtoa/" + mtoaVersion + "/maya" + mayaMajorVersion + "/cortex$IECORE_MAJOR_VERSION/extensions/" + platform + "/$IECORE_NAME"

else :

	mayaMajorVersion = "0" # it needs a value just for the install setup below to execute			

# find nuke, unless we're on intel macs where the library doesn't link right now
if IEEnv.platform() != "osx104.i686" and IEEnv.platform() != "osx105.i686" and targetApp=="nuke" :
	try :
		nukeVersion = targetAppVersion
		nukeReg = IEEnv.registry["apps"]["nuke"][nukeVersion][platform]
		if compiler==nukeReg["compiler"] and compilerVersion==nukeReg["compilerVersion"] :
			NUKE_ROOT = nukeReg["location"]
			NUKE_LICENSE_FILE = nukeReg["wrapperEnvVars"]["LM_LICENSE_FILE"]
			INSTALL_NUKELIB_NAME = "$INSTALL_PREFIX/tools/nuke/" + nukeVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
			INSTALL_NUKEPYTHON_DIR = "$INSTALL_PREFIX/tools/nuke/" + nukeVersion + "/python/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"
			INSTALL_NUKEPLUGIN_NAME = "$INSTALL_PREFIX/tools/nuke/" + nukeVersion + "/plugins/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
	except :
		pass

# find houdini if we're building for houdini
if targetApp=="houdini" :

	houdiniVersion = targetAppVersion

	houdiniReg = IEEnv.registry["apps"]["houdini"][houdiniVersion][platform]
	BOOST_INCLUDE_PATH = "/software/tools/include/" + platform + "/boost/" + boostVersion
	# Houdini currently uses an OpenEXR version that we can't install centrally
	OPENEXR_INCLUDE_PATH = os.path.join( houdiniReg['location'], houdiniReg['includes'][0] )
	OPENEXR_LIB_SUFFIX = ""
	PNG_INCLUDE_PATH = OPENEXR_INCLUDE_PATH
	
	HOUDINI_ROOT = houdiniReg['location']
	HOUDINI_CXX_FLAGS = '-DVERSION=\"'+houdiniVersion+'\" -DDLLEXPORT=  -D_GNU_SOURCE -DLINUX -DAMD64 -m64 -fPIC -DSIZEOF_VOID_P=8 -DSESI_LITTLE_ENDIAN -DENABLE_THREADS -DUSE_PTHREADS -D_REENTRANT -D_FILE_OFFSET_BITS=64 -c  -DGCC4 -DGCC3 -Wno-deprecated -Wall -W -Wno-parentheses -Wno-sign-compare -Wno-reorder -Wno-uninitialized -Wunused -Wno-unused-parameter -Wno-strict-aliasing -O2 -DMAKING_DSO'
	INSTALL_HOUDINILIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_HOUDINIPLUGIN_NAME = "$INSTALL_PREFIX/tools/houdini/" + houdiniVersion + "/plugins/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
	INSTALL_HOUDINIOTL_DIR = "$INSTALL_PREFIX/tools/houdini/" + houdiniVersion + "/otls/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/"
	INSTALL_HOUDINIICON_DIR = "$INSTALL_PREFIX/tools/houdini/" + houdiniVersion + "/icons/"
	INSTALL_HOUDINITOOLBAR_DIR = "$INSTALL_PREFIX/tools/houdini/" + houdiniVersion + "/toolbar/"

# find truelight, unless we're on osx, where we haven't got it to link yet
if not IEEnv.platformOS().startswith("osx") :
	try :
		truelightReg = IEEnv.registry["apps"]["truelight"][getOption( "TRUELIGHT_VERSION", os.environ["TRUELIGHT_VERSION"] )][platform]
		TRUELIGHT_ROOT = truelightReg["location"]
	except :
		pass
else :
	TRUELIGHT_ROOT=""

# find doxygen
DOXYGEN = os.path.join( "/software/apps/doxygen", os.environ["DOXYGEN_VERSION"], platform, "bin", "doxygen" )

# import vars we need to get our doxygen and python wrappers working
ENV_VARS_TO_IMPORT="PATH COMPILER COMPILER_VERSION PYTHONPATH IEENV_ROOT IEENV_WORKING_PATH IEENV_LIBRARY_PREFIX_PATH DOXYGEN_VERSION IEENV_DEBUG IEENV_DEBUG_PYTHON IEENV_DEBUGGER IEENV_DEBUGGER_ARGS DELIGHT_CONF SCONS_VERSION DL_VERSION DL_SHADERS_PATH DL_DISPLAYS_PATH"

# make sure the tests can run
TEST_LIBPATH = ":".join( [ pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/lib", compilerReg["location"] + "/lib" ] )
TEST_LIBRARY_PATH_ENV_VAR = "IEENV_LIBRARY_PREFIX_PATH"

# get the installation locations right
INSTALL_PREFIX = getOption( "INSTALL_PREFIX", os.path.expanduser( "~" ) )

# install the op stubs and procedural stubs
INSTALL_IECORE_PROCEDURAL_PATH = "$INSTALL_PREFIX/tools/procedurals/$IECORE_MAJOR_VERSION/$IECORE_NAME-${IECORE_MAJORMINORPATCH_VERSION}.py"
INSTALL_IECORE_OP_PATH = "$INSTALL_PREFIX/tools/ops/$IECORE_MAJOR_VERSION/$IECORE_NAME-${IECORE_MAJORMINORPATCH_VERSION}.py"

if targetApp :
	INSTALL_HEADER_DIR = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/include/" + platform + "/cortex/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_LIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_PYTHONLIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION-python$PYTHON_VERSION"
	INSTALL_PYTHON_DIR = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/python/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_RMANLIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_ARNOLDLIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppMajorVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	# we don't want to build the renderman procedurals when we build houdini, as otherwise they end
	# up causing linking conflicts at rendertime. this is because the procedural would be linking to the
	# boost version houdini needs, whereas the other libraries are linking to the correct boost version for
	# 3delight and the rest of the world. the same potential exists for other app specific builds too so we just
	# install the procedurals into /tmp where they can't do any harm.
	INSTALL_RMANPROCEDURAL_NAME = "/tmp/unwantedRManProcedurals/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_RMANDISPLAY_NAME = "/tmp/unwantedRManDisplays/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_ARNOLDPROCEDURAL_NAME = "/tmp/unwantedArnoldProcedurals/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_ARNOLDOUTPUTDRIVER_NAME = "/tmp/unwantedArnoldDrivers/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
else :
	INSTALL_HEADER_DIR = "$INSTALL_PREFIX/tools/include/" + platform + "/cortex/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_LIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_PYTHONLIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION-python$PYTHON_VERSION"
	INSTALL_PYTHON_DIR = "$INSTALL_PREFIX/tools/python/" + pythonVersion + "/" + platform + "/" + compiler + "/" + compilerVersion + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_RMANLIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_RMANPROCEDURAL_NAME = "$INSTALL_PREFIX/tools/3delight/" + dlVersion + "/procedurals/" + platform + "/cortex/$IECORE_MAJOR_VERSION/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_RMANDISPLAY_NAME = "$INSTALL_PREFIX/tools/3delight/" + dlVersion + "/displayDrivers/" + platform + "/cortex/$IECORE_MAJOR_VERSION/$IECORE_NAME"
	INSTALL_ARNOLDLIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_ARNOLDPROCEDURAL_NAME = "$INSTALL_PREFIX/tools/arnold/" + arnoldVersion + "/plugins/" + platform + "/cortex/$IECORE_MAJOR_VERSION/$IECORE_NAME"
	INSTALL_ARNOLDOUTPUTDRIVER_NAME = "$INSTALL_PREFIX/tools/arnold/" + arnoldVersion + "/plugins/" + platform + "/cortex/$IECORE_MAJOR_VERSION/$IECORE_NAME"

INSTALL_GLSL_HEADER_DIR =  "$INSTALL_PREFIX/tools/glsl/$IECORE_NAME/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_GLSL_SHADER_DIR =  "$INSTALL_PREFIX/tools/glsl/$IECORE_NAME/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_RSL_HEADER_DIR =  "$INSTALL_PREFIX/tools/rsl/$IECORE_NAME/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_DOC_DIR = "$INSTALL_PREFIX/doc/tools/lib/cortex/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_PKG_CONFIG_FILE = "0"

# set up a post install script to make op wrappers for IECore
INSTALL_CORE_POST_COMMAND="scons -i -f config/ie/postCoreInstall INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# set up a post install script to make op wrappers for IECore
INSTALL_COREMAYA_POST_COMMAND="scons -i -f config/ie/postCoreMayaInstall MAYA_VERSION='" + mayaMajorVersion + "' INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# set up a post install script to make op wrappers for IECoreTruelight
INSTALL_CORETRUELIGHT_POST_COMMAND="scons -i -f config/ie/installTruelightOps INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# speed up the build a bit hopefully.
BUILD_CACHEDIR = os.environ["IEBUILD_CACHEDIR"]
