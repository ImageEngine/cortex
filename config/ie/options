##########################################################################
#
#  Copyright (c) 2007-2014, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of Image Engine Design nor the names of any
#       other contributors to this software may be used to endorse or
#       promote products derived from this software without specific prior
#       written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import distutils
import os
import sys
import os.path
import IEEnv
import re
import copy
import getpass
import string

def getOption( name, default ) :

	import sys
	result = default
	for a in sys.argv:
		if a[:len(name)+1]==name+"=" :	
			result = a[len(name)+1:]

	return result

# decide what compiler/app we're targeting. we either pass COMPILER_VERSION, COMPILER and PYTHON_VERSION
# to do a straight install in /software/apps/cortex/<cortexVersion>/$PLATFORM/base/ or we pass an APP and APP_VERSION pair
# to do an install in /software/apps/cortex/<cortexVersion>/$PLATFORM/app/appVersion - in this case the compiler and settings
# are dictated by the application.

platform = IEEnv.platform()

compiler = getOption( "COMPILER", None )
compilerVersion = getOption( "COMPILER_VERSION", None )
pythonVersion = getOption( "PYTHON_VERSION", None )
sixVersion = getOption( "SIX_VERSION", "1.14.0" )
targetApp = getOption( "APP", None )

# get cortex config information from the registry. if we have setting specific to this platform then use them, otherwise
# fall back to the generic settings for this compatibility version.

##########################################################################
# parse SConstruct file for the cortex version
##########################################################################

def cortexRegistryVersion() :

	import re
	varsFound = {}
	varsToFind = [ "ieCoreMilestoneVersion", "ieCoreMajorVersion" ]

	with open( "SConstruct", "r" ) as f :
		for line in f :
			for varName in varsToFind :
				match = re.match( "^\s*%s\s*=\s*(?P<value>\d+).*$" % varName, line )
				if match :
					varsFound[varName] = match.groupdict()["value"]
					varsToFind.remove( varName )
					break
			if not varsToFind:
				break

	if varsToFind :
		raise Exception( "Could not find the Cortex version in the SConstruct file. Please review the parsing rules." )

	return varsFound["ieCoreMilestoneVersion"] + "." + varsFound["ieCoreMajorVersion"]

cortexReg = IEEnv.registry["libraries"]["cortex"][cortexRegistryVersion()][platform]

if targetApp :

	if targetApp not in ( "nuke", "maya", "houdini", "rv" ) :
		raise RuntimeError( "Check config logic applies to the new app and remove this exception." )

	if (compiler or compilerVersion) :
		raise RuntimeError( "Must specify only one of COMPILER or APP" )

	if pythonVersion :
		raise RuntimeError( "Must specify only one of PYTHON_VERSION or APP" )

	targetAppVersion = getOption( "APP_VERSION", os.environ.get( targetApp.upper() + "_VERSION" ) )

	targetAppReg = IEEnv.registry["apps"][targetApp][targetAppVersion][platform]
	compiler = targetAppReg["compiler"]
	compilerVersion = targetAppReg["compilerVersion"]
	cxxStd = targetAppReg.get( "cxxStd", cortexReg.get( "cxxStd", "c++11" ) )
	openEXRVersion = targetAppReg.get( "OpenEXRVersion", cortexReg["OpenEXRVersion"] )
	alembicVersion = targetAppReg.get( "AlembicVersion", cortexReg["AlembicVersion"] )
	vdbVersion = targetAppReg.get( "OpenVDBVersion", cortexReg["OpenVDBVersion"] )
	bloscVersion = targetAppReg.get( "bloscVersion", cortexReg["bloscVersion"] )
	hdf5Version = targetAppReg.get( "hdf5Version", cortexReg["hdf5Version"] )
	glewVersion = targetAppReg.get( "glewVersion", cortexReg["glewVersion"] )
	pythonVersion = targetAppReg["pythonVersion"]
	boostVersion = targetAppReg.get( "boostVersion", cortexReg["boostVersion"] )
	oiioVersion = targetAppReg.get( "OpenImageIOVersion", cortexReg["OpenImageIOVersion"] )
	tbbVersion = targetAppReg.get( "tbbVersion", cortexReg["tbbVersion"] )
	usdVersion = targetAppReg.get( "usdVersion", cortexReg.get("usdVersion", None) )
	targetAppMajorVersion = targetAppReg.get( "majorVersion", targetAppVersion )
	compatibilityVersion = targetAppReg.get( "compatibilityVersion", targetAppMajorVersion )
else :
	platformReg = IEEnv.registry["platformDefaults"][IEEnv.platform()]
	if not compiler :
		compiler = cortexReg.get( "compiler", platformReg["compiler"] )
	if not compilerVersion :
		compilerVersion = cortexReg.get( "compilerVersion", platformReg["compilerVersion"] )
	if not pythonVersion :
		pythonVersion = cortexReg["preferredPythonVersion"]
	cxxStd = cortexReg.get( "cxxStd", "c++11" )
	openEXRVersion = cortexReg["OpenEXRVersion"]
	alembicVersion = cortexReg["AlembicVersion"]
	vdbVersion = cortexReg.get("OpenVDBVersion", "4.0.2")
	bloscVersion = cortexReg.get("bloscVersion" )
	hdf5Version = cortexReg["hdf5Version"]
	glewVersion = cortexReg["glewVersion"]
	tbbVersion = cortexReg["tbbVersion"]
	usdVersion = cortexReg.get("usdVersion", None)
	boostVersion = cortexReg["boostVersion"]
	oiioVersion = cortexReg["OpenImageIOVersion"]

# get the compiler location using the registry
compilerReg = IEEnv.registry["compilers"][compiler][compilerVersion][platform]

# We need to set these so that ENV_VARS_TO_IMPORT can supply the correct environment to the scons test environments
os.environ["COMPILER"] = compiler
os.environ["COMPILER_VERSION"] = compilerVersion

CXX = os.path.join( compilerReg["location"], compilerReg["bin"] )
CXXSTD = getOption( "CXXSTD", cxxStd )

m = re.compile( "^([0-9]+)\.([0-9]+)\.([0-9]+)$" ).match( compilerVersion )
if m :
	compilerMajorVersion, compilerMinorVersion, compilerPatchVersion = m.group( 1, 2, 3 )
	compilerVersionInt = int(compilerMajorVersion) * 100 + int(compilerMinorVersion) * 10 + int(compilerPatchVersion)
else :
	m = re.compile( "^([0-9]+)\.([0-9]+)$" ).match( compilerVersion )
	compilerMajorVersion, compilerMinorVersion = m.group( 1, 2 )
	compilerVersionInt = int(compilerMajorVersion) * 100 + int(compilerMinorVersion) * 10 + 9

if not m :
	raise RuntimeError( "Cannot determine compiler version (%s)" % compilerVersion )

CXXFLAGS = [ "-pipe", "-Wall", "-pthread" ]

LINKFLAGS = []

# set the dependency paths
TBB_INCLUDE_PATH = os.path.join( "/software/apps/tbb", tbbVersion, platform, compiler, compilerVersion, "include" )
TBB_LIB_PATH = os.path.join( "/software/apps/tbb", tbbVersion, platform, compiler, compilerVersion, "lib" )
TBB_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "tbb", tbbVersion )

BOOST_INCLUDE_PATH = os.path.join( "/software/tools/include", platform, "boost", boostVersion )
BOOST_LIB_PATH = os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion )
BOOST_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "boost", boostVersion, { "compiler" : compiler, "compilerVersion" : compilerVersion } )
BOOST_PYTHON_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix(
	"boost_python", boostVersion, { "compiler" : compiler, "compilerVersion" : compilerVersion, "pythonVersion" : pythonVersion }
)

OPENEXR_INCLUDE_PATH = "/software/tools/include/" + platform + "/OpenEXR/" + openEXRVersion
OPENEXR_LIB_PATH = os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion )
ILMBASE_LIB_PATH = os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion )
OPENEXR_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenEXR", openEXRVersion )

GLEW_INCLUDE_PATH = "/software/tools/include/" + platform + "/glew/" + glewVersion
GLEW_LIB_PATH = os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion )
GLEW_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "glew", glewVersion )

oiioRoot = os.path.join( "/software", "apps", "OpenImageIO", oiioVersion, platform, compiler, compilerVersion )
OIIO_INCLUDE_PATH = os.path.join( oiioRoot, "include" )
OIIO_LIB_PATH = os.path.join( oiioRoot, "lib64" )
OIIO_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenImageIO", oiioVersion )

FREETYPE_LIB_PATH = os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion )
FREETYPE_INCLUDE_PATH = "/usr/include/freetype2"

# find the right libraries based on compiler and platform
LIBPATH = ":".join( [
	os.path.join( "/software", "tools", "lib", platform, compiler, compilerVersion ),
	os.path.join( "/software", "apps", compiler, compilerVersion, platform, "lib64" ),
] )
if targetApp :
	libPaths = [ os.path.join( targetAppReg["location"], x ) for x in targetAppReg.get( "libPaths", [] ) ]
	libPaths.append( LIBPATH )
	LIBPATH = ":".join( libPaths )

# ignore python-config stuff and specify it all explicitly ourselves
pythonReg = IEEnv.registry['apps']['python'][pythonVersion][platform]

pythonRoot = os.path.join( pythonReg["location"], compiler, compilerVersion )

PYTHON = "/software/tools/wrappers/iePython%s" % pythonVersion
PYTHON_INCLUDE_PATH = pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/" + pythonReg["include"] + "/python" + pythonVersion
PYTHON_LINK_FLAGS = pythonReg["moduleLinkFlags"]

if PYTHON_LINK_FLAGS=="" :
	PYTHON_LINK_FLAGS = "-L" + pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/lib -lpython" + pythonVersion

if distutils.version.LooseVersion( openEXRVersion ) < distutils.version.LooseVersion( "2.4.1" ) :
	openEXRPythonModuleDir = os.path.join( "/software", "apps", "openexr", openEXRVersion, platform, compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib64", "python" + pythonVersion, "site-packages" )
	openEXRPythonLibDir = os.path.join( "/software", "apps", "openexr", openEXRVersion, platform, compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib" )
else :
	openEXRPythonModuleDir = os.path.join( "/software", "apps", "openexr", openEXRVersion, platform, compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib", "python" + pythonVersion, "site-packages" )
	openEXRPythonLibDir = os.path.join( "/software", "apps", "openexr", openEXRVersion, platform, compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib64" )

PYTHONPATH = ":".join( [
	os.path.join( "/software", "apps", "six", sixVersion ),
	openEXRPythonModuleDir,
] )

# get the installation locations right
INSTALL_PREFIX = getOption( "INSTALL_PREFIX", os.path.expanduser( "~" ) )
installPrefix = os.path.join( "$INSTALL_PREFIX", "apps", "cortex", "${IECORE_VERSION}", platform )

# add the dev suffix to local builds
if getOption( "RELEASE", "0" )!="1" :
	installPrefix = os.path.join( "$INSTALL_PREFIX", "apps", "cortex", "${IECORE_VERSION}dev", platform )

basePrefix = os.path.join( installPrefix, "base" )
if targetApp :
	if targetApp in ( "nuke", ):
		appPrefix = os.path.join( installPrefix, targetApp, compatibilityVersion )
	else:
		appPrefix = os.path.join( installPrefix, targetApp, targetAppMajorVersion )

# find 3delight. we only build the 3delight stuff if the compiler we're building with is suitable.
dlReg = None
dlVersion = getOption( "DL_VERSION", os.environ.get( "DL_VERSION", None ) )
try :
	dlReg = IEEnv.registry["apps"]["3delight"][dlVersion][platform]
	if dlReg["compiler"]==compiler :
		RMAN_ROOT = dlReg["location"]
		os.environ["DELIGHT_CONF"] = "/software/config/3delight"

		# Add ribdepends location to path
		os.environ["PATH"] = os.path.join( RMAN_ROOT, "bin" ) + ":" + os.environ["PATH"]
except :
	pass

# find arnold. we only build the arnold stuff if the compiler we're building with is suitable.
arnoldVersion = getOption( "ARNOLD_VERSION", os.environ["ARNOLD_VERSION"] )
try :
	arnoldReg = IEEnv.registry["apps"]["arnold"][arnoldVersion][platform]
	ARNOLD_ROOT = arnoldReg["location"]
except :
	pass

appleseedReg = None
appleseedVersion = getOption( "APPLESEED_VERSION", os.environ.get("APPLESEED_VERSION", "") )
try :
	appleseedReg = IEEnv.registry["apps"]["appleseed"][appleseedVersion][platform]
except :
	pass

if appleseedReg :

	APPLESEED_INCLUDE_PATH = os.path.join( appleseedReg["location"], "include" )
	APPLESEED_LIB_PATH = os.path.join( appleseedReg["location"], "lib" )

	oslVersion = appleseedReg.get( "OpenShadingLanguageVersion", cortexReg["OpenShadingLanguageVersion"] )
	oslRoot = os.path.join( "/software", "apps", "OpenShadingLanguage", oslVersion, platform, compiler, compilerVersion )
	OSL_INCLUDE_PATH = os.path.join( oslRoot, "include" )
	OSL_LIB_PATH = os.path.join( oslRoot, "lib" )

# ask for opengl support
WITH_GL=1

# find alembic:
ALEMBIC_INCLUDE_PATH = os.path.join( "/software", "apps", "Alembic", alembicVersion, platform, compiler, compilerVersion, "include" )
ALEMBIC_LIB_PATH = os.path.join( "/software", "apps", "Alembic", alembicVersion, platform, compiler, compilerVersion, "lib" )
ALEMBIC_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "Alembic", alembicVersion )

VDB_INCLUDE_PATH = os.path.join( "/software", "apps", "OpenVDB", vdbVersion, platform, compiler, compilerVersion, "include" )
VDB_LIB_PATH = os.path.join( "/software", "apps", "OpenVDB", vdbVersion, platform, compiler, compilerVersion, "lib" )
VDB_PYTHON_PATH = os.path.join( "/software", "apps", "OpenVDB", vdbVersion, platform, compiler, compilerVersion, "python", "lib", "python"+pythonVersion )

BLOSC_INCLUDE_PATH = os.path.join( "/software/tools/include/", platform, "blosc", bloscVersion )
BLOSC_LIB_PATH = os.path.join("/software/tools/lib", platform, compiler, compilerVersion )
BLOSC_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "blosc", bloscVersion )

# find USD:

usdReg = IEEnv.registry["apps"]["usd"].get( usdVersion, {} ).get( platform )
if usdReg :
	if targetApp :
		USD_INCLUDE_PATH = os.path.join( usdReg["location"], targetApp, compatibilityVersion, "include" )
		USD_LIB_PATH = os.path.join( usdReg["location"], targetApp, compatibilityVersion, "lib" )
	else:
		USD_INCLUDE_PATH = os.path.join( usdReg["location"], compiler, compilerVersion, "cortex", "$IECORE_COMPATIBILITY_VERSION", "include" )
		USD_LIB_PATH = os.path.join( usdReg["location"], compiler, compilerVersion, "cortex", "$IECORE_COMPATIBILITY_VERSION", "lib" )

# find hdf5:
HDF5_INCLUDE_PATH = os.path.join( "/software/apps/hdf5", hdf5Version, platform, compiler, compilerVersion, "include" )
HDF5_LIB_PATH = os.path.join( "/software/apps/hdf5", hdf5Version, platform, compiler, compilerVersion, "lib" )

# find maya if we're building for maya
if targetApp=="maya" :

	mayaVersion = targetAppVersion

	mayaReg = IEEnv.registry["apps"]["maya"][mayaVersion][platform]
	MAYA_ROOT = mayaReg["location"]
	INSTALL_MAYALIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_MEL_DIR = os.path.join( appPrefix, "mel", "$IECORE_NAME" )
	INSTALL_MAYAPLUGIN_NAME = os.path.join( appPrefix, "plugins", "$IECORE_NAME" )
	INSTALL_MAYAICON_DIR = os.path.join( appPrefix, "icons" )
	INSTALL_COREMAYA_POST_COMMAND="scons -i -f config/ie/postCoreMayaInstall MAYA_VERSION='" + mayaVersion + "' INSTALLPREFIX="+appPrefix+" install"
	WITH_MAYA_PLUGIN_LOADER = 1

# find nuke if we're building for nuke
if targetApp=="nuke" :

	nukeVersion = targetAppVersion
	nukeReg = IEEnv.registry["apps"]["nuke"][nukeVersion][platform]

	# nuke 12.2 ships its own USD so we link against that
	if distutils.version.LooseVersion(nukeVersion) >= distutils.version.LooseVersion("12.2") :
		USD_INCLUDE_PATH = os.path.join( nukeReg["location"], "include" )
		USD_LIB_PATH = os.path.join( nukeReg["location"], nukeReg["libPaths"][0] )

	NUKE_ROOT = nukeReg["location"]
	NUKE_LICENSE_FILE = nukeReg["wrapperEnvVars"]["foundry_LICENSE"]
	INSTALL_NUKELIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_NUKEPYTHON_DIR = os.path.join( appPrefix, "python" )
	INSTALL_NUKEICON_DIR = os.path.join( appPrefix, "icons" )
	INSTALL_NUKEPLUGIN_NAME = os.path.join( appPrefix, "plugins", "$IECORE_NAME" )

# find houdini if we're building for houdini
if targetApp=="houdini" :

	houdiniVersion = targetAppVersion

	houdiniReg = IEEnv.registry["apps"]["houdini"][houdiniVersion][platform]
	HOUDINI_ROOT = houdiniReg['location']

	# we use out normal boost includes (and libs) because Houdini has mangled their
	# boost install with an "h" prefix on the includes, libs, and even macros like HBOOST_VERSION.
	BOOST_INCLUDE_PATH = "/software/tools/include/" + platform + "/boost/" + boostVersion

	# houdini 17 ships its own USD so we link against that
	if distutils.version.LooseVersion(houdiniVersion) >= distutils.version.LooseVersion("17.0") :
		TBB_INCLUDE_PATH = "$HOUDINI_INCLUDE_PATH"
		TBB_LIB_PATH = "$HOUDINI_LIB_PATH"
		TBB_LIB_SUFFIX = ""
		GLEW_LIB_SUFFIX = ""
		VDB_LIB_SUFFIX = "_sesi"
		USD_INCLUDE_PATH = "$HOUDINI_INCLUDE_PATH"
		USD_LIB_PATH = "$HOUDINI_LIB_PATH"
		USD_LIB_PREFIX = "libpxr_"
		WITH_USD_MONOLITHIC = True
	if distutils.version.LooseVersion(houdiniVersion) >= distutils.version.LooseVersion("18.0") :
		# SideFx is non building USD monolithically anymore
		WITH_USD_MONOLITHIC = False
		# we stop using SideFx namespaced library as much as possible.
		VDB_LIB_SUFFIX = ""

	HOUDINI_CXX_FLAGS = " ".join( houdiniReg['compilerFlags'] )

	INSTALL_HOUDINILIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_HOUDINIPLUGIN_NAME = os.path.join( appPrefix, "plugins", "$IECORE_NAME" )
	INSTALL_HOUDINIOTL_DIR = os.path.join( appPrefix, "otls" )
	INSTALL_HOUDINIICON_DIR = os.path.join( appPrefix, "icons" )
	INSTALL_HOUDINITOOLBAR_DIR = os.path.join( appPrefix, "toolbar" )
	INSTALL_HOUDINIMENU_DIR = os.path.join( appPrefix, "generic" )

	WITH_MANTRA = True
	INSTALL_MANTRALIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_MANTRAPROCEDURAL_NAME = os.path.join( appPrefix, "plugins", "mantra", "$IECORE_NAME" )

	# Temporarily disable IECoreGL until we sort out our dependency trauma
	#	Houdini 16.0 requires Boost 1.55.0
	#	IECoreGL requires IECoreImage requires OpenImageIO 1.8.4dev requires Boost 1.61.0
	# We need to sort this out before Cortex 10 is officially released,
	# but chances are by that points Houdini 16.5 will be released.
	if distutils.version.LooseVersion(houdiniVersion) >= distutils.version.LooseVersion("16.5"):
		WITH_GL = 1
	else:
		WITH_GL = False

if targetApp=="rv" :

	rvVersion = targetAppVersion
	rvReg = IEEnv.registry["apps"]["rv"][rvVersion][platform]
	rvRoot = rvReg["location"]
	rvIncludes = os.path.join( rvRoot, "include" )
	rvLibs = os.path.join( rvRoot, "lib" )

	if distutils.version.LooseVersion(rvVersion) >= distutils.version.LooseVersion("7.8.0"):
		if "boostVersion" in rvReg:
			BOOST_INCLUDE_PATH = rvIncludes
			BOOST_LIB_PATH = rvLibs
			BOOST_LIB_SUFFIX = rvReg.get( "boostLibSuffix", BOOST_LIB_SUFFIX )

		if "OpenImageIOVersion" in rvReg:
			# NOTE: At the moment RV doesn't provide OIIO headers, so we rely on
			# the default `OIIO_INCLUDE_PATH` value.
			OIIO_LIB_PATH = rvLibs
			OIIO_LIB_SUFFIX = rvReg.get( "OpenImageIOLibSuffix", OIIO_LIB_SUFFIX )

# find doxygen
DOXYGEN = os.path.join( "/software/apps/doxygen", os.environ["DOXYGEN_VERSION"], platform, "bin", "doxygen" )

# we need this so IECoreImage tests use a standard color conversion config
os.environ["OCIO"] = "/software/config/openColorIO/nuke-default/config.ocio"

# import vars we need to get our doxygen and python wrappers working
envVarsToImport = [
	"PATH",
	"COMPILER",
	"COMPILER_VERSION",
	"PYTHONPATH",
	"IEENV_ROOT",
	"IEENV_WORKING_PATH",
	"IEENV_LIBRARY_PREFIX_PATH",
	"DOXYGEN_VERSION",
	"IEENV_DEBUG",
	"IEENV_DEBUG_PYTHON",
	"IEENV_DEBUGGER",
	"IEENV_DEBUGGER_ARGS",
	"DELIGHT_CONF",
	"SCONS_VERSION",
	"DL_VERSION",
	"DL_SHADERS_PATH",
	"DL_DISPLAYS_PATH",
	"solidangle_LICENSE",
	"CORTEX_POINTDISTRIBUTION_TILESET",
	"OCIO",
	"IECORE_DEBUG_WAIT",
	"CORTEX_PERFORMANCE_TEST",
	"IECORE_RTLD_GLOBAL",
]

ENV_VARS_TO_IMPORT= " ".join(envVarsToImport)

# make sure the tests can run
testLibs = [
	openEXRPythonLibDir,
	os.path.join( pythonReg["location"], compiler, compilerVersion, "lib" ),
	os.path.join( compilerReg["location"], "lib" ),
]
if dlReg :
	testLibs.append( dlReg["location"] + "/lib" )
if appleseedReg :
	testLibs.extend( [ APPLESEED_LIB_PATH, OSL_LIB_PATH, OIIO_LIB_PATH ] )
TEST_LIBPATH = ":".join( testLibs )
TEST_LIBRARY_PATH_ENV_VAR = "IEENV_LIBRARY_PREFIX_PATH"

# install the op stubs and procedural stubs
INSTALL_IECORE_PROCEDURAL_PATH = os.path.join( basePrefix, "procedurals", "$IECORE_NAME-${IECORE_COMPATIBILITY_VERSION}.py" )
# ClassLoader requires integer versioning in the op filenames, so we use milestone version over compatibility version
INSTALL_IECORE_OP_PATH = os.path.join( basePrefix, "ops", "$IECORE_NAME-${IECORE_MILESTONE_VERSION}.py" )

if targetApp :
	INSTALL_HEADER_DIR = os.path.join( appPrefix, "include" )
	INSTALL_USD_RESOURCE_DIR = os.path.join( appPrefix, "resource" )
	INSTALL_LIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_PYTHONLIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION-python$PYTHON_VERSION" )
	INSTALL_PYTHON_DIR = os.path.join( appPrefix, "python" )
	INSTALL_RMANLIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_ARNOLDLIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_APPLESEEDLIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_ALEMBICLIB_NAME = os.path.join( appPrefix, "lib", "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	# we don't want to build the renderman procedurals when we build apps, as otherwise they end
	# up causing linking conflicts at rendertime. this is because the procedural would be linking to the
	# boost version an app needs, whereas the other libraries are linking to the correct boost version for
	# 3delight, so we just install the procedurals into a temp directory where they can't do any harm.
	INSTALL_RMANPROCEDURAL_NAME = os.path.join( "tmp", os.environ['USER'], "unwantedRManProcedurals/$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_RMANDISPLAY_NAME = os.path.join( "tmp", os.environ['USER'], "unwantedRManDisplays/$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_ARNOLDPROCEDURAL_NAME = os.path.join( "tmp", os.environ['USER'], "unwantedArnoldProcedurals/$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_ARNOLDOUTPUTDRIVER_NAME = os.path.join( "tmp", os.environ['USER'], "unwantedArnoldDrivers/$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_APPLESEEDOUTPUTDRIVER_NAME = os.path.join( "tmp", os.environ['USER'], "unwantedAppleseedDrivers/$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
else :
	INSTALL_HEADER_DIR = os.path.join( basePrefix, "include" )
	INSTALL_USD_RESOURCE_DIR = os.path.join( basePrefix, "resource" )
	INSTALL_LIB_NAME = os.path.join( basePrefix, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_PYTHONLIB_NAME = os.path.join( basePrefix, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION-python$PYTHON_VERSION" )
	INSTALL_PYTHON_DIR = os.path.join( basePrefix, "python", pythonVersion, compiler, compilerVersion )
	# We use basePrefix for IECoreRI, but dlPrefix for the renderman procedurals. See the note in
	# the dlReg section for an explanation.
	INSTALL_RMANLIB_NAME = os.path.join( basePrefix, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	if dlVersion:
		INSTALL_RMANPROCEDURAL_NAME = os.path.join( basePrefix, "3delight", dlVersion, "procedurals", "python", "$PYTHON_VERSION", compiler, compilerVersion, "$IECORE_NAME" )
		INSTALL_RMANDISPLAY_NAME = os.path.join( basePrefix, "3delight", dlVersion, "displayDrivers", compiler, compilerVersion, "$IECORE_NAME" )
	INSTALL_ARNOLDLIB_NAME = os.path.join( basePrefix, "arnold", arnoldVersion, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_ARNOLDPYTHON_DIR = os.path.join( basePrefix, "arnold", arnoldVersion, "python", pythonVersion, compiler, compilerVersion )
	INSTALL_ARNOLDPROCEDURAL_NAME = os.path.join( basePrefix, "arnold", arnoldVersion, "plugins", "python", "$PYTHON_VERSION", compiler, compilerVersion, "$IECORE_NAME" )
	INSTALL_ARNOLDOUTPUTDRIVER_NAME = os.path.join( basePrefix, "arnold", arnoldVersion, "plugins", compiler, compilerVersion, "$IECORE_NAME" )
	INSTALL_ARNOLDPROCEDURAL_NAME = os.path.join( basePrefix, "arnold", arnoldVersion, "plugins", "python", "$PYTHON_VERSION", compiler, compilerVersion, "$IECORE_NAME" )
	INSTALL_APPLESEEDLIB_NAME = os.path.join( basePrefix, "appleseed", appleseedVersion, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )
	INSTALL_APPLESEEDOUTPUTDRIVER_NAME = os.path.join( basePrefix, "appleseed", appleseedVersion, "plugins", compiler, compilerVersion, "$IECORE_NAME" )
	INSTALL_ALEMBICLIB_NAME = os.path.join( basePrefix, "lib", compiler, compilerVersion, "$IECORE_NAME-$IECORE_COMPATIBILITY_VERSION" )

	# only installing for the base installation as the CORTEX_STARTUP_PATHS will load these within target apps as well
	INSTALL_CORESCENE_POST_COMMAND = "scons -i -f config/ie/postCoreSceneInstall INSTALLPREFIX={prefix} install".format( prefix = basePrefix )
	INSTALL_COREIMAGE_POST_COMMAND = "scons -i -f config/ie/postCoreImageInstall INSTALLPREFIX={prefix} install".format( prefix = basePrefix )

INSTALL_GLSL_HEADER_DIR =  os.path.join( basePrefix, "glsl" )
INSTALL_GLSL_SHADER_DIR =  os.path.join( basePrefix, "glsl" )
INSTALL_RSL_HEADER_DIR =  os.path.join( basePrefix, "rsl" )
INSTALL_DOC_DIR = os.path.join( installPrefix, "doc" )
INSTALL_PKG_CONFIG_FILE = "0"

# speed up the build a bit hopefully.
BUILD_CACHEDIR = os.environ["IEBUILD_CACHEDIR"]

# build build will embed full paths to source code paths in the dwarf information
# Disabling the build cache to ensure our debug builds are correct rather than fast.

if getOption( "DEBUG", False ) and os.path.exists("/disk1") :
	BUILD_CACHEDIR = '/disk1/{0}/scons-cache'.format( getpass.getuser() )
