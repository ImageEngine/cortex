#!/usr/bin/env iePython2.7

import IEEnv
import subprocess
import sys
import os
import os.path
import shutil

def build( extraArgs = [] ) :

	sysArgs = sys.argv[1:]

	install = False
	if "install" in sysArgs :
		install = True
		sysArgs.remove( "install" )

	release = False
	if "RELEASE=1" in sysArgs :
		release = True

	if "J=" in " ".join( sysArgs ) :
		sysArgs = " ".join( sysArgs ).replace( "J=", "-j " ).split( " " )

	installPrefix = "/software" if release else os.path.expanduser( "~" )
	buildArgs = [ "INSTALL_PREFIX=" + installPrefix ]
	buildArgs.extend( extraArgs )
	buildArgs.extend( sysArgs )

	print " ".join( [ "scons" ] + buildArgs )
	if subprocess.call( [ "scons" ] + buildArgs ) != 0 :

		raise RuntimeError("Error : scons " + str( " ".join( buildArgs ) ) )

	if install or release :

		print " ".join( [ "scons", "install" ] + buildArgs )
		if subprocess.call( [ "scons", "install" ] + buildArgs ) != 0 :

			raise RuntimeError("Error : scons install " + str( " ".join( buildArgs ) ) )

def installDocs() :

	sysArgs = sys.argv[1:]

	if "RELEASE=1" not in sysArgs :
		return

	buildArgs = [ "INSTALL_PREFIX=/software" ]
	buildArgs.extend( sysArgs )

	if subprocess.call( [ "scons", "installDoc" ] + buildArgs ) != 0 :

		raise RuntimeError("Error : scons installDoc " + str( " ".join( buildArgs ) ) )

if IEEnv.platform() in ( "cent7.x86_64", ) :

	for compilerVersion in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]): 
		for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
			build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "ARNOLD_VERSION=UNDEFINED", "APPLESEED_VERSION=UNDEFINED", "DL_VERSION=UNDEFINED" ] )

	for aiVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["arnold"] ):
		for compilerVersion in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]): 
			for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
				build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "ARNOLD_VERSION="+aiVersion, "APPLESEED_VERSION=UNDEFINED", "DL_VERSION=UNDEFINED" ] )

	for dlVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["3delight"] ):
		for compilerVersion in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]): 
			for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
				build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "ARNOLD_VERSION=UNDEFINED", "APPLESEED_VERSION=UNDEFINED", "DL_VERSION="+dlVersion ] )

	appleseedCompilerMap = { x : [] for x in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]) }
	for appleseedVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ):
		if not IEEnv.Registry.validateVariation( ["CORTEX_VERSION=10", "APPLESEED_VERSION={0}".format( appleseedVersion ) ] ) :
			continue

		compilerVersion = IEEnv.registry["apps"]["appleseed"][appleseedVersion][IEEnv.platform()]["compilerVersion"]
		appleseedCompilerMap[compilerVersion].append( appleseedVersion )
		
		for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
			build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "ARNOLD_VERSION=UNDEFINED", "APPLESEED_VERSION="+appleseedVersion, "DL_VERSION=UNDEFINED" ] )

	aiVersion = IEEnv.activeVersions( IEEnv.registry["apps"]["arnold"] )[-1]
	for mayaVersion in IEEnv.activeAppVersions( "maya" ) :
		compilerVersion = IEEnv.registry["apps"]["maya"][mayaVersion][IEEnv.platform()]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=maya", "APP_VERSION="+mayaVersion, "ARNOLD_VERSION=" + aiVersion, "APPLESEED_VERSION={0}".format(appleseedVersion)] )

	for nukeVersion in IEEnv.activeAppVersions( "nuke" ) :
		compilerVersion = IEEnv.registry["apps"]["nuke"][nukeVersion][IEEnv.platform()]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=nuke", "APP_VERSION="+nukeVersion, "ARNOLD_VERSION=" + aiVersion, "APPLESEED_VERSION={0}".format(appleseedVersion) ] )

	for houdiniVersion in IEEnv.activeAppVersions( "houdini" ) :
		compilerVersion = IEEnv.registry["apps"]["houdini"][houdiniVersion][IEEnv.platform()]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=houdini", "APP_VERSION="+houdiniVersion, "ARNOLD_VERSION=" + aiVersion, "APPLESEED_VERSION={0}".format(appleseedVersion) ] )

	for rvVersion in IEEnv.activeAppVersions( "rv" ) :
		build( [ "APP=rv", "APP_VERSION="+rvVersion, "ARNOLD_VERSION=UNDEFINED", "APPLESEED_VERSION=UNDEFINED", "DL_VERSION=UNDEFINED" ] )

	installDocs()

else :

	raise RuntimeError( "Unknown platform" )

