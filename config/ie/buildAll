#!/usr/bin/env iePython2.7

import IEEnv
import subprocess
import sys
import os
import os.path
import shutil

##########################################################################
# parse SConstruct file for the cortex version
##########################################################################

## \todo: this is duplicated from ./options but can we centralize it instead?
def cortexRegistryVersion() :

	import re
	varsFound = {}
	varsToFind = [ "ieCoreMilestoneVersion", "ieCoreMajorVersion" ]

	with open( "SConstruct", "r" ) as f :
		for line in f :
			for varName in varsToFind :
				match = re.match( "^\s*%s\s*=\s*(?P<value>\d+).*$" % varName, line )
				if match :
					varsFound[varName] = match.groupdict()["value"]
					varsToFind.remove( varName )
					break
			if not varsToFind:
				break

	if varsToFind :
		raise Exception( "Could not find the Cortex version in the SConstruct file. Please review the parsing rules." )

	return varsFound["ieCoreMilestoneVersion"] + "." + varsFound["ieCoreMajorVersion"]

platform = IEEnv.platform()
cortexCompatibilityVersion = cortexRegistryVersion()
cortexReg = IEEnv.registry["libraries"]["cortex"][cortexCompatibilityVersion][platform]

##########################################################################
# Run a single build
##########################################################################

def build( extraArgs = [] ) :

	sysArgs = sys.argv[1:]

	install = False
	if "install" in sysArgs :
		install = True
		sysArgs.remove( "install" )

	release = False
	if "RELEASE=1" in sysArgs :
		release = True

	if "J=" in " ".join( sysArgs ) :
		sysArgs = " ".join( sysArgs ).replace( "J=", "-j " ).split( " " )

	installPrefix = "/software" if release else os.path.expanduser( "~" )
	buildArgs = [ "INSTALL_PREFIX=" + installPrefix ]
	buildArgs.extend( extraArgs )
	buildArgs.extend( sysArgs )

	argsToValidate = [ "CORTEX_VERSION={}".format( cortexCompatibilityVersion ) ] + extraArgs
	if not IEEnv.Registry.validateVariation( argsToValidate ) :
		print( "Skipped invalid variation combination: " + str(argsToValidate) + "\n" )
		return

	cmd = [ "scons", "install" ] if install or release else [ "scons" ]

	print( " ".join( cmd + buildArgs ) )
	if subprocess.call( cmd + buildArgs ) != 0 :
		raise RuntimeError( "Error : " + str( " ".join( cmd + buildArgs ) ) )
	print( "Build succeeded: " + " ".join( cmd + buildArgs ) + "\n" )

##########################################################################
# Build docs only
##########################################################################

def installDocs() :

	sysArgs = sys.argv[1:]

	if "RELEASE=1" not in sysArgs :
		return

	buildArgs = [ "INSTALL_PREFIX=/software" ]
	buildArgs.extend( sysArgs )

	if subprocess.call( [ "scons", "installDoc" ] + buildArgs ) != 0 :

		raise RuntimeError("Error : scons installDoc " + str( " ".join( buildArgs ) ) )

##########################################################################
# Loop over all builds
##########################################################################

if platform in ( "cent7.x86_64", ) :

	for compilerVersion in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]):
		for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
			build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "APPLESEED_VERSION=UNDEFINED", "DL_VERSION=UNDEFINED" ] )

	for dlVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["3delight"] ):
		for compilerVersion in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]):
			for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
				build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "APPLESEED_VERSION=UNDEFINED", "DL_VERSION="+dlVersion ] )

	appleseedCompilerMap = { x : [] for x in IEEnv.activeVersions(IEEnv.registry["compilers"]["gcc"]) }
	for appleseedVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ):
		compilerVersion = IEEnv.registry["apps"]["appleseed"][appleseedVersion][platform]["compilerVersion"]
		appleseedCompilerMap[compilerVersion].append( appleseedVersion )
		for pythonVersion in IEEnv.activeVersions( IEEnv.registry["apps"]["python"] ) :
			build( [ "COMPILER_VERSION="+compilerVersion, "PYTHON_VERSION="+pythonVersion, "APPLESEED_VERSION="+appleseedVersion, "DL_VERSION=UNDEFINED" ] )

	for mayaVersion in IEEnv.activeAppVersions( "maya" ) :
		compilerVersion = IEEnv.registry["apps"]["maya"][mayaVersion][platform]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=maya", "APP_VERSION="+mayaVersion, "APPLESEED_VERSION={0}".format(appleseedVersion)] )

	for nukeVersion in IEEnv.activeAppVersions( "nuke" ) :
		compilerVersion = IEEnv.registry["apps"]["nuke"][nukeVersion][platform]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=nuke", "APP_VERSION="+nukeVersion, "APPLESEED_VERSION={0}".format(appleseedVersion) ] )

	for houdiniVersion in IEEnv.activeAppVersions( "houdini" ) :
		compilerVersion = IEEnv.registry["apps"]["houdini"][houdiniVersion][platform]["compilerVersion"]
		appleseedVersion = appleseedCompilerMap.get( compilerVersion, IEEnv.activeVersions( IEEnv.registry["apps"]["appleseed"] ) )[-1]
		build( [ "APP=houdini", "APP_VERSION="+houdiniVersion, "APPLESEED_VERSION={0}".format(appleseedVersion) ] )

	for rvVersion in IEEnv.activeAppVersions( "rv" ) :
		build( [ "APP=rv", "APP_VERSION="+rvVersion, "APPLESEED_VERSION=UNDEFINED", "DL_VERSION=UNDEFINED" ] )

	installDocs()

else :

	raise RuntimeError( "Unknown platform" )

