parameters:
  name: ''
  vmImage: ''
  container: ''
  buildType: 'RELEASE'
  threads: 2
  options: ''
  envSetupCmd: 'g++ --version'

jobs:

 - job: ${{ parameters.name }}_${{ parameters.buildType }}

   timeoutInMinutes: 360

   ${{ if ne(parameters.container, '') }}:
      container: ${{ parameters.container }}

   pool:
     vmImage: ${{ parameters.vmImage }}

   variables:
     BUILD_TYPE: ${{ parameters.buildType }}

   steps:

   - task: UsePythonVersion@0
     inputs:
       versionSpec: '2.7'
       addToPath: true
       architecture: 'x64'
     condition: eq( variables['Agent.OS'], 'Windows_NT' )

   # Provides $(Cortex.*) variables
   - script: |
       python config/azure/setBuildVars.py
     displayName: 'Set Custom Variables'

   - script: |
       python config/installDependencies.py --dependenciesDir $(Cortex.Dependencies.Dir)
     displayName: 'Install Dependencies'

   - script: |
       export LD_PRELOAD=/usr/lib64/libSegFault.so
     displayName: 'Configure Toolchain (Linux)'
     condition: eq( variables['Agent.OS'], 'Linux' )

   - task: PowerShell@2
     inputs:
       targetType: 'inline'
       script: |
         if (-not (Test-Path doxygen\doxygen.exe)) {
           wget http://doxygen.nl/files/doxygen-1.8.20.windows.x64.bin.zip -OutFile doxygen.zip
           Expand-Archive -LiteralPath doxygen.zip -DestinationPath doxygen
           Remove-Item -path doxygen.zip
         }
         python -m pip install scons
     displayName: Install Toolchain (Windows)
     condition: eq( variables['Agent.OS'], 'Windows_NT' )

   - script: |
       ${{ parameters.envSetupCmd }}
       scons -j ${{ parameters.threads }} install BUILD_TYPE=${{ parameters.buildType }} OPTIONS=${{ parameters.options }}
     displayName: 'Build'

   - script: |
       scons testCore testCorePython testScene testImage testAlembic testAppleseed OPTIONS=${{ parameters.options }}
       cat test/IECore/results.txt
     displayName: 'Test'
     condition: and( succeeded(), eq( variables['Agent.OS'], 'Linux' ) )

   - publish: $(Cortex.Build.Name)
     artifact: $(Cortex.Build.Name)



