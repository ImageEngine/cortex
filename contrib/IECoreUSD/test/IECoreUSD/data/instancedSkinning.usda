#usda 1.0

# A prototype containing a skeleton and a couple of cubes, one of them skinned.

def Scope "Prototypes"
{

    uniform token visibility = "invisible"

    def SkelRoot "SkeletonRoot" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        def Skeleton "Skeleton" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
            uniform token[] joints = ["Joint1"]
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
        }

        def Mesh "SkinnedCube" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
            uniform token subdivisionScheme = "none"
            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
            matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            int[] primvars:skel:jointIndices = [0, 0, 0, 0, 0, 0, 0, 0] (
                elementSize = 1
                interpolation = "vertex"
            )
            float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            rel skel:skeleton = </Prototypes/SkeletonRoot/Skeleton>
        }

        # Just regular geometry. Even though it's inside a SkelRoot, it
        # shouldn't be affected by SkelAnimation at all.
        def Mesh "UnskinnedCube"
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
            uniform token subdivisionScheme = "none"
            point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        }
    }

}

# Instance of the prototype, with an animation inherited onto it.

def Xform "Instance1" (
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
	append rel skel:animationSource = </Instance1/InlineAnim>

    def SkelAnimation "InlineAnim"
    {
        uniform token[] joints = ["Joint1"]
        quatf[] rotations = [(1, 0, 0, 0)]
        half3[] scales = [(1, 1, 1)]
        float3[] translations = [(0, 0, 1)]
    }

	over "SkeletonRoot" (
		instanceable = true
		prepend references = </Prototypes/SkeletonRoot>
	)
	{
	}
}

# Another instance of the prototype, with a different animation inherited onto it.

def SkelAnimation "SeparateAnim"
{
	uniform token[] joints = ["Joint1"]
    quatf[] rotations = [(1, 0, 0, 0)]
    half3[] scales = [(1, 1, 1)]
	float3[] translations = [(0, 0, -1)]
}

def Xform "Group" (
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
	append rel skel:animationSource = </SeparateAnim>

    def Xform "Instance2"
    {
        over "SkeletonRoot" (
            instanceable = true
            prepend references = </Prototypes/SkeletonRoot>
        )
        {
        }
    }
}

# A third instance, this time sharing the animation with the second instance.

def Xform "Instance3" (
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
    append rel skel:animationSource = </SeparateAnim>
    over "SkeletonRoot" (
        instanceable = true
        prepend references = </Prototypes/SkeletonRoot>
    )
    {
    }
}

# And now an instanceable reference to the third instance.

def Xform "Instance4" (
    instanceable = true
    prepend references = </Instance3>
)
{
}
