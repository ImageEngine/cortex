{
version 0.8
execute	[ 0	locks=0 ]	(	[ execute	0 ] 	)
renderdialog	[ 0	locks=0 ]	(	[ renderdialog	0 ] 	)
trange	[ 0	locks=0 ]	(	[ trange	0 ] 	)
f	[ 0	locks=0 ]	(	[ f1	1 ] 	[ f2	100 ] 	[ f3	1 ] 	)
take	[ 0	locks=0 ]	(	_current_	)
soppath	[ 0	locks=0 ]	(	../DUMMY_GEO	)
sopoutput	[ 0	locks=0 ]	(	$HIP/$F.bgeo	)
xformtype	[ 0	locks=0 ]	(	"none"	)
initsim	[ 0	locks=0 ]	(	"off"	)
alfprogress	[ 0	locks=0 ]	(	"off"	)
reportnetwork	[ 0	locks=0 ]	(	"off"	)
saveretry	[ 0	locks=0 ]	(	0	)
tprerender	[ 0	locks=0 ]	(	"on"	)
prerender	[ 8	locks=1 ]	(	"import os.path

# set a path for our bgeo to be written to
baker = hou.node( \"..\" )
cob_path = baker.parm( \"export_path\" ).unexpandedString()
bgeo_path = \"%s.bgeo\" % os.path.splitext( cob_path )[0]
hou.pwd().parm( \"sopoutput\" ).set( bgeo_path )


"	)
lprerender	[ 0	locks=0 ]	(	python	)
tpreframe	[ 0	locks=0 ]	(	"on"	)
preframe	[ 0	locks=1 ]	(	"import sys, IECore, IECoreHoudini
top = hou.node( \"..\" )
file_path = top.evalParm( \"export_path\" )
output_format = (\"FIO\", \"COB\")[top.evalParm( \"export_format\" )]
conversionType = (IECore.TypeId.PointsPrimitive, IECore.TypeId.MeshPrimitive)[top.evalParm( \"conversionType\" )]

#=====
# take houdini geometry and convert it to cortex
baker = hou.node(\"../INPUT_GEO\")
inputs = baker.inputs()
if len(inputs)>0:
    input_sop = inputs[0]
    converter = IECoreHoudini.FromHoudiniGeometryConverter.create( input_sop, resultType = conversionType )
    converted = converter.convert()

    if output_format==\"FIO\":
        object_name = input_sop.name()
        object_from_sop = top.evalParm( \"name_object_from_sop\" )
        if not object_from_sop:
            object_name = top.evalParm( \"alternate_name\" )
        writer = IECore.AttributeCache( file_path, IECore.IndexedIO.OpenMode.Write )
        for attr in converted.keys():
            writer.write( object_name, attr, converted[attr].data )
        del( writer )

    if output_format==\"COB\":
        writer = IECore.Writer.create( converted, file_path )
        writer.write()
        del( writer )
"	)
lpreframe	[ 0	locks=0 ]	(	python	)
tpostframe	[ 0	locks=0 ]	(	"on"	)
postframe	[ 0	locks=1 ]	(	"import os, os.path
baker = hou.pwd()
bgeo_path = baker.evalParm( \"sopoutput\" )
if os.path.exists( bgeo_path ):
    os.remove( bgeo_path )
"	)
lpostframe	[ 0	locks=0 ]	(	python	)
tpostrender	[ 0	locks=0 ]	(	"off"	)
postrender	[ 0	locks=0 ]	(	""	)
lpostrender	[ 0	locks=0 ]	(	hscript	)
}
