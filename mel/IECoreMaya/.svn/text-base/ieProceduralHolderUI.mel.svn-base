//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007-2010, Image Engine Design Inc. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the name of Image Engine Design nor the names of any
//       other contributors to this software may be used to endorse or
//       promote products derived from this software without specific prior
//       written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

/// The maya relationship editor by default won't show custom shape
/// nodes in the light linking panels. This is because it uses the
/// lightLinkingObjectFilter created in $MAYA_LOCATION/scripts/startup/initDefaultFilters.mel,
/// which in turn references the renderableObjectShapeFilter created in the same
/// file. The renderableObjectShapeFilter is hardcoded to pass through only certain built
/// in types, even though the API allows the creation of custom shapes, and the low level light linking
/// code works fine with those custom shapes. This function munges the lightLinkingObjectFilter
/// to pass through ieProceduralHolder nodes, so that we can get full light linking functionality
/// with them.
global proc ieProceduralHolderUIFixLightLinking()
{
	itemFilter -e -cls "other" lightLinkingObjectFilter; // must reclassify to allow renaming in maya 2012
	string $l = `rename lightLinkingObjectFilter lightLinkingObjectFilterBeforeIEProcedurals`;
	itemFilter -e -cls "builtIn" lightLinkingObjectFilterBeforeIEProcedurals;
	string $p = `itemFilter -cls "builtIn" -byType ieProceduralHolder ieProceduralHolderFilter`;
	itemFilter -union $l ieProceduralHolderFilter -cls "builtIn" lightLinkingObjectFilter;
}
// Call the above function once on startup.
global int $ieProceduralHolderUIFixedLightLinking;
if( $ieProceduralHolderUIFixedLightLinking==0 )
{
	ieProceduralHolderUIFixLightLinking();
	$ieProceduralHolderUIFixedLightLinking = 1;
}

string $AEieProceduralHolderDisplaylistLayout = "";

global proc AEieProceduralHolderDisplaylistParameterNew( string $attrName )
{
	global string $AEieProceduralHolderDisplaylistLayout;
	
	$AEieProceduralHolderDisplaylistLayout = `columnLayout`;
	
	setParent ..;
	
	AEieProceduralHolderDisplaylistParameterReplace( $attrName );
	
}

global proc AEieProceduralHolderDisplaylistParameterReplace( string $attrName )
{
	global string $AEieProceduralHolderDisplaylistLayout;
	
	string $controls[] = `columnLayout -q -ca $AEieProceduralHolderDisplaylistLayout`;
	
	for( $c in $controls )
	{
		deleteUI $c;
	}
	
	string $node = ieAttrNode( $attrName );
	
	if( `objExists ( $node + ".useDisplayLists" )` )
	{
		setParent $AEieProceduralHolderDisplaylistLayout;
		attrControlGrp -l "Use Display Lists" -attribute ( $node + ".useDisplayLists" );
		setParent ..;
	}
	
}

global proc AEieProceduralHolderTemplate( string $nodeName )
{
	editorTemplate -beginScrollLayout;
	
		editorTemplate -beginLayout "Class";
			ieParameterisedHolderUIClassControl();
			ieParameterisedHolderUIParameterPresetsControl();
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Display";

			editorTemplate -addControl "glPreview";
			editorTemplate -addControl "drawBound";
			editorTemplate -label "Coordinate Systems" -addControl "drawCoordinateSystems";
			editorTemplate -addControl "transparent";
			editorTemplate -addControl "culling";
			editorTemplate -callCustom "AEieProceduralHolderDisplaylistParameterNew" "AEieProceduralHolderDisplaylistParameterReplace" "iDontExist";

		editorTemplate -endLayout;

		editorTemplate -beginLayout "Parameters";
				ieParameterisedHolderUIParametersControl();		
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Render Stats";
		
			editorTemplate -beginNoOptimize;
			
				editorTemplate -addControl "castsShadows";
				editorTemplate -addControl "receiveShadows";
				editorTemplate -addControl "motionBlur";
				editorTemplate -addControl "primaryVisibility";
				editorTemplate -addControl "smoothShading";
				editorTemplate -addControl "visibleInReflections";
				editorTemplate -addControl "visibleInRefractions";
	        
				editorTemplate -addControl "doubleSided";
				editorTemplate -addControl "opposite";
			
			editorTemplate -endNoOptimize;
			
			
			editorTemplate -endNoOptimize;
		
		editorTemplate -endLayout;

		editorTemplate -beginLayout "Extra Attributes";
				ieParameterisedHolderUIExtraAttributesControl();
		editorTemplate -endLayout;
			
	editorTemplate -endScrollLayout;	
}

global proc ieProceduralHolderDagMenuProc( string $parent, string $child ) 
{
	python( "import IECoreMaya; IECoreMaya.ProceduralHolderUI._dagMenu( '" + $parent + "', '" + $child + "' )" );
}

