//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007-2009, Image Engine Design Inc. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the name of Image Engine Design nor the names of any
//       other contributors to this software may be used to endorse or
//       promote products derived from this software without specific prior
//       written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

global string $ieCurrentAEParameterisedHolderClass;
global int $ieCurrentAEParameterisedHolderVersion;

/// \todo: rewrite all of this in python using ieAttributeEditorControl
global proc AEieParameterisedHolderNodeTemplate( string $nodeName )
{
	editorTemplate -beginScrollLayout;
	
		editorTemplate -beginLayout "Class";
			ieParameterisedHolderUIClassControl();
			ieParameterisedHolderUIParameterPresetsControl();
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Parameters";
			ieParameterisedHolderUIParametersControl();		
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Extra Attributes";
			
			ieParameterisedHolderUIExtraAttributesControl();
			
		editorTemplate -endLayout;
	
	editorTemplate -endScrollLayout;	

}

/// Call this function from within an AEtemplate to add a layout for editing the parameters of
/// a ParameterisedHolder.
global proc ieParameterisedHolderUIParametersControl()
{
	editorTemplate -callCustom "ieParameterisedHolderUIParametersNew" "ieParameterisedHolderUIParametersReplace" "iDontExist";
}

/// A global dictionary from Attribute Editor parent layouts to ParameterUI objects
iePython -command "ieAEParameterUIs = {}";

/// \todo This leaks. The global dictionary of ParameterUI objects never gets emptied. The ParameterUI objects hold
/// references to Parameters. The Parameters potentially refer to big fat meshes and images. Tidy this up (perhaps using
/// the AttributeEditorControl stuff) so that the ParameterUIs are destroyed when the layout containing them is destroyed.
global proc ieParameterisedHolderUIParametersNew( string $attrName )
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	global string $ieCurrentAEParameterisedHolderClass;
	global int $ieCurrentAEParameterisedHolderVersion;

	string $node = ieAttrNode( $attrName );
		
	string $py = "parameterisedHolder = IECoreMaya.FnParameterisedHolder( '"+$node+"' )\nparameterised = parameterisedHolder.getParameterised()[0]\nif parameterised: ieAEParameterUIs['" + `setParent -q` + "'] = IECoreMaya.ParameterUI.create( parameterisedHolder.object(), parameterised.parameters() )";
	iePython -command $py;
	
	$ieCurrentAEParameterisedHolderClass = ieParameterisedHolderClassName( $node );
	$ieCurrentAEParameterisedHolderVersion = ieParameterisedHolderClassVersion( $node );
	
	setUITemplate -popTemplate;
}

global proc ieParameterisedHolderUIParametersReplace( string $attrName )
{
	global string $ieCurrentAEParameterisedHolderClass;
	global int $ieCurrentAEParameterisedHolderVersion;
	
	string $node = ieAttrNode( $attrName );
	
	string $class = ieParameterisedHolderClassName( $node );
	int $currentVersion = ieParameterisedHolderClassVersion( $node );
	
	if ( $class!="" && $ieCurrentAEParameterisedHolderClass == $class && $ieCurrentAEParameterisedHolderVersion == $currentVersion)
	{
		string $py = "parameterisedHolder = IECoreMaya.FnParameterisedHolder( '"+$node+"' )\nparameterised = parameterisedHolder.getParameterised()[0]\nif parameterised: ieAEParameterUIs['" + `setParent -q` + "'].replace( parameterisedHolder.object(), parameterised.parameters() )";
		iePython -command $py;
	}
	else
	{
		string $currentLayout = `setParent -q`;
		if (`layout -q -exists $currentLayout`)
		{
			string $currentLayoutChildren[] = `layout -q -ca $currentLayout`;
			
			if (size($currentLayoutChildren))
			{
				deleteUI $currentLayoutChildren;
			}
		}
		
		ieParameterisedHolderUIParametersNew( $attrName );			
	}
}

/// Call this from within an AEtemplate proc to include a control section for displaying the
/// class name and description and setting the class version.
global proc ieParameterisedHolderUIClassControl()
{
	editorTemplate -callCustom "ieParameterisedHolderUIClassControlNewAndReplace" "ieParameterisedHolderUIClassControlNewAndReplace" "className";
}

global proc ieParameterisedHolderUIClassControlNewAndReplace( string $attrName )
{
	string $node = ieAttrNode( $attrName );
	
	string $description = ieParameterisedHolderClassDescription( $node );
	string $class = ieParameterisedHolderClassName( $node );
	int $currentVersion = ieParameterisedHolderClassVersion( $node );
	int $versions[] = ieParameterisedHolderClassVersions( $node );
	
	string $controlName = "ieParameterisedHolderUIAEClassControl";
	if( `control -exists $controlName` )
	{
		deleteUI $controlName;
	}
	
	rowLayout -nc 2 $controlName;
		text -align right -label $class -ann $description;
		if ( size($versions) )
		{
			text -align left -font boldLabelFont -label ("v"+$currentVersion);
			popupMenu;
			/// Put most recent (and presumably most relevant) versions first
			int $latestVersionIdx = size( $versions ) - 1 ;			
			for( $i = $latestVersionIdx; $i >= 0; $i = $i - 1 )
			{
				/// Break the popupMenu into multiple cascading menus with 30 elements maximum in each, so that 
				/// we don't exceed the screen height
				if ( $i != $latestVersionIdx && ( $i - $latestVersionIdx ) % 30 == 0 )
				{
					menuItem -label "More..." -subMenu true;
				}
 				menuItem -label ("v"+$versions[$i]) -command ("ieParameterisedHolderUIClassControlVersionCallback " + $node + " " + $versions[$i]);
			}
		} else {
			text -align left -font boldLabelFont -label "Not Versioned";
		}
		setParent ..;
	setParent ..;
}

global proc ieParameterisedHolderUIClassControlVersionCallback( string $node, string $versionStr )
{
	int $versionInt = (int)$versionStr;
	string $class = ieParameterisedHolderClassName( $node );
	string $sp = ieParameterisedHolderClassSearchPathEnvVar( $node );
	ieParameterisedHolderSetParameterised( $node, $class, $versionInt, $sp );
	
	/// Now update the Attribute Editor. This needs to be deferred as it seems Maya doesn't
	/// appreciate us doing this right in the middle of a menu callback.
	evalDeferred( "AEbuildControls()" );
}

global proc ieParameterisedHolderUIParameterPresetsControl()
{
	editorTemplate -callCustom "ieParameterisedHolderUIParameterPresetsControlNewAndReplace" "ieParameterisedHolderUIParameterPresetsControlNewAndReplace" "iDontExist";
}

global proc ieParameterisedHolderUIParameterPresetsControlNewAndReplace( string $attrName )
{
	string $node = ieAttrNode( $attrName );
	
	string $controlName = "ieParameterisedHolderUIAEParameterPresetsControl";
	if( `control -exists $controlName` )
	{
		deleteUI $controlName;
	}
	
	string $searchPath = ieParameterisedHolderClassSearchPathEnvVar( $node );
	if ( $searchPath == "" )
	{
		return;
	}
	
	string $pyStub = "import IECoreMaya; IECoreMaya.PresetsUI( '" + $node + "' )";
	
	columnLayout -adj 1 $controlName;
	
		separator -style "none" -h 3;
		
		rowLayout -nc 4 -adj 4 -cw 2 60 -cw 3 60;

			text -align right -label "Parameter Values" -ann "Load and Save presets for the node's parameters, or a sub-set of them.";

			button -label "Save..." -w 60 -command ( "python( \"" + $pyStub + ".save()\" );" );
			button -label "Load..." -w 60 -command ( "python( \"" + $pyStub + ".load()\" );" );

		setParent ..;

		separator -style "none" -h 3;

	setParent ..;	
}


global proc ieParameterisedHolderUIExtraAttributesControl()
{
	editorTemplate -callCustom "ieParameterisedHolderUIExtraAttributesNewAndReplace" "ieParameterisedHolderUIExtraAttributesNewAndReplace" "iDontExist";
	// maya hangs when trying to update the extra attributes when there are large numbers of them - which
	// there often are with real world procedurals. we can't find a way to stop maya from wanting to draw them
	// so the only thing we can do is hide them deep enough that only the determined user can get into trouble. as
	// soon as the Open With Caution section has been opened, maya may hang at any future time when updating the
	// attribute editor, even if you subsequently close that section.
	editorTemplate -beginLayout "All Dynamic Attributes";
		editorTemplate -beginLayout "Open With Caution - Maya May Hang";
			editorTemplate -extraControlsLabel "Too Late Now!" -addExtraControls;
		editorTemplate -endLayout;
	editorTemplate -endLayout;
}
		
global proc ieParameterisedHolderUIExtraAttributesNewAndReplace( string $attrName )
{
	string $buf[2];
	tokenize( $attrName, ".", $buf);
	
	string $nodeName = $buf[0];
	string $attrName = $buf[1];

	if (`control -exists ieParameterisedAEExtraAttributes`)
		deleteUI ieParameterisedAEExtraAttributes;
		
	string $dynAttrs[] = `deleteAttr -q $nodeName`;
	
	columnLayout ieParameterisedAEExtraAttributes;
	
	string $dynAttr;
	for ($dynAttr in $dynAttrs)
	{
		if( `attributeQuery -node $nodeName -hidden $dynAttr`==0 )
		{
			string $attrType = "";
			string $dynAttrName = $nodeName + "." + $dynAttr;
			if (`objExists $dynAttrName` )
			{
				$attrType = `getAttr -type $dynAttrName`;
			}
			if (match("^parm_", $dynAttr) == "" && $dynAttr != "result" && $attrType != "message" )
			{
				attrControlGrp -attribute $dynAttrName;
			}
		}
	}

}
