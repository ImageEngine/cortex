//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Image Engine Design Inc. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the name of Image Engine Design nor the names of any
//       other contributors to this software may be used to endorse or
//       promote products derived from this software without specific prior
//       written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

/// \file ieNode.mel
///
/// This file defines useful functions for operating on nodes. The first argument
/// to each of these functions is the name of a node.
/// \ingroup melgroup

/// Creates a node of type $type, parented to a transform with name $name,
/// or some unique name based on $name. Names the child node to match
/// the parent. i.e. $nameShapeN where N is a numerical suffix to keep
/// names unique. Returns the name of the child.
global proc string ieNodeCreateShapeWithParent( string $name, string $type )
{
	string $parentNode = `createNode "transform" -name $name`;
	string $parentShortName = shortNameOf( $parentNode );
	string $numbers = match( "[0-9]+$", $parentShortName );
	string $shapeName = substring( $parentShortName, 1, size( $parentShortName ) - size( $numbers ) );
	$shapeName = $shapeName + "Shape" + $numbers;
	string $shapeNode = `createNode $type -name $shapeName -parent $parentNode`;
	return $shapeNode;
}
