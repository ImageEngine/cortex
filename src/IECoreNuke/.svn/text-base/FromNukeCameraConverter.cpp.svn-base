//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2010, Image Engine Design Inc. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the name of Image Engine Design nor the names of any
//       other contributors to this software may be used to endorse or
//       promote products derived from this software without specific prior
//       written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

#include "IECore/Camera.h"
#include "IECore/MatrixTransform.h"
#include "IECore/SimpleTypedData.h"
#include "IECore/MessageHandler.h"
#include "IECore/AngleConversion.h"
#include "IECore/CompoundParameter.h"

#include "IECoreNuke/FromNukeCameraConverter.h"
#include "IECoreNuke/Convert.h"

using namespace IECoreNuke;
using namespace IECore;
using namespace Imath;

FromNukeCameraConverter::FromNukeCameraConverter( const DD::Image::CameraOp *camera )
	:	FromNukeConverter( "Converts nuke cameras to IECore cameras." ), m_camera( camera )
{
	
	parameters()->addParameter(
	
		new V2iParameter(
			"resolution",
			"The resolution of the images generated by the converted camera. This is "
			"a parameter as the Nuke camera doesn't specify a resolution, and it must be "
			"known during conversion to compute an appropriate film fit.",
			V2i( 640, 480 )
		)
	
	);
		
}

FromNukeCameraConverter::~FromNukeCameraConverter()
{
}

IECore::V2iParameter *FromNukeCameraConverter::resolutionParameter()
{
	return parameters()->parameter<V2iParameter>( "resolution" );
}

const IECore::V2iParameter *FromNukeCameraConverter::resolutionParameter() const
{
	return parameters()->parameter<V2iParameter>( "resolution" );
}
		
IECore::ObjectPtr FromNukeCameraConverter::doConversion( IECore::ConstCompoundObjectPtr operands ) const
{
	CameraPtr result = new IECore::Camera( m_camera->node_name() );

	// transform
	result->setTransform( new IECore::MatrixTransform( IECore::convert<Imath::M44f>( m_camera->matrix() ) ) );

	// clipping planes
	result->parameters()["clippingPlanes"] = new V2fData( V2f( m_camera->Near(), m_camera->Far() ) );

	// resolution
	V2i resolution = operands->member<V2iData>( "resolution" )->readable();
	result->parameters()["resolution"] = new V2iData( resolution );

	// projection
	float filmWidth = m_camera->film_width();
	switch( m_camera->projection_mode() )
	{
		case DD::Image::CameraOp::LENS_PERSPECTIVE :
		{
			result->parameters()["projection"] = new IECore::StringData( "perspective" );
			float fov = radiansToDegrees( 2 * atan( ( filmWidth / 2.0f ) / m_camera->focal_length() ) );
			result->parameters()["projection:fov"] = new FloatData( fov );
			break;
		}
		case DD::Image::CameraOp::LENS_UV :
		case DD::Image::CameraOp::LENS_SPHERICAL :
		case DD::Image::CameraOp::LENS_RENDER_CAMERA :
			msg( Msg::Warning, "FromNukeCameraConverter::doConversion", "Unsupported projection type - reverting to orthographic" );
			// fall through to orthographic code
		case DD::Image::CameraOp::LENS_ORTHOGRAPHIC :
		{
			result->parameters()["orthographic"] = new IECore::StringData( "orthographic" );
			break;
		}
	}
	
	// screen window. nuke fits the field of view horizontally to the width of the image, but we also need
	// to take into account the window translate and scale.
	float oneOverAspectRatio = (float)resolution.y / (float)resolution.x;
	float screenWindowHalfWidth = m_camera->projection_mode() == DD::Image::CameraOp::LENS_PERSPECTIVE ? 1.0f : 0.5f * filmWidth / m_camera->focal_length();
	Box2f screenWindow( V2f( -screenWindowHalfWidth, -screenWindowHalfWidth * oneOverAspectRatio ), V2f( screenWindowHalfWidth, screenWindowHalfWidth * oneOverAspectRatio ) );
	V2f screenWindowTranslate = IECore::convert<Imath::V2f>( m_camera->win_translate() );
	V2f screenWindowScale = IECore::convert<Imath::V2f>( m_camera->win_scale() );
	screenWindow.min = screenWindow.min * screenWindowScale + screenWindowTranslate;
	screenWindow.max = screenWindow.max * screenWindowScale + screenWindowTranslate;
	
	result->parameters()["screenWindow"] = new Box2fData( screenWindow );
	
	// we don't currently support window roll
	if( m_camera->win_roll() != 0.0 )
	{
		msg( Msg::Warning, "FromNukeCameraConverter::doConversion", "Window roll is not supported" );
	}
	
	return result;
}
